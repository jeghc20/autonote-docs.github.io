%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logo redrawn revsd (new).eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Richard Box
%%CreationDate: 6/14/10
%%BoundingBox: 0 0 685 231
%%HiResBoundingBox: 0 0 684.7481 230.1470
%%CropBox: 0 0 684.7481 230.1470
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-06-14T09:16:14+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-06-14T09:16:45+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-06-14T09:16:45+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>88</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:CFB782A7792711DF917FE04042D1956C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CFB782A9792711DF917FE04042D1956C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D42FC6219DADDD11B4D9A6448AAB1568</stRef:instanceID>
            <stRef:documentID>uuid:533F697B352711DCA771C9D4A8CC7ABA</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.038889</stDim:w>
            <stDim:h>209.902778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>New Color Swatch 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>85.098000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>100c,75m,15k</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>14.999999</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Green C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>58.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -230.147 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 230.147 li
684.748 230.147 li
684.748 0 li
cp
clp
[1 0 0 1 0 0 ]ct
262.438 67.6597 mo
262.438 64.7163 268.058 65.5195 268.058 65.5195 cv
300.832 65.5195 li
300.832 65.5195 320.912 66.2515 328.791 74.8843 cv
344.177 91.7393 336.027 109.763 330.93 114.347 cv
326.918 117.96 320.363 119.832 320.363 119.832 cv
320.363 119.832 330.128 121.972 336.819 127.992 cv
344.359 134.777 353.639 158.863 343.775 174.673 cv
334.68 189.254 322.646 191.587 307.654 190.994 cv
294.143 190.458 296.685 188.987 282.638 189.254 cv
271 189.475 264.886 189.944 264.886 189.944 cv
264.886 189.944 260.126 190.402 260.679 187.365 cv
261.222 184.379 263.801 184.922 267.79 182.299 cv
270.565 180.471 272.408 175.623 273.141 171.33 cv
274.077 165.845 274.21 157.953 274.21 157.953 cv
274.21 89.7324 li
274.21 89.7324 274.077 88.5288 274.077 87.3247 cv
274.077 78.8452 267.255 71.54 264.847 70.7368 cv
262.572 69.9341 262.572 69.3994 262.438 67.6597 cv
cp
290.665 77.8271 mo
290.531 113.411 li
290.531 113.411 290.75 115.246 291.334 116.219 cv
292.136 117.558 294.143 117.96 294.143 117.96 cv
299.494 117.96 li
299.494 117.96 302.973 117.824 305.647 117.156 cv
307.573 116.675 312.883 113.418 316.216 109.532 cv
318.624 106.722 320.897 100.167 320.897 95.7524 cv
320.897 85.4517 317.151 81.3047 312.068 78.7632 cv
305.212 75.3354 296.417 75.2852 296.417 75.2852 cv
293.207 75.2852 li
293.207 75.2852 291.602 75.2852 291.066 76.0874 cv
290.592 76.8003 290.665 77.8271 290.665 77.8271 cv
cp
290.665 127.858 mo
290.665 168.386 li
290.665 176.145 li
290.665 177.349 292.538 178.552 293.742 179.086 cv
296.152 180.16 298.424 180.425 298.424 180.425 cv
308.724 180.425 li
308.724 180.425 316.082 180.827 321.968 176.947 cv
328.941 172.351 330.93 162.5 330.663 154.875 cv
330.302 144.583 326.495 138.905 320.496 133.61 cv
313.674 127.591 298.959 127.858 298.959 127.858 cv
290.665 127.858 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
262.438 67.6597 mo
262.438 64.7163 268.058 65.5195 268.058 65.5195 cv
300.832 65.5195 li
300.832 65.5195 320.912 66.2515 328.791 74.8843 cv
344.177 91.7393 336.027 109.763 330.93 114.347 cv
326.918 117.96 320.363 119.832 320.363 119.832 cv
320.363 119.832 330.128 121.972 336.819 127.992 cv
344.359 134.777 353.639 158.863 343.775 174.673 cv
334.68 189.254 322.646 191.587 307.654 190.994 cv
294.143 190.458 296.685 188.987 282.638 189.254 cv
271 189.475 264.886 189.944 264.886 189.944 cv
264.886 189.944 260.126 190.402 260.679 187.365 cv
261.222 184.379 263.801 184.922 267.79 182.299 cv
270.565 180.471 272.408 175.623 273.141 171.33 cv
274.077 165.845 274.21 157.953 274.21 157.953 cv
274.21 89.7324 li
274.21 89.7324 274.077 88.5288 274.077 87.3247 cv
274.077 78.8452 267.255 71.54 264.847 70.7368 cv
262.572 69.9341 262.572 69.3994 262.438 67.6597 cv
cp
290.665 77.8271 mo
290.531 113.411 li
290.531 113.411 290.75 115.246 291.334 116.219 cv
292.136 117.558 294.143 117.96 294.143 117.96 cv
299.494 117.96 li
299.494 117.96 302.973 117.824 305.647 117.156 cv
307.573 116.675 312.883 113.418 316.216 109.532 cv
318.624 106.722 320.897 100.167 320.897 95.7524 cv
320.897 85.4517 317.151 81.3047 312.068 78.7632 cv
305.212 75.3354 296.417 75.2852 296.417 75.2852 cv
293.207 75.2852 li
293.207 75.2852 291.602 75.2852 291.066 76.0874 cv
290.592 76.8003 290.665 77.8271 290.665 77.8271 cv
cp
290.665 127.858 mo
290.665 168.386 li
290.665 176.145 li
290.665 177.349 292.538 178.552 293.742 179.086 cv
296.152 180.16 298.424 180.425 298.424 180.425 cv
308.724 180.425 li
308.724 180.425 316.082 180.827 321.968 176.947 cv
328.941 172.351 330.93 162.5 330.663 154.875 cv
330.302 144.583 326.495 138.905 320.496 133.61 cv
313.674 127.591 298.959 127.858 298.959 127.858 cv
290.665 127.858 li
cp
@
343.509 188.066 mo
344.29 184.108 346.797 187.28 352.068 181.644 cv
355.948 177.5 358.624 173.351 361.167 168.001 cv
362.455 165.285 364.376 159.974 364.376 159.974 cv
393.941 79.4482 li
393.941 79.4482 394.342 76.6382 394.342 74.6313 cv
394.342 72.7588 394.007 70.8857 394.007 70.8857 cv
394.007 70.8857 395.427 70.6973 396.348 70.4839 cv
397.218 70.2837 399.224 69.749 399.224 69.749 cv
412.268 65.5352 li
448.653 155.158 li
448.653 155.158 454.445 171.065 460.693 178.702 cv
463.102 181.644 465.91 184.053 469.121 184.188 cv
474.334 184.404 471.395 189.805 468.05 189.805 cv
465.372 189.805 455.479 189.55 446.915 189.671 cv
437.417 189.805 419.892 190.473 419.892 190.473 cv
419.892 190.473 416.151 190.765 416.95 187.932 cv
417.988 184.243 420.829 184.99 422.969 184.587 cv
428.386 183.574 435.41 180.977 436.615 175.492 cv
437.458 171.649 434.742 164.523 434.742 164.523 cv
422.434 134.027 li
386.851 134.027 li
376.684 162.917 li
376.684 162.917 375.346 166.929 375.079 168.802 cv
374.811 170.674 374.811 177.231 377.487 180.442 cv
380.161 183.65 387.384 184.587 390.863 184.855 cv
394.342 185.124 391.666 190.072 388.99 190.072 cv
386.315 190.072 375.346 189.671 367.32 189.404 cv
359.292 189.136 345.915 190.207 345.915 190.207 cv
345.915 190.207 343.509 190.875 343.509 188.066 cv
cp
390.328 124.127 mo
418.956 124.127 li
403.707 86.8047 li
390.328 124.127 li
cp
f
343.509 188.066 mo
344.29 184.108 346.797 187.28 352.068 181.644 cv
355.948 177.5 358.624 173.351 361.167 168.001 cv
362.455 165.285 364.376 159.974 364.376 159.974 cv
393.941 79.4482 li
393.941 79.4482 394.342 76.6382 394.342 74.6313 cv
394.342 72.7588 394.007 70.8857 394.007 70.8857 cv
394.007 70.8857 395.427 70.6973 396.348 70.4839 cv
397.218 70.2837 399.224 69.749 399.224 69.749 cv
412.268 65.5352 li
448.653 155.158 li
448.653 155.158 454.445 171.065 460.693 178.702 cv
463.102 181.644 465.91 184.053 469.121 184.188 cv
474.334 184.404 471.395 189.805 468.05 189.805 cv
465.372 189.805 455.479 189.55 446.915 189.671 cv
437.417 189.805 419.892 190.473 419.892 190.473 cv
419.892 190.473 416.151 190.765 416.95 187.932 cv
417.988 184.243 420.829 184.99 422.969 184.587 cv
428.386 183.574 435.41 180.977 436.615 175.492 cv
437.458 171.649 434.742 164.523 434.742 164.523 cv
422.434 134.027 li
386.851 134.027 li
376.684 162.917 li
376.684 162.917 375.346 166.929 375.079 168.802 cv
374.811 170.674 374.811 177.231 377.487 180.442 cv
380.161 183.65 387.384 184.587 390.863 184.855 cv
394.342 185.124 391.666 190.072 388.99 190.072 cv
386.315 190.072 375.346 189.671 367.32 189.404 cv
359.292 189.136 345.915 190.207 345.915 190.207 cv
345.915 190.207 343.509 190.875 343.509 188.066 cv
cp
390.328 124.127 mo
418.956 124.127 li
403.707 86.8047 li
390.328 124.127 li
cp
@
463.503 67.8096 mo
463.503 67.8096 466.98 68.0767 471.395 68.3442 cv
475.669 68.6035 482.498 68.8799 482.498 68.8799 cv
530.792 68.7456 li
530.792 68.7456 538.683 68.7456 546.576 68.0767 cv
552.712 67.5571 562.095 66.873 562.095 66.873 cv
562.095 66.873 561.547 73.6284 560.086 81.855 cv
558.616 90.1494 557.411 95.2334 557.411 95.2334 cv
557.411 95.2334 556.742 98.1758 555.94 98.7114 cv
555.139 99.2461 550.724 100.852 550.724 100.852 cv
550.724 100.852 551.729 95.2378 551.526 92.2896 cv
551.257 88.4106 550.128 82.1533 547.512 80.3843 cv
542.965 77.3076 537.479 77.4404 533.199 77.1733 cv
528.919 76.9063 521.828 77.3076 519.955 78.645 cv
518.081 79.9829 518.35 83.7285 518.35 83.7285 cv
518.35 165.191 li
518.35 165.191 518.081 175.357 522.764 178.835 cv
526.945 181.944 533.626 183.836 533.626 183.836 cv
533.626 183.836 538.376 183.836 537.346 187.264 cv
536.651 189.57 533.734 189.939 533.734 189.939 cv
533.734 189.939 516.745 189.361 508.452 189.271 cv
496.278 189.136 486.202 189.836 482.457 189.944 cv
477.707 190.08 478.877 184.203 483.137 183.701 cv
485.408 183.433 492.032 182.932 496.41 178.167 cv
500.959 173.217 501.628 163.184 501.628 163.184 cv
501.628 87.3408 li
501.628 87.3408 501.356 81.7432 499.621 79.8491 cv
496.68 76.6382 489.054 76.9063 482.9 77.4404 cv
475.113 78.1177 470.494 81.021 468.453 86.0024 cv
466.312 91.2197 465.376 97.9082 463.77 98.7114 cv
462.068 99.5605 458.018 100.583 458.018 100.583 cv
458.018 100.583 459.835 92.4014 461.229 82.6577 cv
462.165 76.104 463.503 67.8096 463.503 67.8096 cv
cp
f
463.503 67.8096 mo
463.503 67.8096 466.98 68.0767 471.395 68.3442 cv
475.669 68.6035 482.498 68.8799 482.498 68.8799 cv
530.792 68.7456 li
530.792 68.7456 538.683 68.7456 546.576 68.0767 cv
552.712 67.5571 562.095 66.873 562.095 66.873 cv
562.095 66.873 561.547 73.6284 560.086 81.855 cv
558.616 90.1494 557.411 95.2334 557.411 95.2334 cv
557.411 95.2334 556.742 98.1758 555.94 98.7114 cv
555.139 99.2461 550.724 100.852 550.724 100.852 cv
550.724 100.852 551.729 95.2378 551.526 92.2896 cv
551.257 88.4106 550.128 82.1533 547.512 80.3843 cv
542.965 77.3076 537.479 77.4404 533.199 77.1733 cv
528.919 76.9063 521.828 77.3076 519.955 78.645 cv
518.081 79.9829 518.35 83.7285 518.35 83.7285 cv
518.35 165.191 li
518.35 165.191 518.081 175.357 522.764 178.835 cv
526.945 181.944 533.626 183.836 533.626 183.836 cv
533.626 183.836 538.376 183.836 537.346 187.264 cv
536.651 189.57 533.734 189.939 533.734 189.939 cv
533.734 189.939 516.745 189.361 508.452 189.271 cv
496.278 189.136 486.202 189.836 482.457 189.944 cv
477.707 190.08 478.877 184.203 483.137 183.701 cv
485.408 183.433 492.032 182.932 496.41 178.167 cv
500.959 173.217 501.628 163.184 501.628 163.184 cv
501.628 87.3408 li
501.628 87.3408 501.356 81.7432 499.621 79.8491 cv
496.68 76.6382 489.054 76.9063 482.9 77.4404 cv
475.113 78.1177 470.494 81.021 468.453 86.0024 cv
466.312 91.2197 465.376 97.9082 463.77 98.7114 cv
462.068 99.5605 458.018 100.583 458.018 100.583 cv
458.018 100.583 459.835 92.4014 461.229 82.6577 cv
462.165 76.104 463.503 67.8096 463.503 67.8096 cv
cp
@
572.662 66.6055 mo
568.509 66.3037 567.557 72.1392 570.001 72.6826 cv
572.978 73.3438 575.472 72.8931 578.146 75.9692 cv
581.374 79.6816 580.554 87.7412 580.554 87.7412 cv
580.554 161.312 li
580.554 161.312 580.56 169.561 580.019 173.618 cv
579.218 179.639 576.604 181.819 573.394 183.157 cv
570.522 184.355 568.236 184.515 567.846 187.532 cv
567.469 190.449 570.68 190.08 570.68 190.08 cv
570.68 190.08 578.427 189.537 588.596 189.401 cv
598.774 189.265 609.272 190.08 612.482 190.08 cv
615.694 190.08 617.641 184.922 612.891 184.243 cv
607.665 183.497 602.627 182.583 598.879 179.103 cv
595.967 176.398 596.607 169.336 596.607 169.336 cv
596.607 125.733 li
654.934 125.733 li
654.934 169.336 li
654.934 169.336 654.896 179.109 650.079 180.714 cv
645.263 182.32 642.75 182.479 639.355 183.022 cv
635.832 183.587 632.629 190.08 636.642 190.08 cv
640.656 190.08 653.073 189.128 662.974 189.128 cv
668.73 189.128 678.047 189.746 679.396 189.808 cv
682.381 189.944 683.611 188.636 684.146 186.822 cv
684.825 184.515 681.974 183.971 680.074 183.294 cv
677.846 182.498 675.595 181.665 673.695 178.679 cv
671.413 175.093 672.055 167.332 672.055 167.332 cv
672.055 88.0088 li
672.055 88.0088 671.653 80.3843 674.194 76.6382 cv
676.99 72.5205 678.074 73.0264 680.484 72.2236 cv
683.655 71.167 684.363 66.4717 681.555 66.7397 cv
678.575 67.0234 668.717 67.6299 663.092 67.541 cv
654.53 67.4082 645.314 66.9199 643.156 66.8462 cv
639.222 66.7104 638.45 72.8174 641.393 72.8174 cv
644.614 72.8174 649.877 73.6606 652.39 77.3076 cv
655.067 81.1865 655.05 88.2754 654.934 88.4106 cv
654.934 115.299 li
596.607 115.299 li
596.607 88.0088 li
596.607 88.0088 596.338 78.7788 600.485 75.9692 cv
603.458 73.957 606.24 73.8286 609.716 73.2939 cv
613.195 72.7588 615.202 66.6055 611.456 66.873 cv
607.709 67.1401 597.943 67.1401 589.384 67.1401 cv
580.822 67.1401 575.873 67.0068 572.662 66.6055 cv
cp
f
572.662 66.6055 mo
568.509 66.3037 567.557 72.1392 570.001 72.6826 cv
572.978 73.3438 575.472 72.8931 578.146 75.9692 cv
581.374 79.6816 580.554 87.7412 580.554 87.7412 cv
580.554 161.312 li
580.554 161.312 580.56 169.561 580.019 173.618 cv
579.218 179.639 576.604 181.819 573.394 183.157 cv
570.522 184.355 568.236 184.515 567.846 187.532 cv
567.469 190.449 570.68 190.08 570.68 190.08 cv
570.68 190.08 578.427 189.537 588.596 189.401 cv
598.774 189.265 609.272 190.08 612.482 190.08 cv
615.694 190.08 617.641 184.922 612.891 184.243 cv
607.665 183.497 602.627 182.583 598.879 179.103 cv
595.967 176.398 596.607 169.336 596.607 169.336 cv
596.607 125.733 li
654.934 125.733 li
654.934 169.336 li
654.934 169.336 654.896 179.109 650.079 180.714 cv
645.263 182.32 642.75 182.479 639.355 183.022 cv
635.832 183.587 632.629 190.08 636.642 190.08 cv
640.656 190.08 653.073 189.128 662.974 189.128 cv
668.73 189.128 678.047 189.746 679.396 189.808 cv
682.381 189.944 683.611 188.636 684.146 186.822 cv
684.825 184.515 681.974 183.971 680.074 183.294 cv
677.846 182.498 675.595 181.665 673.695 178.679 cv
671.413 175.093 672.055 167.332 672.055 167.332 cv
672.055 88.0088 li
672.055 88.0088 671.653 80.3843 674.194 76.6382 cv
676.99 72.5205 678.074 73.0264 680.484 72.2236 cv
683.655 71.167 684.363 66.4717 681.555 66.7397 cv
678.575 67.0234 668.717 67.6299 663.092 67.541 cv
654.53 67.4082 645.314 66.9199 643.156 66.8462 cv
639.222 66.7104 638.45 72.8174 641.393 72.8174 cv
644.614 72.8174 649.877 73.6606 652.39 77.3076 cv
655.067 81.1865 655.05 88.2754 654.934 88.4106 cv
654.934 115.299 li
596.607 115.299 li
596.607 88.0088 li
596.607 88.0088 596.338 78.7788 600.485 75.9692 cv
603.458 73.957 606.24 73.8286 609.716 73.2939 cv
613.195 72.7588 615.202 66.6055 611.456 66.873 cv
607.709 67.1401 597.943 67.1401 589.384 67.1401 cv
580.822 67.1401 575.873 67.0068 572.662 66.6055 cv
cp
@
267.394 11.9971 mo
267.394 14.3042 li
270.36 14.54 li
271.019 15.1982 li
271.019 31.4902 li
271.019 35.1162 271.255 37.894 273.09 40.2959 cv
275.022 42.7446 278.506 44.1563 283.167 44.1563 cv
292.019 44.1563 295.598 40.3428 295.598 31.7266 cv
295.598 15.3867 li
296.257 14.5864 li
299.13 14.3042 li
299.13 11.9971 li
288.441 11.9971 li
288.441 14.3042 li
291.455 14.5864 li
292.162 15.3867 li
292.162 31.2549 li
292.162 37.5176 290.23 40.4375 285.003 40.4375 cv
279.353 40.4375 277.329 37.7529 277.329 31.6792 cv
277.329 15.1982 li
277.988 14.54 li
280.907 14.3042 li
280.907 11.9971 li
267.394 11.9971 li
cp
ef
306.531 43.5918 mo
317.267 43.5918 li
317.267 41.3315 li
314.347 40.9551 li
313.593 40.1074 li
313.593 18.3066 li
329.886 43.5918 li
335.161 43.5918 li
335.161 15.4805 li
335.963 14.5864 li
338.741 14.2095 li
338.741 11.9971 li
328.002 11.9971 li
328.002 14.2095 li
330.875 14.5864 li
331.723 15.4805 li
331.723 35.6338 li
317.313 13.2686 li
317.313 11.9971 li
306.483 11.9971 li
306.483 14.3042 li
309.498 14.54 li
310.157 15.1982 li
310.157 40.1074 li
309.31 40.9551 li
306.531 41.3315 li
306.531 43.5918 li
cp
ef
346.588 43.5918 mo
360.668 43.5918 li
360.668 41.2847 li
357.513 41.0488 li
356.759 40.2959 li
356.759 15.1982 li
357.513 14.54 li
360.668 14.3042 li
360.668 11.9971 li
346.588 11.9971 li
346.588 14.3042 li
349.696 14.54 li
350.449 15.1982 li
350.449 40.2959 li
349.696 41.0488 li
346.588 41.2847 li
346.588 43.5918 li
cp
ef
366.484 11.9971 mo
366.484 14.3042 li
369.594 14.8696 li
380.281 43.6865 li
385.038 43.6865 li
395.49 14.9155 li
398.55 14.3042 li
398.55 11.9971 li
388.239 11.9971 li
388.239 14.3042 li
391.064 14.54 li
391.581 15.2461 li
384.002 36.7173 li
376.186 15.2461 li
376.702 14.54 li
379.433 14.3042 li
379.433 11.9971 li
366.484 11.9971 li
cp
ef
404.384 43.5918 mo
429.668 43.5918 li
429.668 35.1636 li
426.467 35.1636 li
425.667 40.1543 li
425.055 40.9082 li
414.13 40.9082 li
414.13 28.666 li
420.251 28.666 li
420.909 29.3252 li
421.381 32.7148 li
424.159 32.7148 li
424.159 21.791 li
421.381 21.791 li
420.909 25.1812 li
420.251 25.8408 li
414.13 25.8408 li
414.13 14.6338 li
423.501 14.6338 li
424.113 15.2461 li
424.818 19.3896 li
428.115 19.3896 li
428.115 11.9971 li
404.384 11.9971 li
404.384 14.3042 li
407.256 14.54 li
408.009 15.1982 li
408.009 40.2959 li
407.256 41.0488 li
404.384 41.2847 li
404.384 43.5918 li
cp
ef
438.204 11.9971 mo
452.518 11.9971 li
459.817 11.9971 463.583 14.8223 463.583 20.0488 cv
463.583 24.3809 460.804 27.1113 455.484 28.1006 cv
457.743 28.6182 459.346 29.5127 460.428 31.02 cv
461.889 33.0913 462.265 35.6338 463.161 37.9893 cv
464.149 40.5786 465.563 41.2847 468.717 41.2847 cv
469.327 41.2847 li
469.327 43.5444 li
467.681 43.7803 466.079 43.9224 464.62 43.9224 cv
462.595 43.9224 460.853 43.3564 459.724 42.4624 cv
457.275 40.5786 456.851 38.46 456.098 36.2002 cv
454.638 31.7266 453.413 29.7017 448.659 29.7017 cv
447.858 29.7017 li
447.858 40.2959 li
448.61 41.0488 li
451.482 41.2847 li
451.482 43.5918 li
438.204 43.5918 li
438.204 41.2847 li
440.98 41.0488 li
441.735 40.2959 li
441.735 15.1982 li
440.98 14.54 li
438.204 14.3042 li
438.204 11.9971 li
cp
447.858 14.6812 mo
447.858 26.9697 li
448.469 27.0171 449.033 27.0171 449.552 27.0171 cv
454.592 27.0171 456.993 25.0405 456.993 20.707 cv
456.993 16.8472 454.592 14.6812 450.021 14.6812 cv
447.858 14.6812 li
cp
ef
476.769 42.5557 mo
479.688 43.5918 482.841 44.1099 485.855 44.1099 cv
493.579 44.1099 498.332 40.0605 498.332 34.457 cv
498.332 31.6792 496.827 29.1362 494.096 27.3945 cv
491.317 25.605 488.821 24.8994 487.361 24.0034 cv
484.866 22.4961 483.549 21.0845 483.549 18.9189 cv
483.549 16.3291 485.668 14.4453 489.104 14.4453 cv
490.61 14.4453 491.695 14.6812 492.541 15.1045 cv
493.201 15.7642 li
494.002 20.6616 li
497.392 20.6616 li
497.392 13.0332 li
494.427 11.9971 491.46 11.4316 488.54 11.4316 cv
481.806 11.4316 477.428 15.4805 477.428 20.707 cv
477.428 23.0151 478.558 25.3223 480.723 27.1592 cv
482.795 28.9014 485.007 29.7017 486.893 30.6436 cv
490.235 32.3389 491.93 34.0332 491.93 36.5762 cv
491.93 39.1665 489.671 41.0488 485.855 41.0488 cv
484.396 41.0488 483.03 40.8135 481.713 40.3896 cv
481.1 39.6846 li
480.346 34.0332 li
476.769 34.0332 li
476.769 42.5557 li
cp
ef
507.781 43.5918 mo
521.858 43.5918 li
521.858 41.2847 li
518.705 41.0488 li
517.952 40.2959 li
517.952 15.1982 li
518.705 14.54 li
521.858 14.3042 li
521.858 11.9971 li
507.781 11.9971 li
507.781 14.3042 li
510.888 14.54 li
511.642 15.1982 li
511.642 40.2959 li
510.888 41.0488 li
507.781 41.2847 li
507.781 43.5918 li
cp
ef
529.421 11.9971 mo
529.421 20.3315 li
532.669 20.3315 li
533.422 15.293 li
534.175 14.6812 li
539.825 14.6812 li
539.825 40.2959 li
539.025 41.0488 li
535.965 41.2847 li
535.965 43.5918 li
550.043 43.5918 li
550.043 41.2847 li
546.982 41.0488 li
546.184 40.2959 li
546.184 14.6812 li
551.834 14.6812 li
552.538 15.293 li
553.34 20.3315 li
556.589 20.3315 li
556.589 11.9971 li
529.421 11.9971 li
cp
ef
562.182 11.9971 mo
562.182 14.3042 li
565.195 14.7749 li
574.235 31.1616 li
574.235 40.3428 li
573.484 41.0024 li
570.328 41.2373 li
570.328 43.5918 li
584.453 43.5918 li
584.453 41.2373 li
581.253 41.0024 li
580.497 40.3428 li
580.497 30.0313 li
589.443 14.8223 li
592.224 14.3042 li
592.224 11.9971 li
581.959 11.9971 li
581.959 14.2573 li
584.782 14.7749 li
585.16 15.5283 li
578.427 27.0645 li
571.975 15.1045 li
572.399 14.54 li
575.035 14.3042 li
575.035 11.9971 li
562.182 11.9971 li
cp
ef
612.667 27.6299 mo
612.667 22.4961 614.315 18.3535 617.518 15.3867 cv
620.482 12.6563 624.155 11.2905 628.534 11.2905 cv
632.585 11.2905 636.023 12.5146 638.895 14.9639 cv
642.521 18.0703 644.498 22.5913 644.498 27.9126 cv
644.498 32.9038 642.758 37.1411 639.459 40.2017 cv
636.587 42.8853 632.821 44.3452 628.865 44.3452 cv
619.118 44.3452 612.667 37.6597 612.667 27.6299 cv
cp
628.63 14.3042 mo
623.402 14.3042 619.682 19.2944 619.682 27.7236 cv
619.682 36.3872 623.497 41.4731 628.534 41.4731 cv
633.717 41.4731 637.435 36.3872 637.435 28.0532 cv
637.435 19.3418 633.764 14.3042 628.63 14.3042 cv
cp
ef
653.189 43.5918 mo
667.078 43.5918 li
667.078 41.2847 li
663.784 41.0488 li
662.984 40.2959 li
662.984 29.3252 li
669.292 29.3252 li
669.952 29.937 li
670.421 33.374 li
673.2 33.374 li
673.2 22.4033 li
670.421 22.4033 li
669.952 25.8408 li
669.292 26.4526 li
662.984 26.4526 li
662.984 14.7275 li
672.071 14.7275 li
672.683 15.3398 li
673.39 19.9067 li
676.638 19.9067 li
676.638 11.9971 li
653 11.9971 li
653 14.3042 li
656.015 14.54 li
656.768 15.1982 li
656.768 40.2959 li
656.015 41.0488 li
653.189 41.2847 li
653.189 43.5918 li
cp
ef
262.58 223.877 mo
262.58 214.335 li
682.159 214.335 li
682.159 223.877 li
262.58 223.877 li
262.58 223.877 li
cp
f
152.391 151.887 mo
151.332 153.065 149.683 154.477 148.388 155.301 cv
147.092 156.127 146.738 158.247 146.621 160.012 cv
146.504 161.78 149.33 163.309 150.154 163.075 cv
150.979 162.838 150.742 161.19 150.389 159.659 cv
150.036 158.129 151.096 156.833 152.391 156.598 cv
153.687 156.362 153.568 158.01 154.511 160.956 cv
155.453 163.899 157.926 165.311 159.222 165.428 cv
160.516 165.547 161.898 165.208 164.647 165.87 cv
166.825 166.395 168.76 166.959 168.523 168.374 cv
168.288 169.786 169.466 171.788 170.29 171.553 cv
171.114 171.317 172.41 169.434 172.174 168.491 cv
171.938 167.549 168.76 164.25 165.934 162.956 cv
163.107 161.661 161.694 161.543 159.928 159.188 cv
158.161 156.833 159.104 152.831 159.338 149.768 cv
159.574 146.707 158.396 145.73 156.748 145.967 cv
155.1 146.201 154.074 146.887 154.221 148.651 cv
154.339 150.063 153.451 150.709 152.391 151.887 cv
cp
ef
133.98 162.991 mo
131.381 162.426 131.832 163.67 131.945 164.461 cv
132.059 165.252 133.641 166.61 133.98 167.061 cv
134.32 167.514 133.227 170.792 136.053 169.661 cv
136.795 169.364 137.258 170.338 137.938 171.356 cv
138.615 172.375 138.39 173.618 138.276 174.411 cv
138.164 175.2 139.746 175.653 140.764 176.784 cv
142.488 178.7 145.851 179.043 148.111 179.043 cv
150.373 179.043 153.65 178.93 156.138 177.575 cv
158.055 176.53 161.417 175.641 162.436 175.192 cv
163.452 174.739 165.709 175.766 166.543 175.348 cv
167.672 174.784 167.104 173.391 166.538 172.6 cv
165.973 171.809 164.333 171.602 163.541 171.715 cv
162.75 171.829 161.677 171.583 160.32 171.131 cv
158.964 170.68 158.285 170 156.251 170.565 cv
154.216 171.131 149.355 171.131 147.095 170.225 cv
144.832 169.323 143.587 166.727 142.912 165.139 cv
142.215 163.5 140.146 165.313 138.896 165.081 cv
137.938 164.901 136.291 163.493 133.98 162.991 cv
cp
ef
146.796 189.881 mo
146.861 191.198 147.904 193.086 148.376 193.674 cv
148.847 194.262 150.588 196.518 151.852 196.834 cv
152.675 197.04 155.112 196.512 156.287 196.375 cv
158.289 196.139 158.787 193.315 156.432 192.727 cv
154.829 192.325 153.431 191.936 152.957 189.725 cv
152.457 187.393 152.594 186.487 150.271 186.565 cv
148.953 186.61 146.638 186.723 146.796 189.881 cv
cp
ef
158.751 184 mo
159.893 183.543 165.26 183.428 165.947 183.659 cv
166.632 183.887 167.965 185.301 168.439 186.407 cv
168.601 186.786 170.388 189.575 169.703 190.831 cv
169.018 192.086 168.281 193.043 168.439 194.622 cv
168.564 195.885 170.015 196.645 171.756 195.885 cv
173.498 195.125 172.546 193.991 174.742 192.911 cv
175.588 192.495 175.313 187.885 175.313 187.315 cv
175.313 186.743 174.399 184 173.828 183.315 cv
173.256 182.629 171.887 181.831 171.771 181.145 cv
171.657 180.459 171.086 179.204 169.716 179.088 cv
168.345 178.975 162.824 179.678 160.697 180.403 cv
158.572 181.129 157.607 182.629 157.266 183.2 cv
156.922 183.772 157.15 184.686 158.751 184 cv
cp
ef
200.543 146.494 mo
200.19 146.965 199.381 147.755 199.836 148.965 cv
200.19 149.909 201.957 152.145 202.898 153.442 cv
203.84 154.737 204.285 159.895 203.451 162.729 cv
202.961 164.395 204.757 164.95 204.932 166.692 cv
205.119 168.575 203.193 168.639 203.193 169.344 cv
203.193 170.053 204.683 172.834 203.035 174.717 cv
201.93 175.981 202.855 179.895 203.825 179.93 cv
205.375 179.987 207.623 177.823 208.651 176.667 cv
209.593 175.608 213.289 169.194 212.601 167.661 cv
211.672 165.592 210.168 165.745 210.502 163.579 cv
210.664 162.526 211.855 159.903 211.502 159.079 cv
211.148 158.256 210.553 158.153 209.375 156.385 cv
208.197 154.618 207.727 152.499 207.373 151.44 cv
207.02 150.379 205.959 148.85 205.607 148.731 cv
205.254 148.612 205.018 148.378 204.43 147.791 cv
203.84 147.201 202.428 145.553 200.543 146.494 cv
cp
ef
213.937 144.295 mo
212.197 143.123 211.721 140.67 211.25 139.965 cv
210.779 139.258 207.695 134.639 206.635 134.168 cv
205.49 133.658 202.279 129.811 198.863 128.045 cv
195.448 126.278 192.504 126.749 188.5 127.102 cv
184.496 127.455 177.666 131.93 176.49 132.166 cv
175.313 132.4 174.016 130.635 172.604 129.929 cv
171.189 129.221 170.366 129.691 168.834 129.221 cv
167.303 128.75 166.951 128.162 165.184 127.221 cv
163.418 126.278 162.477 126.749 161.063 127.338 cv
159.649 127.927 161.299 129.104 162.946 129.691 cv
164.596 130.281 166.833 130.398 167.893 131.695 cv
168.952 132.99 167.303 133.578 166.127 133.697 cv
164.949 133.814 163.771 132.99 162.946 132.4 cv
162.123 131.813 160.859 133.809 161.33 134.75 cv
161.801 135.691 162.946 135.82 163.89 136.174 cv
164.831 136.527 168.363 135.641 169.188 136.113 cv
170.012 136.584 169.582 138.152 169.229 138.857 cv
168.875 139.564 169.549 141.27 170.492 141.859 cv
171.434 142.447 163.923 141.615 163.653 142.766 cv
163.07 145.246 165.594 145.32 167.186 145.119 cv
169.229 144.859 168.343 144.984 174.252 144.648 cv
182.495 144.178 187.559 147.828 189.914 149.239 cv
192.269 150.651 194.555 156.069 194.789 159.956 cv
195.025 163.84 192.906 165.372 192.553 168.551 cv
192.199 171.731 194.364 179.715 194.835 181.245 cv
195.307 182.776 197.786 181.903 197.668 181.079 cv
197.551 180.254 197.86 179.608 198.685 178.547 cv
199.509 177.489 199.904 177.374 199.199 175.723 cv
198.492 174.075 197.915 172.249 197.915 169.305 cv
197.915 166.362 198.77 166.506 199.713 161.088 cv
200.654 155.672 197.803 150.063 196.508 146.768 cv
195.213 143.471 188.264 140.762 186.97 139.938 cv
185.674 139.113 184.379 137.818 183.908 137.111 cv
183.437 136.406 182.26 136.758 181.199 135.816 cv
180.14 134.875 182.557 133.883 183.288 133.486 cv
184.833 132.65 186.711 130.884 187.205 131.223 cv
188.66 132.223 186.922 133.961 187.711 134.436 cv
188.689 135.02 190.428 133.076 191.188 133.645 cv
192.13 134.35 194.2 135.717 191.819 136.33 cv
189.567 136.912 192.094 138.164 193.151 138.045 cv
193.749 137.979 196.242 136.172 197.349 137.119 cv
198.147 137.805 196.365 139.664 198.139 140.121 cv
198.859 140.309 199.805 140.645 201.454 140.762 cv
203.103 140.879 202.867 142.41 203.456 142.41 cv
204.045 142.41 206.399 142.176 208.283 142.883 cv
210.168 143.588 213.102 146.398 214.055 147.474 cv
215.516 149.124 217.297 147.107 217.886 146.283 cv
218.475 145.459 217.587 143.822 216.998 143.941 cv
216.409 144.059 214.941 144.973 213.937 144.295 cv
cp
ef
161.887 100.645 mo
160.944 101.822 161.875 104.65 162.699 104.415 cv
164.076 104.021 165.399 103.188 165.753 102.836 cv
166.105 102.481 167.492 101.113 169.965 101.467 cv
172.438 101.818 176.137 103.942 176.725 104.296 cv
177.313 104.648 178.906 105.758 178.812 107.574 cv
178.719 109.391 176.812 109.471 175.429 110.303 cv
174.355 110.949 173.545 111.717 172.25 111.6 cv
170.954 111.481 168.6 110.303 167.303 110.775 cv
166.008 111.246 164.831 112.424 166.008 113.366 cv
167.186 114.309 168.881 113.856 170.177 113.738 cv
171.472 113.621 171.059 116.531 169.387 116.74 cv
167.502 116.977 166.992 119.611 168.281 119.427 cv
170.753 119.073 171.105 120.775 170.281 121.48 cv
169.457 122.188 167.488 122.59 167.017 123.062 cv
166.546 123.532 167.893 124.799 169.07 124.799 cv
170.248 124.799 172.346 123.501 172.862 123.219 cv
174.385 122.386 175.621 122.707 176.96 123.848 cv
178.075 124.799 180.609 121.963 183.437 121.492 cv
186.264 121.021 188.484 120.141 189.335 120.246 cv
190.599 120.404 190.628 122.961 191.335 123.08 cv
192.041 123.198 195.095 123.141 196.861 123.377 cv
198.627 123.613 201.412 125.246 202.835 124.746 cv
204.92 124.016 203.103 122.199 202.867 121.492 cv
202.631 120.785 202.631 119.961 202.279 119.137 cv
201.925 118.313 200.629 117.371 200.512 116.193 cv
200.394 115.016 201.571 111.481 198.51 110.539 cv
195.448 109.595 193.99 109.756 193.873 109.049 cv
193.756 108.342 194.035 106.65 193.329 106.532 cv
192.623 106.414 184.724 105.869 183.762 105.574 cv
181.833 104.98 178.845 100.291 175.664 99.4668 cv
172.485 98.6436 170.158 97.6333 167.539 99.1143 cv
164.831 100.645 163.301 100.764 161.887 100.645 cv
cp
ef
131.945 107.711 mo
132.578 106.975 130.701 106.213 129.102 107.711 cv
127.417 109.291 128.682 112.285 130.049 112.839 cv
131.447 113.404 133.821 114.201 136.264 113.339 cv
138.055 112.707 139.424 111.791 139.424 109.576 cv
139.424 108.625 138.055 107.953 136.879 107.588 cv
135.668 107.21 135.465 108.059 135.701 108.529 cv
135.937 109.001 137.086 109.648 135.818 111.066 cv
134.578 112.453 132.278 111.916 131.462 111.066 cv
130.366 109.924 131.602 108.113 131.945 107.711 cv
cp
ef
91.1895 107.85 mo
89.541 109.498 90.1045 111.257 91.3994 112.316 cv
92.4312 113.161 96.6826 113.732 98.772 112.949 cv
100.457 112.316 101.788 110.088 101.67 108.791 cv
101.584 107.854 100.846 107.025 99.6685 106.555 cv
98.4907 106.082 98.2549 107.496 98.7266 108.438 cv
99.1978 109.381 99.6685 111.503 96.6064 111.738 cv
93.5444 111.975 93.687 109.544 94.1338 108.203 cv
94.8403 106.082 93.6626 105.848 91.1895 107.85 cv
cp
ef
120.125 146.369 mo
118.512 144.916 119.301 139.891 117.182 139.773 cv
116.213 139.721 114.826 140.717 114.121 141.188 cv
113.414 141.658 112.707 140.951 110.588 141.188 cv
108.469 141.424 109.642 143.518 110.234 145.074 cv
111.178 147.546 113.648 146.369 114.355 146.605 cv
115.063 146.84 115.18 147.664 116.121 147.664 cv
117.063 147.664 117.771 147.193 118.948 148.606 cv
120.538 150.514 122.48 148.487 120.125 146.369 cv
cp
ef
80.5518 99.4648 mo
78.0786 101.467 76.8975 102.375 77.3154 104.467 cv
77.7861 106.821 81.3193 107.528 82.4966 107.528 cv
83.6743 107.528 85.2051 104.938 85.9121 103.406 cv
86.5439 102.037 87.4834 100.307 86.6602 99.4648 cv
85.6235 98.4063 82.6719 97.3457 80.5518 99.4648 cv
cp
ef
91.2944 114.949 mo
89.7144 114.74 89.2568 114.498 87.6079 113.791 cv
85.9595 113.085 85.5327 115.216 86.2388 115.688 cv
86.9458 116.158 89.188 116.74 92.5581 117.057 cv
94.562 117.245 97.6035 117.113 98.5615 116.952 cv
99.4902 116.796 101.193 116.319 101.316 118.334 cv
101.461 120.697 98.8999 119.75 97.9297 119.764 cv
96.6807 119.781 93.4941 119.609 91.6104 119.374 cv
89.7261 119.139 85.0806 118.109 83.396 116.952 cv
82.2632 116.174 81.2983 114.683 79.6494 114.212 cv
78.001 113.74 76.6235 116.784 77.9185 117.373 cv
78.6924 117.725 80.2363 118.637 78.8667 120.006 cv
76.9678 121.904 78.2656 124.777 78.9722 125.483 cv
79.6792 126.189 81.8462 129.305 82.5532 130.012 cv
83.2593 130.717 85.0664 130.346 85.7725 130.816 cv
86.1489 131.066 88.3691 132.629 89.3057 133.877 cv
90.0117 134.82 91.4248 133.406 92.603 132.465 cv
93.7803 131.523 94.958 133.406 94.4868 134.35 cv
94.0156 135.291 93.7803 135.291 92.8384 137.41 cv
91.896 139.531 89.7764 139.295 88.3638 139.295 cv
86.9507 139.295 87.186 140.707 87.186 140.707 cv
87.186 140.707 88.1274 142.121 88.1274 142.826 cv
88.1274 143.533 86.4795 144.242 84.8306 144.242 cv
83.1821 144.242 81.5332 143.77 80.356 143.533 cv
79.1782 143.299 79.5313 144.947 80.5913 145.889 cv
81.54 146.732 82.7109 149.067 84.8306 149.657 cv
85.6489 149.883 87.5015 149.588 88.1274 149.184 cv
89.4507 148.335 91.6626 147.23 91.6606 145.889 cv
91.6587 144.547 90.7363 143.342 92.7686 142.123 cv
94.3481 141.176 95.5464 143.064 96.4888 143.77 cv
97.4307 144.477 99.1978 143.652 100.611 142.475 cv
102.023 141.297 101.766 138.014 101.435 136.469 cv
101.081 134.82 99.5449 135.219 98.2549 134.113 cv
96.6064 132.701 99.0801 130.816 99.0801 130.816 cv
99.0801 130.816 103.437 128.343 103.201 126.105 cv
102.955 123.766 103.512 121.164 104.143 119.865 cv
104.559 119.012 102.637 118.861 103.932 116.74 cv
105.037 114.932 107.911 113.152 108.146 111.268 cv
108.383 109.381 106.895 108.572 105.48 108.102 cv
104.067 107.63 103.821 109.677 103.512 111.474 cv
103.18 113.388 101.299 114.424 99.5088 114.845 cv
98.1758 115.158 92.874 115.16 91.2944 114.949 cv
cp
ef
106.671 175.665 mo
105.723 176.602 104.645 176.926 103.669 177.403 cv
102.511 177.967 103.333 181.53 104.934 181.352 cv
105.869 181.249 107.618 182.299 108.408 183.563 cv
109.168 184.778 110.505 186.37 111.094 186.723 cv
112.397 187.504 113.621 188.62 116.148 189.409 cv
118.925 190.276 124.828 190.264 126.83 190.147 cv
128.833 190.03 127.279 188.262 126.102 188.145 cv
124.924 188.028 118.477 187.002 116.945 186.297 cv
115.416 185.59 114.2 184.006 113.848 183.182 cv
113.494 182.356 111.798 182.168 111.091 180.991 cv
110.385 179.813 109.75 177.434 109.514 176.139 cv
109.278 174.844 107.419 174.924 106.671 175.665 cv
cp
ef
163.002 148.913 mo
161.619 151.217 162.646 151.122 164.488 152.579 cv
166.344 154.045 165.757 156.266 165.872 157.879 cv
165.986 159.493 168.08 160.053 169.002 160.745 cv
169.924 161.436 170.682 162.836 171.835 163.413 cv
172.988 163.987 174.217 163.86 175.484 165.243 cv
176.752 166.625 176.268 168.405 177.168 170.079 cv
178.334 172.245 180.168 171.579 180.621 173.204 cv
180.887 174.159 180.16 175.508 180.045 176.43 cv
179.93 177.352 180.875 181.374 180.875 184.37 cv
180.875 187.368 178.547 190.028 178.316 191.756 cv
178.086 193.485 178.777 193.254 179.584 194.866 cv
180.391 196.481 175.963 196.836 175.502 197.413 cv
175.041 197.989 172.585 200.579 172.002 200.913 cv
170.896 201.543 167.893 205.26 167.735 206.84 cv
167.419 209.999 154.149 210.473 154.623 217.899 cv
154.77 220.18 151.306 219.479 146.725 221.532 cv
143.619 222.924 137.15 219.952 135.191 219.952 cv
133.233 219.952 118.446 221.215 116.551 221.057 cv
115.041 220.932 112.619 218.584 111.785 218.129 cv
109.951 217.129 108.664 216.204 105.668 215.629 cv
102.672 215.053 101.131 214.588 100.9 213.897 cv
100.67 213.206 101.577 212.036 101.808 211.114 cv
102.038 210.192 101.346 208.924 100.771 208.348 cv
100.194 207.772 99.873 204.817 99.873 203.754 cv
99.873 202.084 101.344 199.35 102.247 197.465 cv
103.15 195.581 104.215 195.448 105.136 194.641 cv
106.058 193.834 109.049 193.09 108.73 191.817 cv
108.5 190.893 107.464 189.583 106.196 188.776 cv
104.816 187.897 102.426 189.075 100.351 189.881 cv
98.2773 190.688 95.125 193.584 94.6646 194.622 cv
94.2036 195.659 93.3428 198.393 92.5015 200.245 cv
91.6685 202.079 92.5015 204.913 93.668 208.245 cv
94.0269 209.27 94.3174 211.114 94.6631 212.497 cv
95.0088 213.877 96.3916 214.801 97.3135 215.723 cv
98.2354 216.643 98.2197 217.938 98.335 218.745 cv
98.4502 219.551 97.4648 223.915 98.5015 225.413 cv
99.5386 226.911 103.629 227.002 103.168 226.079 cv
102.793 225.331 103.803 219.961 106.335 219.961 cv
111.502 219.961 111.623 225.124 113.835 225.913 cv
114.32 226.086 135.418 226.204 135.418 226.204 cv
135.418 226.204 162.154 217.297 166.418 215.454 cv
170.682 213.61 175.367 209.846 174.793 208.954 cv
172.897 206.004 174.58 202.719 175.502 201.913 cv
176.766 200.807 182.015 197.758 182.668 197.245 cv
184.879 195.508 186.502 193.413 186.91 192.331 cv
187.318 191.247 187.389 189.375 187.809 188.479 cv
188.186 187.67 191.62 187.692 191.274 189.303 cv
190.959 190.774 193.17 191.833 194.275 192.622 cv
195.166 193.258 197.247 190.239 197.593 189.778 cv
199.015 187.883 197.26 184.95 193.457 185.526 cv
190.6 185.958 192.031 182.481 191.916 181.674 cv
191.801 180.868 189.449 180.563 189.22 178.85 cv
189.142 178.268 188.371 176.577 187.68 175.77 cv
186.988 174.963 185.369 174.252 185.369 173.331 cv
185.369 172.516 186.551 172.288 186.781 171.02 cv
187.012 169.752 186.369 167.922 186.139 166.657 cv
185.909 165.385 185.129 160.299 186.396 159.723 cv
187.664 159.147 187.989 160.766 188.45 162.034 cv
188.91 163.301 190.787 163.61 191.018 162.803 cv
191.248 161.997 191.223 159.641 190.761 157.797 cv
190.3 155.954 186.729 153.846 185.691 153.5 cv
184.653 153.155 184.424 152.924 183.387 152.233 cv
182.35 151.542 175.411 151.788 172.835 151.245 cv
169.668 150.579 167.102 149.268 165.835 148.579 cv
164.567 147.886 164.615 147.759 163.002 148.913 cv
cp
ef
85.6592 204.891 mo
83.2173 203.838 79.7305 205.981 79.2676 206.999 cv
78.478 208.735 80.5317 210.631 82.9014 211.42 cv
84.7505 212.038 87.4824 212.211 88.4312 210.473 cv
89.4678 208.571 87.3521 205.62 85.6592 204.891 cv
cp
ef
52.5078 201.374 mo
52.5698 198.942 49.3403 197.506 47.8306 196.731 cv
42.6172 194.043 45.0591 191.827 43.0913 190.252 cv
41.3247 188.838 40.0063 195.004 40.4771 195.829 cv
40.9482 196.653 40.9531 199.131 42.2485 199.836 cv
43.5439 200.543 45.5151 202.631 46.4619 203.417 cv
47.1802 204.014 51.2563 206.383 51.7271 207.208 cv
51.7271 207.208 52.4458 203.807 52.5078 201.374 cv
cp
ef
59.0376 210.401 mo
59.7896 210.852 65.771 214.311 67.4194 215.37 cv
69.0679 216.43 80.9834 222.983 84.8701 223.69 cv
88.7554 224.397 86.3477 218.963 84.165 217.424 cv
81.5977 215.627 78.6094 215.002 74.3701 213.002 cv
70.1313 211 65.4351 209.149 64.3857 208.768 cv
60.9106 207.504 59.0376 210.401 59.0376 210.401 cv
cp
ef
31.9478 179.139 mo
31.5938 181.731 36.6987 180.563 38.583 180.563 cv
40.4668 180.563 42.0034 182.479 44.2407 183.655 cv
46.478 184.834 47.4199 185.893 48.48 187.307 cv
49.54 188.721 56.4053 193.106 57.665 193.667 cv
60.8447 195.079 60.3735 193.311 58.6074 191.192 cv
56.4722 188.631 51.3296 180.95 49.7988 179.772 cv
48.8062 179.008 47.3745 173.924 44.9014 173.454 cv
42.4292 172.981 43.6377 174.084 40.0044 172.821 cv
36.3711 171.557 34.521 171.639 34.4751 172.979 cv
34.4248 174.454 35.8164 175.407 34.7021 175.883 cv
33.3691 176.456 32.5361 177.02 31.9478 179.139 cv
cp
ef
29.1035 174.717 mo
31.2236 172.479 32.0527 168.262 33.937 165.319 cv
35.8213 162.374 36.7632 161.432 38.0586 160.725 cv
39.354 160.018 39.707 159.194 39.1182 157.899 cv
38.6694 156.911 39.1182 156.604 41.2378 155.426 cv
43.3574 154.249 44.6689 153.85 45.3755 151.495 cv
45.8472 149.924 49.2568 143.971 47.9033 143.439 cv
46.5493 142.906 45.1401 141.93 45.3755 140.754 cv
45.6108 139.576 47.5967 139.531 48.6572 138.941 cv
49.7168 138.354 49.3633 137.645 48.3037 136.939 cv
47.2437 136.234 44.4175 136.115 43.0049 136.352 cv
41.5918 136.586 40.8853 138.354 39.5894 139.531 cv
38.2944 140.707 37.3052 139.867 35.7036 142.004 cv
34.29 143.887 33.5835 148.95 32.8774 150.715 cv
32.1704 152.481 31.8174 152.01 31.1104 153.188 cv
30.4043 154.366 32.5239 154.129 33.1128 155.426 cv
33.7017 156.721 33.7046 157.708 32.5239 157.782 cv
28.6299 158.024 30.9717 159.616 30.7363 161.5 cv
30.5234 163.2 26.835 170.465 26.2598 172.19 cv
25.7896 173.602 27.4556 175.071 29.1035 174.717 cv
cp
ef
20.1318 161.079 mo
21.2407 161.668 20.0137 164.758 21.3628 166.028 cv
22.3457 166.954 24.0342 164.606 24.3643 162.395 cv
24.7744 159.651 23.3789 155.235 24.7339 153.233 cv
26.0884 151.231 27.2549 149.981 27.3774 147.863 cv
27.501 145.742 29.0361 144.102 30.022 142.807 cv
31.0073 141.512 33.6606 139.363 34.1533 138.068 cv
34.6455 136.771 33.73 135.701 32.0049 136.172 cv
30.2803 136.643 26.8818 139.49 24.9287 140.963 cv
23.9331 141.717 19.2559 147.341 18.7847 148.176 cv
17.6274 150.231 20.1211 150.922 18.6577 153.497 cv
18.1152 154.45 18.313 155.834 17.8145 156.657 cv
16.46 158.895 17.915 160.727 20.1318 161.079 cv
cp
ef
41.9766 133.408 mo
42.8813 132.842 43.187 132.539 44.5439 132.768 cv
45.9004 132.992 52.7461 134.729 57.3813 134.049 cv
62.0161 133.371 67.1167 131.026 67.9082 129.557 cv
68.6987 128.086 70.1636 126.639 70.8418 125.848 cv
71.5205 125.057 71.2539 122.49 70.3496 122.15 cv
69.4448 121.811 67.2896 120.773 66.1592 121.904 cv
65.0283 123.034 63.9517 123.004 62.708 122.891 cv
61.4648 122.777 58.6699 123.042 55.7124 123.78 cv
53.3501 124.371 47.2397 126.732 45.186 127.888 cv
43.1641 129.024 41.2427 131.189 40.5645 131.867 cv
39.8857 132.545 41.0718 133.973 41.9766 133.408 cv
cp
ef
45.9351 27.2217 mo
38.8984 33.1675 li
38.8984 33.1675 43.5127 31.5396 44.3555 33.4355 cv
45.6016 36.2393 47.7251 37.6479 50.042 36.5425 cv
52.0728 35.5732 53.8535 36.1694 54.8872 38.2798 cv
56.0708 40.6997 57.1924 41.8267 56.9326 44.1631 cv
56.4614 48.4028 52.8115 61.2383 55.2842 70.3062 cv
56.5313 74.8804 55.9902 76.9004 61.0542 83.1411 cv
63.7305 86.4399 69.1797 90.7964 69.8857 91.7388 cv
70.5928 92.6797 70.8281 94.3286 71.7705 93.8569 cv
72.7124 93.3862 71.6528 89.3828 69.7686 87.2627 cv
67.8843 85.1436 59.0522 79.2559 58.1099 71.0127 cv
57.1685 62.769 58.3457 57.5879 59.2881 55.4683 cv
60.2295 53.3491 60.436 49.353 60.436 48.1753 cv
60.436 48.1753 60.4185 45.5332 62.0156 45.8579 cv
63.2393 46.1074 63.7012 50.5283 63.7012 52.1772 cv
63.7012 53.8252 63.998 56.8818 63.998 56.8818 cv
63.998 56.8818 65.4111 60.1787 65.4111 61.1206 cv
65.4111 62.0625 63.998 65.3599 64.4688 66.7734 cv
64.9399 68.1865 66.8242 69.3638 67.5308 70.5415 cv
68.2373 71.7188 67.0596 73.6035 68.002 74.7808 cv
68.9443 75.958 71.7705 80.1973 73.4189 80.6685 cv
75.0674 81.1401 80.1367 82.9238 81.0786 81.9819 cv
82.0205 81.0396 84.1367 78.3428 80.604 77.4009 cv
77.0713 76.4585 71.5347 74.3091 70.1216 69.3638 cv
68.7085 64.418 69.1118 54.1782 62.7529 41.2241 cv
56.394 28.271 52.252 29.6509 50.042 28.8013 cv
47.9888 28.0112 45.9351 27.2217 45.9351 27.2217 cv
cp
ef
127.473 36.7388 mo
123.107 49.0625 122.594 49.4468 122.851 53.2988 cv
123.107 57.1499 125.547 57.4067 127.087 55.0962 cv
128.628 52.7852 129.328 50.9375 131.323 50.7314 cv
132.687 50.5903 132.943 52.6445 132.687 55.2119 cv
132.43 57.7788 134.404 55.9946 135.689 54.1973 cv
136.972 52.4004 137.578 46.6606 137.835 43.5796 cv
138.092 40.499 138.667 38.1226 138.825 35.5942 cv
138.983 33.0664 139.477 29.9072 138.193 29.9072 cv
136.91 29.9072 135.824 30.3813 135.824 29.2754 cv
135.824 27.5527 140.201 23.769 141.669 22.6401 cv
143.723 21.0605 142.148 17.856 139.615 19.3228 cv
136.613 21.0605 131.837 24.4146 127.473 36.7388 cv
cp
ef
9.51465 141.543 mo
9.46191 142.648 12.981 143.961 12.0425 145.492 cv
10.0742 148.706 14.9717 149.969 14.0234 151.864 cv
13.0757 153.758 12.4512 155.958 11.3379 155.34 cv
9.91602 154.549 5.88135 141.227 5.24951 138.068 cv
4.92773 136.459 3.82764 126.693 3.98535 124.483 cv
4.14355 122.271 6.59229 121.512 6.8291 121.322 cv
7.61914 120.691 14.2822 117.956 15.2021 117.531 cv
16.7329 116.824 21.208 112.785 21.6792 111.843 cv
22.1504 110.9 22.3442 108.467 22.4688 106.469 cv
22.5737 104.783 22.8901 102.993 21.8369 102.678 cv
20.5962 102.305 19.2285 103.079 18.9932 104.257 cv
18.7573 105.434 18.0273 108.119 16.9399 107.891 cv
14.9385 107.469 13.938 111.242 13.938 112.316 cv
13.938 114.634 9.56787 115.004 9.67285 113.107 cv
9.73535 111.979 11.7266 105.521 11.7793 103.15 cv
11.8184 101.393 9.93213 99.7891 10.8311 97.9907 cv
11.5513 96.5508 11.9028 91.1538 12.1279 90.2544 cv
13.0757 88.5166 17.3408 87.2529 15.2871 92.7822 cv
14.6797 94.418 13.8535 96.5244 15.6758 97.2534 cv
16.729 97.6748 17.4048 97.6333 19.0786 94.0459 cv
20.1846 91.6763 24.2925 92.7822 22.3965 96.7314 cv
20.7661 100.129 24.541 99.6387 25.3652 99.9922 cv
26.1895 100.346 26.3379 101.969 26.208 103.046 cv
26.0244 104.563 27.7642 104.896 29.0513 104.625 cv
30.3384 104.354 35.7725 101.471 39.0234 102.08 cv
42.792 102.787 44.3853 103.363 45.5635 103.836 cv
46.7407 104.307 48.625 104.307 48.1538 102.658 cv
47.6826 101.008 49.4585 98.0093 49.6938 96.8325 cv
49.9287 95.6543 52.2178 94.418 51.8003 93.146 cv
51.3818 91.873 47.3296 90.293 46.3872 90.1753 cv
45.3101 90.0405 44.3853 93.7075 44.1504 95.8271 cv
43.9141 97.9473 40.6333 97.9702 39.9321 96.0996 cv
38.9839 93.5723 37.562 93.4141 36.9302 90.0962 cv
36.4961 87.8179 34.4028 87.7266 32.8228 86.4629 cv
30.0098 84.2119 32.3076 82.5146 32.1909 81.5659 cv
31.853 78.8115 29.0107 78.4595 28.0522 79.5767 cv
27.0571 80.7373 25.4243 79.4136 24.3643 79.2969 cv
22.7944 79.1221 18.8662 79.7612 17.1831 79.9863 cv
14.8135 80.3018 14.5063 81.4668 14.168 82.4131 cv
13.3784 84.6245 8.83496 81.5796 8.83496 81.5796 cv
8.83496 81.5796 14.7207 69.0952 15.9194 65.6099 cv
16.9487 62.6147 21.9556 55.1299 22.2383 54.3936 cv
23.0283 52.3398 25.8721 55.4995 23.1865 59.291 cv
21.4878 61.689 16.7153 69.7031 15.2871 73.9829 cv
14.418 76.5879 18.7285 76.2637 19.5527 74.6147 cv
20.0894 73.5405 24.146 65.4316 26.0298 62.1343 cv
27.9141 58.8369 32.3149 51.2222 33.1387 49.3384 cv
33.9507 47.4819 35.8301 45.6934 36.7725 43.8091 cv
37.7139 41.9248 40.7915 41.7632 39.6157 45.7051 cv
38.4214 49.7114 32.6558 58.8687 31.2427 60.8706 cv
29.8984 62.7754 25.6333 70.2778 25.3984 71.4551 cv
25.1626 72.6333 24.8491 74.3789 25.5557 74.6147 cv
26.2627 74.8496 29.5107 73.6587 30.4531 72.2451 cv
31.395 70.832 34.8477 61.7295 36.0249 60.0806 cv
37.2026 58.4321 39.7827 53.04 41.1953 51.3921 cv
42.6089 49.7432 45.8638 52.0151 44.3555 54.5518 cv
40.8794 60.397 37.2739 67.6265 35.8242 69.5596 cv
34.1309 71.8174 35.9858 75.0859 38.668 72.4033 cv
41.0234 70.0479 42.0723 67.2559 43.2495 65.1362 cv
44.4268 63.0166 46.1763 60.1523 46.8828 58.9746 cv
47.5894 57.7969 50.4805 58.8242 50.0093 60.7085 cv
49.5381 62.5918 47.1899 66.7251 45.7769 68.1372 cv
44.3638 69.5508 43.5537 71.3013 42.8481 72.7148 cv
42.1411 74.1274 42.8481 75.3472 44.3228 76.2949 cv
46.1914 77.4966 47.1221 77.4097 48.5347 78.8228 cv
49.9482 80.2358 51.334 81.9072 52.748 82.6143 cv
54.1606 83.3208 56.1616 83.8159 57.1035 85.7007 cv
58.0454 87.5845 59.4585 90.9995 61.9316 91.9419 cv
63.9395 92.7065 64.5225 93.4722 65.8179 95.1211 cv
67.6694 97.479 68.4111 98.0444 70.0571 97.9473 cv
72.0586 97.8291 71.9414 100.303 72.2944 102.187 cv
72.5156 103.367 70.5278 106.896 70.5278 108.781 cv
70.5278 110.668 70.9429 115.967 69.3501 116.793 cv
68.2295 117.373 65.7402 115.969 64.7539 116.846 cv
63.8062 117.689 61.481 117.255 60.8569 116.319 cv
60.0146 115.056 58.3291 114.949 57.5923 115.582 cv
56.3281 116.666 54.707 116.383 53.8008 115.478 cv
53.1689 114.845 51.4834 115.371 50.4492 115.82 cv
47.4609 117.117 47.9185 114.437 47.9185 114.437 cv
47.9185 114.437 48.7471 112.097 49.8076 112.097 cv
50.6567 112.097 51.9219 112.787 52.6289 112.553 cv
53.2988 112.328 54.1855 110.346 55.1699 109.576 cv
56.1689 108.795 57.4634 108.512 56.855 106.942 cv
56.4907 106.002 57.4131 105.178 58.1191 104.941 cv
59.4785 104.488 61.1733 104.625 61.8052 103.889 cv
62.2896 103.323 62.1895 100.668 60.541 99.2544 cv
58.8921 97.8413 54.4756 99.0737 54.0117 102.414 cv
53.4229 106.653 49.4902 108.362 46.9834 109.014 cv
43.8037 109.837 42.7368 109.016 40.146 107.604 cv
37.5557 106.19 32.0796 106.141 29.9092 106.959 cv
27.9976 107.68 26.8398 110.631 28.5249 110.631 cv
30.2095 110.631 34.2456 111.369 36.0547 111.369 cv
38.6455 111.369 40.7939 112.316 41.7744 114.361 cv
42.8955 116.7 42.8228 116.693 39.5371 116.245 cv
32.7368 115.318 26.0791 116.629 22.311 117.689 cv
20.9458 118.073 16.2236 122.234 15.5181 122.588 cv
15.0093 122.842 11.5889 124.723 9.19873 126.535 cv
6.80859 128.35 7.1958 130.41 7.61914 132.695 cv
7.72607 133.275 8.39502 137.127 8.56689 137.752 cv
8.56689 137.752 10.6733 135.434 11.2524 134.75 cv
11.8315 134.066 16.1499 131.59 18.3613 128.905 cv
20.3701 126.466 26.2173 123.107 28.02 122.26 cv
33.1577 119.845 39.0049 120.087 40.3838 120.596 cv
41.7622 121.104 44.5698 123.115 42.8154 124.895 cv
41.0615 126.672 38.0537 128.959 36.8008 129.723 cv
35.5474 130.484 34.2769 129.551 33.3994 130.44 cv
32.5225 131.33 30.1406 133.377 29.1035 133.328 cv
25.7866 133.172 21.6265 134.174 20.415 134.436 cv
18.2031 134.908 14.0962 136.383 12.5166 137.488 cv
10.9365 138.594 9.56787 140.438 9.51465 141.543 cv
cp
ef
134.76 205.067 mo
133.582 205.186 131.228 205.303 131.228 205.303 cv
131.228 205.303 130.875 205.774 130.168 206.364 cv
129.461 206.952 128.166 207.305 127.225 207.422 cv
126.281 207.54 125.473 207.788 124.648 208.377 cv
123.824 208.965 124.594 209.661 125.418 209.661 cv
126.242 209.661 127.686 209.276 128.628 209.276 cv
129.57 209.276 131.634 209.522 132.223 209.405 cv
132.811 209.286 133.612 208.762 134.789 208.762 cv
135.968 208.762 136.672 208.708 137.613 208.12 cv
138.557 207.53 140.031 207.286 141.208 206.579 cv
142.387 205.872 144.182 206.127 144.888 205.774 cv
145.594 205.422 145.594 204.95 145.123 204.245 cv
144.652 203.538 143.945 201.418 143.71 200.592 cv
143.475 199.768 142.414 199.534 142.062 200.592 cv
141.708 201.653 138.764 204.008 136.998 204.715 cv
135.231 205.422 135.938 204.95 134.76 205.067 cv
cp
162.277 195.254 mo
162.043 193.506 165.438 193.965 165.438 194.78 cv
165.438 195.596 165.088 198.104 165.438 198.571 cv
165.787 199.038 166.58 199.93 166.697 200.514 cv
166.813 201.098 166.56 201.143 165.595 201.573 cv
164.174 202.206 162.91 202.047 161.961 202.995 cv
161.07 203.887 160.285 205.528 159.119 206.11 cv
157.953 206.694 155.013 207.665 153.147 208.249 cv
151.281 208.831 149.226 210.104 148.525 210.688 cv
147.826 211.27 146.563 210.932 144.932 210.815 cv
143.299 210.7 141.801 210.782 140.054 211.715 cv
138.305 212.647 133.759 212.833 129.911 212.485 cv
126.064 212.135 121.075 212.893 118.743 213.127 cv
116.411 213.36 113.853 213.661 112.453 212.614 cv
111.055 211.563 111.649 210.254 112.582 209.79 cv
113.514 209.323 115.067 209.368 115.534 209.018 cv
116 208.668 120.051 206.43 121.361 205.838 cv
121.963 205.567 124.709 204.288 125.943 203.942 cv
126.819 203.698 128.343 202.614 129.741 202.379 cv
131.141 202.147 132.262 201.729 132.814 201.176 cv
133.2 200.79 133.315 199.868 131.916 199.635 cv
130.518 199.401 129.383 199.075 128.451 198.608 cv
127.518 198.141 126.174 197.407 125.24 198.221 cv
124.309 199.04 123.75 199.776 121.814 200.282 cv
120.048 200.743 118.316 201.563 116.918 201.795 cv
115.519 202.03 112.604 203.545 111.206 203.895 cv
109.807 204.245 107.197 205.315 105.564 204.733 cv
103.933 204.149 105.141 202.149 105.723 201.1 cv
106.306 200.049 107.999 196.594 109.514 196.36 cv
111.029 196.127 111.905 196.551 112.838 196.551 cv
113.77 196.551 117.15 195.151 118.549 194.219 cv
119.948 193.286 124.729 192.239 127.293 192.936 cv
129.857 193.635 133.18 195.434 133.842 196.168 cv
134.997 197.452 134.719 199.284 135.768 199.635 cv
136.816 199.983 137.785 199.815 138.368 199.231 cv
138.951 198.649 140.932 198.649 140.932 197.25 cv
140.932 195.85 139.768 195.151 138.602 195.036 cv
137.436 194.918 135.804 194.686 135.453 194.104 cv
135.104 193.52 134.172 191.887 133.471 191.305 cv
132.772 190.721 131.606 188.741 132.656 188.741 cv
133.705 188.741 136.152 189.09 136.853 190.139 cv
137.551 191.188 138.951 192.239 139.768 192.122 cv
140.584 192.002 141.049 191.655 141.633 191.42 cv
142.215 191.188 143.381 192.002 144.08 193.17 cv
144.779 194.336 144.663 194.569 145.131 195.036 cv
145.596 195.502 147.345 197.25 147.578 198.534 cv
147.811 199.815 148.07 203.278 148.654 203.627 cv
149.238 203.975 151.113 203.668 152.248 203.499 cv
154.58 203.149 156.088 201.795 157.486 201.098 cv
158.887 200.399 159.66 200.463 160.593 199.647 cv
161.525 198.831 162.447 196.532 162.277 195.254 cv
cp
ef
109.83 161.604 mo
108.781 163.395 115.315 167.03 116.728 167.03 cv
118.142 167.03 119.392 164.163 119.273 163.223 cv
119.156 162.28 116.823 161.311 115.78 160.709 cv
114.043 159.709 111.621 158.551 109.83 161.604 cv
cp
79.9336 200.571 mo
79.4028 201.336 76.3257 202.448 73.5562 203.37 cv
70.7871 204.293 66.584 204.344 65.084 203.883 cv
63.583 203.422 64.2388 202.534 64.8159 201.495 cv
65.3877 200.467 68.2783 200.34 70.1245 199.764 cv
71.9707 199.186 73.4712 198.495 73.4712 197.34 cv
73.4712 196.186 71.8555 195.034 70.4707 194.11 cv
69.0854 193.186 68.9702 192.264 68.5088 191.225 cv
68.0474 190.186 66.8936 189.956 65.7388 189.493 cv
64.585 189.032 63.8926 188.686 63.4312 187.762 cv
62.9697 186.838 63.3159 186.147 62.7388 185.569 cv
62.1616 184.993 61.0469 183.28 60.8569 182.143 cv
60.6992 181.194 61.123 177.145 60.5459 175.991 cv
59.9692 174.838 58.585 175.069 57.5454 175.53 cv
56.5068 175.991 55.5835 176.106 54.6602 175.299 cv
53.7368 174.491 52.5835 169.76 51.7754 167.567 cv
50.9678 165.374 48.7354 158.106 48.8511 157.18 cv
48.9663 156.258 49.4453 153.469 49.9565 151.811 cv
50.4888 150.083 50.6211 149.217 51.6602 148.065 cv
52.6987 146.91 53.853 144.488 54.0835 142.988 cv
54.3145 141.488 55.1426 140.76 56.2759 139.016 cv
57.2114 137.576 59.3691 137.564 61.3311 137.91 cv
63.2925 138.258 65.4204 137.645 66.2285 137.068 cv
67.0361 136.49 65.5625 134.209 69.915 134.645 cv
72.2139 134.875 73.4712 136.756 75.2021 138.604 cv
76.9336 140.449 75.7793 142.18 75.0869 143.795 cv
74.3945 145.41 74.625 147.142 74.856 151.18 cv
75.0869 155.219 72.4678 155.227 70.9678 155.917 cv
69.4678 156.61 67.9541 156.106 67.4922 155.76 cv
67.0303 155.415 66.5474 155.911 64.8159 156.026 cv
63.085 156.141 63.5005 155.534 63.3848 154.497 cv
63.269 153.458 65.1621 150.834 66.3164 150.141 cv
67.4702 149.448 68.3936 149.909 68.8555 149.333 cv
69.3169 148.756 69.2012 145.41 68.7397 144.256 cv
68.2783 143.104 66.5098 142.994 65.2808 143.754 cv
63.5405 144.834 61.3066 149.192 60.3838 150.231 cv
59.46 151.268 57.3149 159.604 56.9683 160.758 cv
56.6221 161.913 55.9297 165.374 57.5454 166.758 cv
59.1616 168.143 60.7769 166.067 60.3149 165.028 cv
59.8535 163.989 60.6689 163.147 61.0156 161.762 cv
61.3613 160.377 65.6035 160.657 67.8081 160.657 cv
70.9678 160.657 72.7183 159.293 73.9692 158.92 cv
75.5493 158.446 77.2871 158.286 78.709 157.971 cv
79.7285 157.745 81.1396 157.545 83.4478 156.391 cv
85.7563 155.237 87.8535 155.887 88.6611 156.233 cv
89.4688 156.581 90.083 159.393 90.7817 160.182 cv
91.4663 160.954 92.751 160.444 93.5586 159.868 cv
94.3662 159.29 94.5254 156.985 95.4541 156.674 cv
96.8765 156.2 98.3452 157.526 99.8452 158.336 cv
101.346 159.143 103.244 160.413 103.592 160.643 cv
103.938 160.874 105.438 160.067 105.783 159.604 cv
106.13 159.143 104.976 158.336 104.168 157.526 cv
103.36 156.719 103.014 155.68 102.438 154.989 cv
101.86 154.295 100.59 154.411 99.5522 154.18 cv
98.5137 153.95 99.3555 152.704 100.51 152.127 cv
101.664 151.549 102.861 151.665 103.669 152.127 cv
104.477 152.588 104.836 152.989 107.145 152.756 cv
109.453 152.528 110.414 153.76 111.568 154.338 cv
112.722 154.917 113.685 154.536 115.99 154.18 cv
118.045 153.864 121.041 154.508 122.31 154.969 cv
123.579 155.432 123.205 158.317 123.75 160.366 cv
124.205 162.079 124.205 163.5 125.785 167.292 cv
126.475 168.946 126.891 171.243 126.786 172.643 cv
126.721 173.522 126.06 175.77 127.087 176.668 cv
127.83 177.317 129.576 178.35 131.58 178.979 cv
132.131 179.151 134.54 180.088 135.58 180.088 cv
136.617 180.088 137.385 181.432 138.77 182.702 cv
140.154 183.971 140.579 187.467 140.694 188.735 cv
140.811 190.004 139.436 189.415 138.513 188.608 cv
137.59 187.799 137.368 187.708 136.33 186.553 cv
135.291 185.399 133.3 184.243 132.607 184.243 cv
131.915 184.243 127.316 185.358 125.932 185.012 cv
124.547 184.667 122.498 183.077 122.151 182.616 cv
121.805 182.155 119.873 181.989 118.835 181.413 cv
117.797 180.834 116.053 178.993 114.785 176.799 cv
113.516 174.606 112.131 170.682 111.092 169.875 cv
110.054 169.067 109.361 168.719 108.207 169.182 cv
107.053 169.643 105.877 171.387 103.354 170.452 cv
100.699 169.467 98.2979 172.19 97.1919 175.192 cv
96.791 176.28 96.4507 177.709 92.4526 178.192 cv
91.6265 178.292 89.2686 177.403 88.3452 177.403 cv
87.4224 177.403 85.6353 177.961 84.7119 178.192 cv
83.7886 178.424 83.4907 177.147 83.606 176.456 cv
83.7212 175.762 81.7446 175.252 80.604 175.823 cv
79.0244 176.614 80.0576 180.428 80.2881 181.352 cv
80.519 182.276 79.5874 184.069 78.895 184.532 cv
78.2026 184.993 76.5869 184.993 76.3564 184.417 cv
76.1255 183.838 75.5488 181.53 75.3179 180.723 cv
75.0869 179.915 74.625 178.069 75.6641 175.299 cv
76.7026 172.53 80.395 172.182 81.7803 172.297 cv
83.165 172.413 84.4346 172.643 84.4346 172.643 cv
84.4346 172.643 85.9346 171.26 86.627 170.106 cv
87.3193 168.952 89.9736 167.913 90.5508 166.758 cv
91.1279 165.606 90.3198 164.913 88.5884 164.797 cv
86.8574 164.682 83.9731 166.874 82.5884 167.452 cv
81.2026 168.028 75.8945 166.758 75.2021 166.415 cv
74.5098 166.067 75.2021 164.221 74.625 163.874 cv
74.0479 163.528 73.0093 164.104 70.9321 164.682 cv
68.8555 165.258 65.9697 167.452 65.6235 168.375 cv
65.2773 169.297 65.5044 171.583 64.2388 171.836 cv
63.085 172.067 62.437 173.336 62.437 174.401 cv
62.437 175.325 64.1992 175.676 65.1226 176.139 cv
66.0454 176.6 66.3481 179.436 67.6504 180.721 cv
68.7529 181.807 68.5454 182.879 68.9702 184.184 cv
69.3291 185.288 70.1865 185.028 70.9321 185.338 cv
71.5996 185.618 71.5874 186.282 72.0864 187.186 cv
72.4424 187.829 73.5205 188.104 74.4434 188.567 cv
75.3667 189.028 75.3179 190.301 76.2407 191.34 cv
77.1641 192.379 78.895 192.032 79.8179 191.34 cv
80.7412 190.649 80.8896 189.584 81.2363 188.776 cv
81.5825 187.969 82.9688 186.899 84.2378 186.092 cv
85.5073 185.284 86.9941 184.663 88.8188 183.879 cv
91.0308 182.932 93.0483 182.098 94.6646 181.985 cv
96.2803 181.87 99.7046 181.399 99.8779 183.405 cv
100.05 185.413 97.5078 184.827 96.8975 185.799 cv
96.3706 186.643 96.2056 188.454 94.8208 189.147 cv
93.4355 189.84 92.5127 190.532 92.0508 191.686 cv
91.5894 192.84 90.0708 195.151 89.6094 195.727 cv
89.1475 196.305 87.9136 196.129 87.2041 196.303 cv
85.6592 196.676 83.5811 197.278 82.6582 197.624 cv
81.7344 197.971 80.4468 199.834 79.9336 200.571 cv
cp
ef
226.968 111.607 mo
227.285 112.656 225.918 103.08 225.918 103.08 cv
225.918 103.08 222.125 105.072 221.335 101.914 cv
220.898 100.166 219.615 93.334 219.149 91.9351 cv
218.683 90.5361 217.123 87.6631 216.779 86.4058 cv
216.43 85.123 215.508 81.644 215.042 80.2441 cv
214.575 78.8457 211.633 71.8413 210.935 69.9756 cv
210.234 68.1108 209.626 65.7578 209.335 65.0801 cv
208.861 63.9741 205.811 58.7539 209.072 57.8687 cv
212.18 57.0269 205.873 50.25 204.543 49.9702 cv
201.543 49.3384 194.506 46.4375 191.978 47.2275 cv
191.033 47.522 190.172 49.2959 190.871 50.2285 cv
191.57 51.1616 197.106 52.3638 198.455 53.0728 cv
199.608 53.6792 202.162 54.6821 201.93 56.5479 cv
201.808 57.5298 200.721 59.0586 202.12 59.9912 cv
203.518 60.9243 205.61 60.9526 205.279 63.9731 cv
204.949 66.9858 205.794 68.1265 207.143 69.9756 cv
208.316 71.585 208.655 74.3057 209.354 75.8208 cv
209.925 77.0557 205.836 76.2456 205.247 74.8735 cv
204.549 73.2412 202.422 68.4561 201.14 67.2905 cv
200.035 66.2861 198.312 67.1733 198.546 68.3394 cv
198.779 69.5049 201.178 74.4712 202.393 76.0332 cv
203.825 77.8745 207.632 79.3267 208.564 81.1924 cv
209.498 83.0571 211.34 85.3975 212.041 86.5635 cv
212.738 87.729 215.482 90.356 215.832 95.252 cv
216.064 98.5083 217.577 101.827 218.043 102.993 cv
218.51 104.158 215.895 104.578 215.042 103.783 cv
213.646 102.481 212.766 100.978 212.651 98.8818 cv
212.514 96.3579 211.027 90.0947 208.734 86.8042 cv
206.051 82.9565 204.725 81.5122 203.559 80.5796 cv
202.393 79.647 198.846 76.3384 197.664 74.8208 cv
196.316 73.0889 194.256 69.6748 193.557 67.3428 cv
192.857 65.0112 190.445 65.5923 190.082 67.6592 cv
189.732 69.6411 189.728 71.3677 192.293 74.3994 cv
194.857 77.4302 195.748 79.7632 197.846 80.23 cv
199.945 80.6958 201.109 80.23 202.742 83.0278 cv
204.375 85.8257 208.488 92.8301 208.723 94.4624 cv
208.955 96.0942 204.625 95.6968 203.983 93.5146 cv
203.421 91.6035 201.628 86.939 200.929 85.7739 cv
200.23 84.6079 199.695 83.1558 198.296 84.0889 cv
196.897 85.0215 198.825 87.7397 199.244 88.8281 cv
199.771 90.1973 197.146 91.1753 195.979 89.7759 cv
194.813 88.377 194.061 85.5044 193.346 84.1938 cv
192.714 83.0352 191.16 81.4897 190.385 81.8618 cv
188.817 82.6143 189.826 85.2783 190.292 87.1431 cv
190.759 89.0088 189.256 89.8472 187.937 88.8584 cv
186.071 87.459 186.421 83.9604 185.255 82.3281 cv
184.09 80.6958 182.225 79.7632 181.99 78.1318 cv
181.758 76.4995 182.068 74.2617 182.924 73.4683 cv
184.557 71.9521 183.855 70.5537 183.624 69.5049 cv
183.415 68.5664 182.791 67.6963 182.71 66.395 cv
182.592 64.5293 183.855 64.4917 184.322 63.5591 cv
184.789 62.626 184.678 61.0234 184.394 60.0762 cv
184.078 59.0229 183.055 57.5938 184.922 57.1274 cv
186.786 56.6606 187.546 56.9766 188.713 57.4434 cv
189.877 57.9097 192.717 59.5957 193.649 59.5957 cv
194.582 59.5957 197.959 59.6724 197.381 56.8638 cv
197.211 56.041 194.814 54.5825 193.882 55.0483 cv
192.949 55.5151 191.127 55.6147 190.082 54.8105 cv
188.713 53.7568 184.904 50.0356 184.673 49.5693 cv
184.439 49.1035 186.421 44.7896 188.287 44.0903 cv
190.151 43.3911 192.701 42.8789 192.002 41.2471 cv
191.303 39.6152 188.566 39.2456 187.867 38.0801 cv
187.168 36.9141 185.234 34.9805 183.835 35.9136 cv
182.437 36.8462 180.826 37.0952 179.893 37.3291 cv
178.961 37.5615 177.328 38.9604 176.861 40.8257 cv
176.395 42.6909 172.389 50.0713 172.198 52.4834 cv
172.123 53.4419 169.167 55.748 169.634 56.9141 cv
170.1 58.0796 171.033 57.6133 171.965 57.8462 cv
172.897 58.0796 172.432 59.9448 171.266 61.3438 cv
170.1 62.7422 169.967 64.4165 169.634 65.0737 cv
169.07 66.1846 167.01 65.7988 166.668 66.9131 cv
166 69.0854 164.835 70.2466 163.368 71.1304 cv
161.502 70.897 159.566 70.1802 161.007 68.8042 cv
162.594 67.2905 162.197 65.9658 163.067 64.9204 cv
163.857 63.9731 164.737 62.9756 164.504 62.0439 cv
164.271 61.1113 162.405 59.9448 163.338 59.0117 cv
164.271 58.0796 165.904 55.5151 166.604 53.4165 cv
167.302 51.3184 171.033 42.6909 171.732 40.8257 cv
172.432 38.9604 172.432 37.0952 173.363 35.9292 cv
174.297 34.7637 178.668 28.2466 181.502 27.7466 cv
183.024 27.478 186.006 27.7837 186.776 27.8872 cv
188.652 27.9971 li
182.834 22.7466 li
180.693 21.8862 li
178.075 23.1099 li
178.075 23.1099 170.502 27.0796 169.114 28.7915 cv
168.029 30.1299 166.547 37.0078 166.033 37.7783 cv
165.52 38.5483 165.037 39.8071 165.037 41.0903 cv
165.037 42.3745 165.263 43.1694 163.979 46.5073 cv
162.696 49.8452 161.669 51.6426 161.156 54.21 cv
160.642 56.7769 162.183 58.3179 160.898 60.6284 cv
159.615 62.939 158.332 64.3516 158.074 65.6348 cv
157.818 66.9189 156.564 68.5625 156.051 69.8462 cv
155.537 71.1304 151.942 72.4136 152.713 70.103 cv
153.483 67.792 155.628 60.8721 157.168 52.9131 cv
158.709 44.9541 158.807 40.834 161.502 32.7466 cv
164.043 25.1211 173.756 19.5288 173.756 19.5288 cv
176.192 18.0532 li
163.334 11.5796 li
147.502 5.24658 li
128.168 1.91309 li
108.002 1.24658 li
86.0015 4.41309 li
64.918 12.8296 li
54.168 20.3296 li
54.168 20.3296 57.7173 24.8931 58.4873 24.6362 cv
59.2578 24.3799 60.2734 21.5352 61.2822 21.731 cv
63.2266 22.1089 63.9175 25.5645 64.1748 26.8481 cv
64.4312 28.1318 66.2417 29.4136 66.9302 30.3325 cv
68.0859 31.8726 70.7817 42.0142 71.2949 44.582 cv
71.8081 47.1494 74.6094 66.7163 75.9165 68.459 cv
78.2271 71.5405 80.6694 71.5 79.1255 66.6621 cv
77.2002 60.6284 76.5762 47.8003 77.603 43.436 cv
78.6299 39.0713 76.8921 30.9165 75.8647 29.3765 cv
74.8384 27.8354 75.5679 25.3081 76.3389 24.7944 cv
77.1089 24.2808 80.0908 26.2158 80.604 28.2705 cv
81.1182 30.3242 81.5747 42.1792 82.0781 44.0684 cv
82.5918 45.9941 83.9287 46.8218 84.3955 48.1753 cv
84.9731 49.8477 84.3892 51.5142 85.1597 53.0542 cv
85.9297 54.5947 89.0498 59.8032 90.3989 61.2871 cv
91.979 63.0249 93.7163 63.6572 94.1455 62.2974 cv
94.6045 60.8408 89.0107 55.3652 87.7271 48.6899 cv
86.9092 44.4385 85.0313 41.1152 85.0313 38.4194 cv
84.4678 36.9595 84.5176 35.8022 84.2378 35.0103 cv
83.8955 34.0415 84.2715 27.3877 83.5005 25.8472 cv
82.731 24.3071 77.3159 20.0732 76.2031 20.5508 cv
73.5073 21.7061 70.168 18.7471 68.8613 17.6333 cv
67.9653 16.8691 64.8345 15.2466 64.8345 15.2466 cv
64.8345 15.2466 72.186 12.5732 74.0015 11.7466 cv
75.6533 10.9941 78.709 9.15479 78.709 9.15479 cv
78.709 9.15479 76.4673 12.4966 78.2349 15.4741 cv
79.5474 17.6846 80.4097 21.0889 82.0781 17.8799 cv
84.4766 13.2676 83.2734 5.91846 86.5225 4.77295 cv
88.0132 4.24756 94.4814 5.92871 96.0215 7.2124 cv
96.6992 7.77686 99.3594 11.7056 101.028 11.9619 cv
103.316 12.314 106.231 12.6665 108.01 12.873 cv
111.184 13.2417 113.553 16.5454 114.3 18.6504 cv
116.353 24.4268 111.884 31.7456 111.884 31.7456 cv
111.884 31.7456 110.939 33.9185 111.252 37.9067 cv
111.559 41.8223 111.09 44.3252 112.888 44.3252 cv
114.685 44.3252 114.685 36.6221 115.968 33.7979 cv
117.252 30.9741 117.592 28.4067 117.887 26.0586 cv
118.201 23.5308 117.827 14.8618 117.57 13.5786 cv
117.313 12.2939 115.455 9.40771 112.117 8.89404 cv
108.78 8.38037 103.389 6.32617 104.672 4.27246 cv
105.956 2.21826 114.428 3.24512 115.711 3.50195 cv
116.995 3.75928 119.922 4.47705 120.572 8.04883 cv
121.203 11.5239 120.828 19.8369 120.729 21.3188 cv
120.572 23.6885 123.059 20.8887 123.73 21.4771 cv
124.995 22.5825 122.191 27.5386 121.678 31.9038 cv
121.163 36.2686 119.305 40.2173 120.846 40.4736 cv
122.387 40.7305 124.954 33.5415 127.521 27.3794 cv
130.089 21.2178 129.662 21.8311 129.662 21.0605 cv
129.662 20.29 128.912 17.8223 130.453 16.7954 cv
131.992 15.7681 137.088 15.373 140.09 15.0576 cv
142.288 14.8262 143.532 13.6777 143.249 12.6875 cv
142.965 11.6978 138.881 11.1655 137.878 11.2661 cv
136.298 11.4243 133.045 12.2134 132.255 11.4243 cv
131.711 10.8794 132.359 4.88672 132.359 4.88672 cv
132.359 4.88672 140.971 6.42188 144.025 7.05371 cv
145.796 7.4209 155.61 11.6934 158.692 12.7202 cv
161.773 13.7476 169.229 17.1064 169.229 17.1064 cv
169.229 17.1064 166.343 16.4478 164.668 17.9131 cv
162.001 20.2466 159.34 20.2466 156.835 20.2466 cv
154.168 20.2466 149.345 18.9067 146.777 24.5552 cv
144.21 30.2036 142.027 38.8047 141.514 44.1968 cv
141 49.5884 138.477 54.9453 139.717 55.3652 cv
141.335 55.9131 143.502 51.5796 144.42 47.9194 cv
145.076 45.3047 146.307 42.1875 147.002 40.9131 cv
147.771 39.501 150.335 37.2427 150.335 40.5796 cv
150.335 43.918 148.375 46.9717 146.835 51.0796 cv
145.294 55.1875 145.094 57.2847 143.439 58.7031 cv
140.744 61.0137 139.862 63.3267 141.9 63.0674 cv
143.479 62.8672 145.848 63.1826 144.9 64.605 cv
143.752 66.3271 141.9 67.1758 142.927 68.2026 cv
143.953 69.2295 146.816 68.7651 147.111 66.9741 cv
147.406 65.1841 147.291 61.7837 148.318 60.7568 cv
149.345 59.73 150.613 61.084 150.115 62.8105 cv
149.323 65.5522 152.167 64.2886 151.219 67.4482 cv
150.85 68.6772 148.959 71.0269 149.217 71.7969 cv
149.473 72.5674 152.169 74.2363 146.136 74.8779 cv
144.348 75.0679 136.471 72.437 134.316 71.2402 cv
131.473 69.6597 129.113 67.0024 126.891 66.1846 cv
124.452 65.2856 119.423 63.8154 118.676 63.499 cv
117.178 62.8638 116.225 61.5273 116.225 60.5005 cv
116.225 59.4731 113.658 56.6489 111.861 53.8247 cv
110.063 51.0005 107.496 47.6626 108.267 41.501 cv
109.037 35.3389 109.037 25.0688 106.726 21.9878 cv
104.416 18.9067 97.3545 14.2856 95.9429 11.7178 cv
94.5317 9.15283 90.7412 7.31641 88.4312 7.31641 cv
86.8071 7.31641 87.9077 17.5771 87.8555 20.4478 cv
87.8057 23.1309 89.0049 24.9829 89.8604 25.4414 cv
90.7148 25.9004 92.1099 28.4102 91.979 30.6396 cv
91.8208 33.3252 89.3354 32.2212 89.9092 35.8525 cv
90.2939 38.291 91.5781 37.6499 92.605 37.7783 cv
93.5239 37.8926 93.9678 41.8735 93.3755 42.3999 cv
92.6831 43.0137 91.8345 43.5547 92.0913 44.8384 cv
92.3481 46.1226 92.8618 49.9731 94.4023 49.9731 cv
95.9429 49.9731 96.7129 47.6626 96.7129 46.3789 cv
96.7129 45.0952 97.2266 31.7441 97.7393 29.4336 cv
98.2529 27.1226 96.7129 24.6836 95.4292 22.8862 cv
94.1455 21.0889 90.5176 18.8906 91.0308 16.5801 cv
91.5444 14.2695 92.1846 11.8267 92.9268 12.1563 cv
94.3481 12.7881 94.1504 15.4937 94.6646 16.2637 cv
95.1777 17.0337 103.351 22.8706 105.057 25.1973 cv
106.469 27.1226 106.512 36.3657 106.469 37.9063 cv
106.42 39.6914 104.184 40.9746 103.928 39.563 cv
103.447 36.9248 104.923 32.9536 102.361 32.7715 cv
100.564 32.6431 100.05 35.3389 100.307 39.4473 cv
100.564 43.5547 101.463 52.2847 102.49 53.0542 cv
103.517 53.8247 104.801 54.21 105.313 55.75 cv
105.827 57.2905 106.619 59.5381 108.523 59.9868 cv
110.705 60.5005 112.631 61.1421 111.219 61.9121 cv
109 63.123 105.826 64.4717 104.287 64.6079 cv
99.9224 64.9927 96.6519 68.1104 94.5063 69.6597 cv
91.6626 71.7139 89.6094 75.979 88.3452 78.9805 cv
88.123 79.5093 87.6147 82.6831 85.8174 84.3521 cv
83.689 86.3281 80.8574 87.6733 79.498 88.3013 cv
77.8296 89.0713 76.3013 91.1816 78.8691 90.668 cv
81.4365 90.1543 86.4429 87.4585 86.9565 90.4106 cv
87.4224 93.0913 82.7202 93.1069 81.0508 93.3643 cv
79.4463 93.6108 76.0444 95.6748 77.7139 97.3438 cv
78.894 98.5234 82.2813 95.2998 84.6455 95.418 cv
87.2134 95.5464 90.4229 97.0869 92.7334 97.3438 cv
95.0444 97.6001 99.7217 97.9185 101.592 97.3438 cv
103.26 96.8301 110.063 92.2085 113.529 92.4653 cv
116.102 92.6558 118.914 94.8228 121.23 95.9312 cv
124.184 97.3438 127.324 99.3301 134 99.2017 cv
140.719 99.0723 145.207 96.4268 145.848 98.0957 cv
146.467 99.7031 145.029 100.061 144.9 101.729 cv
144.775 103.348 145.196 104.75 144.426 105.521 cv
143.448 106.498 140.932 105.343 140.16 104.572 cv
139.391 103.803 138.433 102.607 137.406 102.607 cv
136.379 102.607 132.914 102.863 133.17 103.634 cv
133.427 104.404 134.453 104.918 136.764 104.918 cv
138.561 104.918 141.9 109.154 142.927 109.668 cv
143.953 110.182 146.777 112.237 146.264 113.266 cv
145.75 114.292 145.108 114.292 144.21 113.906 cv
143.03 113.4 142.867 112.061 141.582 112.316 cv
140.299 112.574 139.074 114.675 137.535 115.191 cv
135.737 115.793 132.197 116.074 130.346 115.447 cv
127.944 114.634 126.103 113.563 124.825 111.98 cv
123.309 110.104 122.13 107.484 120.332 104.66 cv
118.535 101.836 115.968 98.627 114.428 98.8843 cv
112.888 99.1406 112.374 102.479 112.631 105.432 cv
112.906 108.595 114.428 110.568 113.914 111.854 cv
113.401 113.137 111.436 115.001 111.348 117.117 cv
111.219 120.198 113.306 118.828 113.306 120.111 cv
113.306 121.396 112.964 123.423 111.937 123.166 cv
110.909 122.91 108.881 122.57 108.651 124.18 cv
108.395 125.976 109.45 125.564 110.834 125.848 cv
112.146 126.115 112.102 128.083 112.357 128.854 cv
112.614 129.623 112.838 130.584 113.994 131.097 cv
115.914 131.951 116.229 129.988 118.254 130.326 cv
120.199 130.653 120.494 131.105 121.73 131.485 cv
123.398 131.998 125.745 131.412 126.258 130.643 cv
126.772 129.872 126.366 127.771 125.596 126.744 cv
124.825 125.719 124.201 123.619 125.468 123.408 cv
127.008 123.151 127.898 125.135 128.154 125.904 cv
128.411 126.674 129.419 128.273 130.366 129.379 cv
131.201 130.354 132.15 130.603 133.298 131.752 cv
134.453 132.906 134.711 133.805 134.967 134.703 cv
135.32 135.938 138.177 136.373 138.947 137.4 cv
139.717 138.426 139.717 140.48 141 142.277 cv
142.284 144.074 143.697 145.23 142.413 146.771 cv
141.129 148.312 137.663 144.203 135.224 141.637 cv
133.096 139.395 130.089 135.859 128.292 135.859 cv
126.494 135.859 126.494 137.785 127.265 141.379 cv
128.035 144.975 128.42 147.029 128.934 147.285 cv
129.447 147.541 130.326 147.13 130.84 147.388 cv
131.354 147.644 133.17 151.135 135.48 152.674 cv
137.791 154.215 140.377 155.424 142.688 154.653 cv
144.998 153.883 144.21 151.905 144.724 151.391 cv
145.236 150.877 148.062 149.85 149.345 149.85 cv
150.629 149.85 150.903 145.791 150.903 145.02 cv
150.903 144.25 149.856 143.045 150.113 142.018 cv
150.37 140.99 151.693 139.844 151.693 139.332 cv
151.693 138.818 151.896 135.877 152.641 133.961 cv
153.539 131.648 154.993 127.643 154.479 124.051 cv
154.188 122 154.223 120.07 154.993 117.502 cv
155.764 114.934 156.171 113.871 155.764 111.596 cv
155.326 109.154 154.904 107.936 154.904 106.627 cv
154.904 105.468 153.115 103.783 153.431 101.571 cv
153.576 100.555 154.617 97.6899 154.694 95.6733 cv
154.853 91.5659 154.492 90.1206 153.747 88.4063 cv
152.693 85.9839 150.982 83.5659 150.113 83.2456 cv
147.674 82.3477 148.318 81.0396 147.291 80.2695 cv
146.641 79.7822 145.622 78.2153 146.906 77.959 cv
148.189 77.7021 149.088 78.2153 150.886 77.5737 cv
152.819 76.8828 152.684 74.7495 153.71 74.7495 cv
154.736 74.7495 158.012 75.5054 157.696 76.2949 cv
157.303 77.2783 156.547 79.7158 160.383 77.5591 cv
161.501 76.9292 162.183 76.1616 163.466 76.9321 cv
164.75 77.7021 163.594 78.9858 162.824 79.7563 cv
162.055 80.5259 159.359 81.2964 159.359 81.8105 cv
159.359 82.3237 158.844 83.6074 160.386 83.6074 cv
161.926 83.6074 163.852 82.4526 164.364 81.939 cv
164.878 81.4253 165.232 80.2695 166.29 80.2695 cv
167.574 80.2695 167.061 81.2964 169.372 81.0396 cv
171.682 80.7832 172.58 79.7563 173.607 75.6479 cv
174.635 71.5405 175.771 63.5391 176.285 58.9175 cv
176.798 54.2964 177.081 50.8784 177.232 49.9653 cv
177.443 48.7017 178.1 47.4058 178.615 46.8926 cv
179.128 46.3789 180.668 42.7842 181.695 42.0142 cv
182.722 41.2437 185.033 41.501 184.006 43.8115 cv
182.979 46.1226 181.435 47.2275 181.283 48.9468 cv
181.146 50.502 182.209 52.7979 181.953 54.0815 cv
181.695 55.3652 179.128 55.6221 179.385 57.6763 cv
179.642 59.73 180.283 64.9927 180.283 66.2769 cv
180.283 67.5605 177.878 68.0732 178.392 69.8711 cv
178.904 71.6685 179.385 72.8242 178.615 74.3647 cv
177.844 75.9048 176.541 78.5322 176.285 79.5601 cv
176.028 80.5874 175.675 85.5601 174.705 85.9839 cv
173.02 86.7217 170.597 85.9839 169.372 86.9448 cv
168.361 87.7368 167.831 89.5127 166.547 89.5127 cv
165.263 89.5127 164.236 90.2827 163.209 91.0532 cv
162.183 91.8237 161.412 94.2627 162.953 93.4927 cv
164.492 92.7217 167.959 90.2827 169.242 90.2827 cv
170.527 90.2827 172.195 90.2827 172.967 90.0259 cv
173.736 89.7695 176.304 88.7427 177.588 87.7148 cv
178.871 86.6885 179.443 84.4971 179.443 83.9839 cv
179.443 83.4702 182.077 83.6934 182.077 84.7202 cv
182.077 85.7476 182.85 89.1279 182.336 90.1543 cv
181.822 91.1816 179.971 92.7246 179.971 92.7246 cv
179.971 92.7246 176.304 94.1338 176.561 95.418 cv
176.816 96.7017 179.77 96.0601 181.31 95.5464 cv
182.85 95.0322 185.29 93.1069 185.804 93.6206 cv
186.316 94.1338 184.135 96.9585 184.904 99.5254 cv
185.676 102.094 190.553 102.607 192.35 101.836 cv
194.148 101.066 194.367 100.09 195.137 99.834 cv
195.907 99.5771 198.592 99.3203 199.876 99.834 cv
201.16 100.348 203.134 100.938 203.134 101.709 cv
203.134 102.479 200.565 103.12 201.078 104.404 cv
201.594 105.688 202.492 105.688 204.033 105.432 cv
205.572 105.174 207.37 105.688 209.424 106.201 cv
211.479 106.715 217.886 108.522 220.518 109.471 cv
221.988 110 223.572 112.197 223.572 115.793 cv
223.572 119.389 223.439 123.32 222.414 123.377 cv
220.518 123.482 220.336 118.786 219.052 116.219 cv
217.669 113.452 214.431 111.469 213.918 111.98 cv
213.404 112.494 212.505 113.395 214.303 115.447 cv
216.1 117.502 216.998 118.529 216.998 120.07 cv
216.998 121.611 217.209 122.802 217.465 123.482 cv
217.781 124.324 219.322 125.76 219.052 126.873 cv
218.676 128.432 215.121 128.066 214.094 127.168 cv
213.298 126.471 213.531 119.557 212.762 118.272 cv
211.991 116.988 209.553 112.109 207.498 111.082 cv
205.444 110.054 203.262 111.082 204.033 113.395 cv
204.803 115.705 205.316 118.786 206.6 119.557 cv
207.884 120.326 209.144 122.113 209.144 122.113 cv
208.91 123.664 li
208.91 123.664 208.91 127.258 209.424 128.285 cv
209.938 129.313 211.479 130.082 211.734 130.853 cv
211.991 131.623 213.275 135.475 214.559 137.271 cv
215.843 139.07 215.352 139.807 217.148 139.807 cv
218.945 139.807 219.488 138.377 220.002 136.58 cv
220.516 134.781 225.995 135.172 225.995 135.172 cv
227.776 116.969 li
226.968 111.607 li
cp
ef
37.5933 37.5933 mo
17.7603 57.4326 5.50244 84.8091 5.50049 115.077 cv
5.50049 115.077 li
5.50244 145.342 17.7603 172.716 37.5933 192.553 cv
37.5933 192.553 li
57.4321 212.386 84.8091 224.644 115.077 224.646 cv
115.077 224.646 li
145.342 224.644 172.719 212.386 192.556 192.553 cv
192.556 192.553 li
212.389 172.716 224.646 145.342 224.648 115.077 cv
224.648 115.077 li
224.646 84.8091 212.389 57.4326 192.556 37.5933 cv
192.556 37.5933 li
172.719 17.7603 145.342 5.50293 115.077 5.50049 cv
115.077 5.50049 li
84.8091 5.50293 57.4321 17.7603 37.5933 37.5933 cv
37.5933 37.5933 li
cp
0 115.077 mo
0.00195313 51.5186 51.5186 0.00195313 115.077 0 cv
115.077 0 li
178.631 0.00195313 230.145 51.5186 230.147 115.077 cv
230.147 115.077 li
230.145 178.628 178.631 230.145 115.077 230.147 cv
115.077 230.147 li
51.5186 230.145 0.00195313 178.628 0 115.077 cv
0 115.077 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Richard Box) ()%%Title: (Logo redrawn revsd \(new\).eps)%%CreationDate: 6/14/10 9:16 AM%AI9_DataStream%Gb!R&pKB>qZ8hd<!;D!E"\Fo5_*eJB'btd8WOsDt@BI5g+6V@-<S`k,)$XM6H_9aeB>4h$3``EKY3o+72jj<nh>To^n?6pfPmYP,%'H<9J+W+hq,nLD`\sJtmX\sa`A-m$,#tElP:n:B9U*u3`#t9qRd',3;9trdg8Sp:tFiNJ>TJm^Idt(?h8:3"3H_&Smo\Gl;Plu_N%/GGU&G'iV_l$'Hi8d>N+^gd;.[(@A<5!%pNq+Zd.qQ8V]h5U&cX\ScW)a9>QKD\>j?Zd\/R-lpSA76h\e,,@,F?CFgP7F6>a97oa%W5*o"[Hq&pr2^_dO#ih\0HX0XRqGG6,\3%E@`;`BAXHLl(;F@\pk90O:kAUQq!kZ]d2c"PNCe?@Iu_mteiVd,?=VD,i"J(.+U6ts%,/\oSJ#IJj1o)/tjV#JKk7fEO;qcEtXI[,;S\NXidmgCmT+&`3'NDJXMo%G8RTt"8#G@@q\=fdV[.JCml\r"Dh$Jd0p.1n%:'^/]%%gLS=Q?j!n+%-$g2?'EelAa1]B*+;PkY6&nkoe<NT)aMo`]kKZF\n_5S.@^[qV[+P2D3-mJmm:STAmtBR=lhWEf^H6$7_3pbJnOt%+Nk,WW%9B+C%p6tG,:0AMC^;1<!04oO1HFhI[UMk#!#/G&<gJEUMeg/#al'tkWb:=;PsICgAgBL!<eTXVlp./-o?EgoYWA>djl9F%fPfpXhhVje^ebNFhZqm"%6iu7rAXNRc)3q?%eBA[f`5ahqOl0M)>TGAXnAR\WB;(mLI_=;5p2\7&"9%sXYKV[k'ESIHQ3?lAb=:k%D#pK`mU$u<Q=tAq&^UIA,:&e?i-FoiV_s%FC4Yp@C>,5#k'(pt684CN\^>Ns)6=>Q4ahe1:\lou@T&*Vs#\6!OTtdU5)&Xq888>*%8AHeVFe_3=pCZ?DIrk)S7^(GB(c@&?h3QLi%c?rAkdL^""!/P,N:u=.mCtj+nt5C5T[t36)q8ONWAR//DQDC"qI_qTI*_8`d!5ke%BEB,%/b]50oEI\3,k[<i^E't(N.tYE,F[K$rAJU#iF`7OKC9t`p#+A5A(VsRSU?_obpslHghZO$UED#;]0u/koF(66.["J5hPp8W%K$c.Gic/n)\8VP(IR+].q54Ip61Ug9pq'?$#c7^_7f[[Ag7(2pK#t@=G:+48,d4ePUcV`p-?pS><:0D`^FfVW-9MTJqN)$?r<%Nh%_iI#YoQO+;Sd$:/R:$t+mk+^@\*ht$,_a<W+IIgjiP/oTYTdS'F4XN0oK`"ia<YNFJ=F*#;]5mQN0%3n5ZF;q-n0:-iNphee=I"R%rS<jJ5(bDck@No),stn;rBjf")H9Q,YJ@6-7H^Jk-GRk0:Z6ftn@oY3+.Z(WVaEoU^`mHq!Y!;_ScLsQn/M45)>]214*L5qWQ!5H%XjEncFfq/n=(k8GJ^A11q\r';s6@$(KoOJEjDQrD4G$AfYNukB(8+l.']WC/K:cO`]S#0fdeP6lZlFC'S8&hUZu4W66D$9"Pd[U"%64)`U&5]^flV=gu%.no"C"R3.9q11gUbi&jkRqTI:?U:$#`NP$)6ILXB/2Oe2<`@ld,^a(V(i"d<!TNp&(u)!^8l+Alb_pKUSEFO%VYP;HdHl!p<4.q%e*7fQ^lD6HG5qF,p#0s3<:d'CS5)-*RDJpZ?*']K;m"UupfaGQ$@bgI(@<XO1\h9@!e(SsouF7c2+HV3OHrtp%3uEsCWdcmP;lq[<O'V&D!HgFQe;CO2o?c_4qAgZ.km^g'S[KW]BJijZR(lp.ZV+PPf#QKp35Dj\,E%r(5'-*+TmoX)Yb$sG[Jhcc%'L.78(T[S&(d7haDcXoYs'^f)jg@W!kW^T>rdAmU*]MH%7:QC$bV)!Ug\Cp5nm=5=s$(Jeq#0[]@Vu#bAqP*,g\SZ;MiHZ+C2gd:%p)cN_eSO@IfQ+>^K/nkcQS2P@:G510#mjb%Mj_>lmE)8u"fW7:Z]!gfnG!04hP*1qh2b>rdTj!OT3[cNJ\!G33LG=_;!knkkk9S"%V9QIE02VX9l<OjrUK3.dfDWat5No'GoG##$P=?LMTk3D\/3/cN[Mm`e6X?S3V"*JZVqmnm#E@QJB2^bB,F/f(;'WB_'N@#o3hp)"%e/<HW6,VC(q#R6j_0<S%X4J?r>6D5RrtQMr5%'V[*_LHh0pk^^h0p_2Sr<k\*M8TESUXAH-\@JScKMH,E:?qA1rPL/fG&]W=Ko1M%29(j*./m;G2&V@)bsnnaDfoZi_Zi!.#.jlV`hX8ai`6rMo(&aWeH^RDjraMoZ#2<5;%J=kO-JR:BD`X[,h(uV%gfh9O@<B0SA:un%q(';$B[RkW7W!Z9`aCgj]q\FDcWGKXT2(+pr0%#>[#fkbMS/.ZP6ImuFN^)P9h(-AGh<"^B`/$smC%Z-mf.BV%W6AKGB=K<k18)7%`*,u=dn$DIe.sUD]9@t0MJ490):#3>qB+2+7jhCX$oMSMobF["0uHJmD53Zj`q[_8Vt"^[Z.3U]\gg_')N<FgDF0&S=ot`Eks?P?%'[0<"".]d2$![cH)ae"gEVFh6CD`;P\jB6Z**1N,N7sirluIa#ZbaTNg"`,-Gf*"cdo1sd\k?!NW?Nb\B@%V,-WI17KbkOf*]/N4%oTMjC-$*@/$JDKXd8<Le^bjcT<>,uTcaOsjHain,]8aGT0u%iPcXfT-n'CVrJ*jbQ((5'D]8aaR;nB+GV2]TZ\pSHH*2]c4gS^Ie%ZmD&rghA7V$Gm"bN!k+B+#.@`Zhop<am@!$j37:O9*R_Nh<N]bX)pJGI8hi!R6@6bQ1+,_ZjMZ.p;bBReb2.b-PoCK[/<al'`L5X%KSOe'q`Um<ZU\)\cffqe0eF,nc.h$GhY(e/<-W&9RuX%Vb0%>DF7K$iXlg?VmXptoV4TPj?_upZHCXbj(1NtO.9pc*#=8PqV75(J%C#T$d<mL@n]t<o`mW4QkPTO!838V(N/[kM>ffS!'V>\2oa8)'_QN@$<qC*DlO4J@Ae=Y"P<ICQ;kA]$d:BMd%:H7&X[`")Cr_n't%h91QJX_@,Rp(kp6\$&I#c?/7-k'5p-\(,5@iNI.+pg3op,I:(L+cj4(Ds?]5EBDb[*H&nfdAL]eHF<Euo8dF*O$EG*8D:b&c=HgS%mI09<l#'DuIbO85EcV*'B1K'K2Yr\Noc@=kj7*S/:#><Z[li,7GOro\i0QU_&'&1N>YhMNdhUY>6^dl"hSsCeVMJ`tbL*)lE?OEL%0@@J&p1'P,DEO,#&,IGOd"/R1JLGf.DP`7T_W`3;'p7K*C#64t%/[\W>"CRF[Rt>_LCoOjiJ/5t$`OaE1!TA9Jc(NLPkNU6Hags-%>!3rX^<t69HgV/1pPt(O*#)mfiUC>amH8YBDn#].m"JhFT.on]SeKXOTMk2[T>7cf!B.T?M3U+'.21<RKi\?@6>(Zo8.X.@<jl?0%'.pjE:O\1\`qF">C0k6q[F!`Pp,ntJ(#H.*5FJ/,oLC$g'CP1i'UTD/qk<f-7W3=a?1tp1piH>$n,AH4]C4XNO&Gt*LBRZ!]ZK_U%HXMf!]))4daduRX:.g42qh2gU"#Qj&_#@l3\;23_1k+Y?%]!&KZWj''BC!U%l0Qi7O>Xj?6c@eo:$_'O39NCg$&"0HmEc+4[Wbh]%8l$=rOMK`-?E!qSYnN&X#0MiE='!D2&Z[(,;U47aGY4V3CGE`k\6@1l*j^N/p7fI\[o3#",`u[3l47-1o4<tX`!QugHDu!YiN6N6%s!_6&'r0;Iae2U@JGT@>R&a[8.5V-#ot:N%gPFoT5)Wor[rm+ePomM?3t?"jhMnB#ol;c.CFW(-;8,(=q*6?45A`nV_AjtX>kS*>%Bssh7WF#C,IKu`!EXZ"b:1l"g;Cb1N^"lRPI,L_(jgTIWA?6/>eTrk`$_j/Tio`6gi$?st9oKKa8A5OWEdoG'mp*&G1W\-3ml$kt%P9%>h@50Z"j%<Nqq([6lrj`K_cF,uRKtG,R[#;q,X;%'JgI-^aA0eP].>Q'l$3aJDqXKuRDf),4T>H;8V-`a$`TW$J_q[Dl%,WrP%SH?I-IkS0UO,o^V`neRpf`WTD9D]/3?L#R0V:bY@fi!BD\O/f_lW91i^!bipnb_OEEgEhKQO*Z]m>b*!b2)7<^'YbSF`K7j0>7&l%PO-hAZWh7sMd]`Km;q7IB^JFlRa`a2;CtnBdKrc&]NGSRDjBPFD=g92I,Ag]Oe];m=6+EkY40]s\@8kjQMb3%iOm#B.c1Kdlh>SB%<;*c<k=CLraBZ'b6Q:'b2(;<?^@=ge/*2pOdRJ)U%7'faSaBEL>cGGaaVB$n$D`P_\QHdIN9OasF$F1L&.5iu9U"(4YcUEp5\EH^%KTdXoi#H,=\kLNs:9*rV]cq$p1U8Jk$F[BoaI'8Md,rC/*eb'sLCh'7+.?B.+CSLEmmFOKg!#mM8VSl\DIuirSqn0e#UheKHbD5C%Qcnct!SK`ZL+#RA/rU&T)Y?mE0?SCF3)NlQqCk$.iFDroX_7Q'3[;fo,<O,cGqFJA6<6@$Bg&K@/:S;<!5,fRL-&N`G2B6r<>hUl%!%d[A7WAJF=Y#2Z"qK+NZ*GTN$#Q&[T`IuBQu1C+7NG:n_E&VLP>\j0nVfb*IrnN^MJFrNA]6-Q*VN%(,:&d]7:f#+L(%H6;UR#5%55i2LW9;P9!BD;t=IMup3oZ,WA3=]'$SnM+d?]\%,Fj^&Q^#S%qMTkGQU+]aT2e^@f7fhb2[apb2?5O]*0q);KsRkDm%mA_@o>HN%c\s40VdaGQO[;EW$aeQ+R?^d#VnCmJ/tSHT_U4M<")c7mWUq*3qa=Gm;tu/=%]Q/!)NN;qq6m:c9>-BeQ2"0h>M?chpnhIP=`n!!%jLDJ*f1u%F+3E^#UP#IB0m-VR(*r?4<(g?p7S05WKeDo7DY>ZW0H6FLm;TTQ4WCaY)jgH6[]d5JYE>)f+.q#9j8HA[Rqnl>=AQ2Z%fn-U5-45c&rPr%+N3SL\IM=h)`Cl,aB^MI8=j%,\gob7\8NYkDmX6CU]?TuGN4*:H1E([J$gH-p6Xn69`9p0"g6P1R!]o(qmSC`s%6BBAGa'otd.5P8SU2CI,2U2CJ$\_27\r41Y*pjcOC>\+A"r^G=no28kUtad6D\NG2I5KteR(<>*Zag%D\G(`djeDb/_VQ6aal'4V%9a;KnU"EoLFpaef.)p@Dqn"nlXDk1%'i&et2@rET8][L^%a3TFfrJK_)Op%l`/TVHoe2cE>K''+V=X$"Qc];PSb#2D/(=U;pL4[&%Jef[(T"Z5t-]2fama6:KT'q]O&icl$DZ95^++ZGD^<Lg_j%lUR51Vqq_VB9/$H]p&+agkWnQTY8([Cb2(*e<'Rl.'hdN!ksMK>qJ%[EBQX^7i`4BASpOOc',%I40G+bZ/VHBoZV3f43XuHqjZJ*ac4qmR^[`TG'E`aRu)6T]o*'\U?7tE*^cUT%pLOm=2:<?4qiSNFA(C%lrCUpVmKO\+*!_722+)tZ-D@iIX'"XEg?LP48khaVQ!m2<$?"05[,6&06=Ra.9G6D?M2BjO@GC2%f1HCkQAo&Qfjp!;R&H7j$Ln4%b31o5\#RKZMd!!t7IIq:9K9OA]=K.2Vgc/S_eZt'(JbS47toe?:rc!e>L-Y`(E797d:i(4Y+cMWGuB)^^(!]nPB%HOJ'8lKJ+>Q<%hN6$U-MJU&Q)gMAKQC%7X3_PA=+nS*-q9%8]P">DC[TCopDOq]4Rm^p>DX/V7ltY\\^rYMS*piu108o&e@^0-O6'VBqKOh6c%rm+%O1BMfeub?ej,]Nf49^fYQXc+ed2hK-:f6cAC[NKiZT4FMinH\srtLVB5"RneW)<l9,a+HYh.]An9p=lG:.3JGP3[I7HZW4<'k1&t%c)0(;8s0#)`2p4]gI[UUB?'\Tfun^6WV@eL-i!"gfnQ15S,2Op<*sQ,DBGQGIX<0)FgkO1>&7J4p+b4NJ2YY/_s^oK'hV]P1K'P)%V7%VGiRsE,]2U=LGTbF.]l6*JM!_oXRNIsiD=SJ&0SPRYXShu.0psLjTh'OhbUBVf_:[u-@[.jVm+XT3P>?d-;MAGK:9P#dqojEG%jJ:)`ip"aM(cNB%'2,(6[<Ybuh:R#S1hO_[6'%pt`+;$%8Y>tW19!4NQ*al_kLK@1>#pX_>jW;Xcn;1\A,48:aRj2N=(?AH<t5+#%n-<'TI,mLU5+5W'Z;q(KK-H[gR^o#_m.CDVhNc%M_ja".-.bem-.1_^_,ueT&J>\A>?oJ\@erTi**pG*;A&=Y6sEr-R_</dq(Qo`%%59,[E;-)c<6Ll2M^OqKgsBRPWYCSV75DL$f/9:bj+CJS-t/d4g.Q$R>'o$VVtdi@"KP'eF`WQ%>Pt6$9'.BrHtcj9ZBt$?1^*Z/%&7%mJmG=!8([4c-/*G7L2lpG5X#'VYI0!J!lQDCF6QfM,^@;,N_)];pcg8X&L5#3of+#l(O>'^EGqusblA%n+jC(s`&oUU'*jE$a%#k6$^iE'X[?s!C@[[Sa1[$hN:Xs?%pg/nS4l?m.'$$0=rI\$nC[E-spA!PR,mTlEtrZ4T(Nunf%lr!T$(@,++\blG=<;r(E\]p\j%Mupr'nVDucc$c3+M#LGTRX*IjhSAU<;N*$l8YBE_[Iff?W(K0nF)ok9)=m;#ABKC3Lbs&<io&u=)!tfbo5iRL=9dTQAlHt5LPaWE%?00IJ3#)^a6cC)&"TJ?55/\F(QM8mtH9@bbS")4Hf7U3+rR"s<IP7RG5&C]9-cb[_Q2N(]ZdT;+&aj7HNsAH'a0)<4WG8G)(JM*a%3ad$B5OC*ETrIBY09aVO.j(bgC#T^=;ts@[-.mtiZ=]':;X@@:fSB;VBH0^S1OK"+FeJ`OPdIum$n6[T)OIC&hpAXmO;MeRZ?<OO%Fo/%Hc`\jqm,_XT2(Ka82T^uDeH)Hg#__n$L"G*dA2D^:du`7G2E.(P.A)%f.-1t`,nhqHArpOYm]['1PZ>Mkb^:gg7b`.4UL9o^%h72,korfB\Cca.SD&jGLZUM)DhI$"iJ[P$5'e@U#g"L'(]^X^ihf'Lq1n;5l?HXs,Ce_3:)u8N1^U!H0g+0SNIQ5kMp-`)q&AB35%Vcs>,gV]L;pK$*#S35F!;L!/sRO]oADiARPWhtT`Z$6`/"mVG!5??CL[f%4SL2jkFFEG!KY!fJ?fm?lJ?L/qUE._O#N?hOE`ifb>%$^3Yn>)=rD?>oU.K,V>SW6uL_L.D:9HE2#Wh//l0[r"$:eK-%5+kpdSoKa@fZ0J+r49'".NsPZWYGi#]5K$PUNNuQ#X\7!U)f$[6%]RsZiri'.'a]@9dqtJYWGboncm)f3+hhGiNYFcTeQ!sfjF!BVB.s5')pU1o%hi?iFnk7c=hSEnTs*h6[,F9$<,D47ENI@;Ll]iYh%jK;R0<;2luH(LkOncXfVVp]&Ekfc-rAYlNnYX?&YjqrJ[;s])AoC$X5OR"3M^"f5E[7oPXI5*/jLVkG!kbH?rrMY:W+uH`<&J(nl%K,WF@h(p$f["1Jq(m*NgX-@ONZXtA-4Irthfg$tADR\oqZ^9g]o_-.M"+Uo-S_P<m=3]\c%FB(kSa./E>H(ulcO/\;e.B1HPKgsC%Tp4@ocKnR%#r>XLoqr8GcFFY1^3G41g>jAjP#254p--],p6/_X:PJGV!#s`R^=^%`X%-i6'<//G>;MB=Qi3hXP]!(2AQ.^\KH<"\%X>g!&j^'$Jp!mrL<l"0W,LZ5DndaT+*Q,Bu1!:OVJ",XjPH&-C+ffHK"/5Zer%eLD`QI:t<;d,F7/"(Y+`;G/K?s-0_r]7!PU<#E%_*j!FMMNIm!)^3#cc<_k;RVmB[A6U=dt'Bn.7lb*E`m);)de;iDR(SWn\n8niVf^RL\+-&/$MpS8u2qPBk104`&]qMASm4/p)quE%.`kRsR\fo&IkF!oC]dH/fi,9/,It#6]soQMCd!5XHDh,(`^pV4[hn?j0iCUZgZ\e70B\sSj=Amu-/\#-V9F+\Y/BZGjjT]@n.YUQ%`@V\Eqml+-C,,FP>D'ASJJ&<k^"DtV$dEjT$dH</-#hL&"g!XZfAR[R!-P/YJ\7!_C?E>V5tI8!E*r4@n@j=\"`X7YRAY-=Ss7)^%NBMgEFfh2['N5@Di=@3,=Q+MlSXHTDA>PcfpFK>5TrOW+l[)ghHMH\?h?VA('#i4,(UfF4M21Z4H?kqr^1:"\+t3Wk6jFE1e+K'W%H%iFPI-c*eoGY>5>K0Tg6%?XU*.U/1hqJE2n)k.-qpIC$[mA09MsU79.VAuNj.q=a07k$tI1X/6]TYNsgmf;K[fjT%^q`,cD3mVd%$CI*4#$>Xi0IQ.pRu,"%F@.mGgm`*q>Kp7hUXk38g%Y>D+G>Q#/\EkMH^;IjZ^f]sM,2NMGQftQh?!j$De'++:5MZ*9TJhaLU4VV%%-?RL;4T:$Ilqf%:/niO_ol>#D;`1s*\>s<Iu:))Ecl&c5>&"o.6!E3h#3?"nbWQo\/*C:5PsifVXe^gK"4q!\R$Z(k.>DigVrAO%l_hO7`qq$9*!hC:q&L6@Nc4Cmn#r3l$q,hPrdPHc'7I<qDZt/XR2cQuA`GbHXk&bdp2A5B4meVHdQ!2WS9l_E*!msqqcu<tVk)5A%[HD:YdOWrnPA[!41,Mbml%`;V/QcfiE9afOjP5.$CO2e^H@EDB3c\subNLd\X%<CI1K"`oL?kJ&E@6R/HV?Ub_)At/+?3Ejmg9!l%g$&a^NPBFhNILAqf:.p2'*b3SVT/o\@k9N50l"a['>`uhkn=!'G4s6i)BAIDd@_TJ[(H*e$r+A2BQX-fY%=8.&-gUQp&R@naT/qd%Fb8EU<c/%eNIUH]EFUupF^+M!ms*R_`9A;9Xl'*@)r8lgqLF/Hb\lof%,W'1Vu89]![HYC_6$RYBUg8h5o6L/GT%&RD80%H*t7=r%^h)]hZn_Cqqs>)]1$84f[m]1,-M)$(8)<Wf-?*[0]=:ZdWI(e=C7ejuY,g=Wo"d#>n`7.-`-\cO=!kD*j;Oe]F7i:nNN4)@bms>X%X^1@V*I6[t:_)t-\J:mrmHM[\]m/<XGA76<#ZWEpU?"&(nu2'hhPt0Y:+!f6?3o)CIqqYbRQ#i_;N$`V^HEZ8fVeci8Q0el2P0Q!%_!6ktDKR0Ie/q>aGJa8faT_2]&uXu>_jWEg!o"@mW.l4S:Ao81h<[)3]s0Hb^l?-GpQG<)!)991&,I]FmDn7X_+bRL9L??^-%!?\%UcATa/b::dB\"?(qh7-Zef+1,SX*96c6F2?SR"o.VRotnfLERGL"r(U[dfC=`<bYqn&YI&_)JUihZKN49m4jZ*Og;H2P/T2i&K+K%_3/RVZd$<n.Tcl%Mm#k\rIK=M\HMBBqkbncCI=^34l140&n\R0)DiBHH5GRZi+pbE_Ar?X5+u-"IAoCK)^)RBG-P0hb$K67$(q$%%?;.,'[LW`"c8/eO-uSSO+`d6)nf9KpO61MIlV(GoG)GjQJ]<"VJ5mQ5[%0EkpB3f9;;jn^-=,ZRn^]/DRJ(hciM[3!lb7R),L>FD%muGXV%"+rZ:kjX1BP'&Rj9M)2=_Pi&31j$*:+NNKTUAJ7-.j:V=d\E6+F49&Ef$I(bZ$3^4n>)%9'YQ$MXi53?(.``2DP;I<D)Z#%)p6_l$X9+L1ML\KQ?F'CeaUjPat5NM=L'PnUFNPlhIh\)82?k@A!dl>MmY("m=]Pa/=\e#c$c:7npRbJ&$VL274\6>(9P;!ZtQN9%i0k=bYh[F3!kW//kp9<TIn2/(?Q=mHeG=U.>YEcZgY_M2fCqG-@G?"ho\q(.Kqft3%S)@.b/$KlljeABS7i+t"=3G=F(CXFZ8/=q%di.G<XkLY'Ih.?ET3(F/<c&&8Ig/Vt.)nRlhW>JP,`$<;(F75,8AqZlHAupN48Ec="?*J6XY]NVkd>`37#T\='20MAQn$\:KljZQ%BW9ql:3N^%C*s31AF2CM_M[e)UHSpXs08FIgM7C\@.)2=NArE3Z.Bg>5(2#ZbC+9GO708?ViTFiq;WRFJ234;:Hr[rBp7t\2^`E,%WWGhggc+'Ni]?`UYXmA%$:UtS9UE97WCkULRsIWGRHLha'4XYM:NH\mV=MP=Z("hH,URog2@Bj^++R>j`^$&:eikQ&U2>A8OX8@1%YBFt^*;dE68[Ni^dJKU*`O`s,U1M(HeYO>.5;]eF:t<bNqU[DUZATN3;\<bnp^onj:R+;5X#iH/;4#88a&.1?[W4%e"E@=6F"bO>%!q8:Fh&4Z;rl66cC8s7\Htp*?,JZV2:iYI.@'$-'n[T"V,SW@?Vtn3*H,9lfpUrLl>./uFoP;LaZEnMf9'#gZ?ZSS'B:56ab!JI0%SgG;&bh!V,k:]aRgUYnFe`_._^?4#<coe\`Yik,idlOW1fF+KOB4?aD]*e6d?;j"b%M>T0'ZA'CE(B#T"XT1O`m^fn.]3P(aJiM/%0C9)X(J31'f6V[Bl$#<Vl2B_ODNpZ!Sb9\^o[joc(4-8H:qD*6g7=AJ=`^ZU'u5il-]iq$j%CdL_6EJE\V">6_`AnT`Z@c#(#%-o%L+o:22Zm"34RKV*#m=/<dI1k[i#'2p9W`S,(IYc!V;^aY<?c\BBn@G_R",S?'Y_.AY<>=+IrTQ-8(7Yge)#qKTalC!qG,kLI^p!o%6aBn7TQ,h`UA##>"@!kn#E2lhqM[VhCY3OM@U+O"Nd[j+Cn8dih49[#r$,<%.$"lLQG@7qYO2tW(U)XiX>]?O4LTkEHRNj7M*Z`J%(94ZLms*3t?!n?6G%Xle][L9%UEBB,GP<?SZu5sXHo%*KhHUaX&DuR4iCu,M,bq8!dDO9:O2!Y_mip$B+"m1mjMNU"=J+X]mn3B`%Z[!ICGNSlis2me)0;["&#[c7lM^Pte"/3-d_:ROIW5G4.`BO<,iLcqL?WH%)r\,UVq99:&Z>b'fG/.)6NXp,9.=1AMB9\l$USlXH%Emo[7[IBGPNl?n.CDMC,%jeI^J>e:g:uO,)q3ZLjj0%I,b[CqZCrN+EnM`;+jiJq1>!=]pZ?#D!WGMPWS^FY:ps,]ik,OU!_E!,`%/e08D3ErID*fY?`p!M5Um"e4?=(1^#?9@t&W\h9F?3Xb@9RD]bj$_0%LlJ!onK.=mRNc(\CKiKXnYrtJ<*;cjm/A1"L=Z)&l_%%K%kL6=:k<[;^MjQ\S8_=5If.q[*4KFWRSHb@j-fpH]TR1J5d?kB&S-Q1$:Vo/Zh?ek*eiMZJS]4q>'gKTqmJEXLTL.]g]#T6O<sk^a%@Fn.*_T)8Q=*5FG.HO;[/qZb8S,H2phdt13(T-hRFp4X#X`_=i[^X3s^XaD1/Q]Hn.sSU[KDHN)PhjG>Me#X(7E+QZk\5?>`Bb`T%=:O0ZO$,B&K*m5K;Q;K4FjSk9[V\i<r-fXj6FL=q6!m..TDc@ETUCN[QSr!e6!k,Z/o?6(;<Y6L9g65ej?2Y_g@KRLZZG@nkX@[U%n?_prFW**JgIhYB?.LKSmMnE$cCG1TmdHR,_ONUr\mG5p2_VqVF(<Q^a@o4PcR"oDV2`i's"s1&BS.bShJShg/Ml'FBY+qDmi;Ek%fn^ZKKAOYd<if=3c\-]]]Z$ePP%E!q4f0^L=WE[KG]IGf5&@&OO=hJl%L/2RG5A=)4u?LKPr@^,G3Qt_ciR&7l-?VE$u6pVkU2qs%1HN-i*;!uiRs,nFUiXL2`h5S,k$]@lbggK>h0IA29'>R2+VJr<oOb`8iAtWpFS0qLeoY'\A!skf)=BKq>3/-'V9If1o:X"]F^n7`%Mfm[AfCJdVD:!@dp@+m94Qu#qnb)#'q:TIY^ru?Ff9,B&s4iP"P09Lo.HYp2M`VGqp1O/KY,$:t-ol9^=mPBN]^IoF.!-20EuFWL%RONEpO.?IaKZ:!tq"e1V3F7AIdm&#QRD-hIlC^j8@UkkJ6aa0d#3E9(_A2B/X3B<n3fAWbV.:S^])D5q$2sgbIF.LlCL8*(EYu3d%FR?'t(nlTEmb&gpcp.k*@;Id75$5^2'=1U$.'B[/5FE+;Q$%onHH;\rD1XH"'[EYS$&&)uFT03.IlBlm7^J/.1A6unZCQP9^W1,5%75"R2X.&0)I??2f"dt;L?6=:Gl;Xg-)R#<H;O-RMQU0?ulhq"aIH1%o'25j]<7PGQha-lM[TpNJ%^r*WXmMa@D#5]YfN2q@j0-r@%=%`G;ofM3G>q"9adSI#Q;r#[[S'tF?1&1b$GhI7WS`R:$>-;55dJb<Prj@%N^8jV;pA=Z3X''H<R]:1(p9)I.lhgC:@V^<2m:sZ*%41h)UJ_5,:po87[[nF7uoP<Oaoet;nXuUo1+a3`^8FO1!ILEj1S$$,u9PVJ&ldr<Z/pF!Tbi/Hn=6\Y^m41$*fG.],*co37SNFbV%Xa]lAlIL8sD<pD"a7X4&HeRhr6Yu(U4'ZFS>%cHsbt-RMX&refq`EN#e)=Tef4b+lI&KC`T@gJuYJ6?HZKA>Wlk2b0"n_r5"3WLf%mDlm%$ANlV?)*EokuFOR-T;m7C%docNcC7WF>!0#nRLZ%IEahPP9:@u>-)\2a+&!/hA_^ll?J<3S0n&$leM2_/Zs@jkinIFhn]N3%:&IW#)sHOR3$NX:l>JK#rOXM7f(CU3msRtRD^3rkDaluQXVXLV[m]"`O/^#pM2n0fbFm8fqDjV^K*q>`:4ia;A6;YQIoqVn2\/MC%*S3SSjgEkJD3I8.HVCs'1tE";3d5-R[(WlT@15c0Isk/M#%"\9op(hiA5Mo]kcg1ro3*_u!eC#*f0P8dmkQ<dK4+Ym(gO$MX0;3L%F\i),=E#>rXaf)uKO<5;dJElb*cu<PiAG:kgN?>%;4-])qc_CEW*?L[;7,<(0,5(]r'UA9]:Q%s,;7O7rnJQkNLuQsh>,iPihoCm%WjKhZ8q+pG2D_H3(B-ee>ab^N#GpZU'eW]l)&pUD],U"%n^#$*go_<'4^a.A*=O0>6bUNZe/CP4:s+h&&6t2=Nm(]1'+TLg%&s9F%:'^%a_uth_XgTP"#F;e_Um8%/-PUp<jCbA%df6j7>Kgi$lWgVu^er7SeRs`AOXXYhi6Nt`SP45akYPnX(!!0de@)FY1rGkE(.089%:EY<9GroqB?cnKK#IZ(p::Gdr:Li2R+_-D)WUhm>$3]SJo/(YH&*WeL3dL!j403@Ic*feV@[7alIr#sl`S]5BI/IiCp!K/TNbsIs%U&sBJg&kIVn:qRUD%1kiW!QSo`%YSCEdp]iY"7Vg*kBSuCH([6Z4+;GhKPm!o$`Y,aEtfFecP!Y_pXVo^uBAFb-;W8"!Jc%ZAP6p%XQXpY=qSs4&0(,"NT/F7a:(=^aqatp;:4FDPqPQH^lJ#;M%jIl*u/rUCcVs9qtQUSCsV9:&s%*=gASV?V5Z4qQ7uX&r8CBKe734R%TCU*i\sqV;O[>;6MT!MIe<+HFSQ]Jq`Vp:N(L`PtJWBs<6;H/gd13[-GG[CaChT^;\&]=Ym]PK"VUuHiZE^rG=V`]M]9`F97/$dE%mHBd.Ji_2JZ/2%^G,8[*b',qRI+Kclo:7hlR44P@XPZ`8EOip*Y1XZko,'?%;Tt4+aMi,g`)s0.@lB#"5CcQT&3WZ*YWeNb1j=(k%Thd+lG6ht?K=+CqN\`aF2offobV5U0F`PJ/ZX>^'ZD&U*Mir7/SrT9jH?:b4Po@7a-<H\aM&*prH(<O:P30G1MVg2+UuL!P1@J>i%ijW4%b%V)gSIQ(IlT-?Qb/rVIbG<E:ebOHXFJ^Lt)0>m8o)'ns0C\Nq%?#Ki^BK8gOJcNl!<1-Kn%e3L]B["O74%sXSQQ\b^Nl5h%V7!XVD^T.ZGs2,-&7Vi<'gg+od2%JhcuSVA*mH[IP66"PjCB8M[]sED"m/`<SAG"*XeUL1Ed+-kF6&_1^ink_al3*=\2&:&ZalHu%9_W%00Nl4DPH#P1r&&Taf=-,e++]LiF:Q=%>+Q[&E&J+T6n$:<Qhb;U(d#9Q[YY.L:M#P#n1tZgD>?8\Gd'?!8AO@,7U9!C7g293%Nsg2eFAq`sZRs^;7V\">o=122!H!6K7nE6j"U:>#C1oL6fRih$`Z4O-_B;?DAr#@8q3mO3V2^03J:8EZJ`WIN+Wkgo6NA+"9El*5%%++\?D7cr(&6]Y/?n3c@c\Rr6^QiR6*9!dOm4-[gR'=PB[/0^@3aI,RT`%[CRhu3b!,EX63rt6jd_,HHJ[HVY>C^9rE.1a]8m6D>%i:jLI`>tMVq9^L]fl_cV'!GESYrs@JT?V1CehoebI;H=L?(BpM+^%q$Fs,l2_Y[Zn@J]!5)pj.]!KKP@G\U7%^Bec9\I7MS>CJk]%SSEur":U.M(o9%8KU]UJ^Pr'Rq?6jT0@jbL"YT<`KT5&NP"h[d&o"S=d[@)jPQj1Q#8?d:UN;E/.h5>@VY#8gkn^@G5'*[WDg[+#%]U$#a?0N(3oUuOdltZ#kr0"dM/5,.R7.4@1hZD2=D9Ba0]ABkH-kPsHFG"amdefj@:h^=L'bZi;b`&:F^]G'g;0?cb/3q7QkiV-'%oT*lqbc3_ZXP,S)hnW5XR3,nBELgT=+V409pka9C;8h:UU$XZC1LK%MG@liD](1c?GUmqqQhfddA7V.*2^o$`S5c)t*oGb%XH'*K%g!&f>dsdV@5Z9>I01kQ9htH)3mqJB'S*$K:=`t&e;kcZV(oO$&JHNAj@B3%h-c]2QhI3&i-;TYoc=]Kdl3=l[&e"0u\UsBJB?(f:%C$`^Q5G+'Oj0-O_6lUVErCSmucbdYaa9,g*5Kc[+CE-n_$f89I=,@-G]\j84G.+>;S$eJ70"h=C#$<Z,g(M%/rV2XkHF1_pTB.@;%oWj(^=43/MDGVl#`jhkVO-=\H*%Sn=4D=?;U!6'SXUFg#QZ`]JI%HbY30sM\"*R_[]Pmi&`R)Jf=WY*Nga![f&X#S,.^67K2'5.C%i()!DFS`h1R0i?>h>$K:k8b='XP"(@\Oi1arHOb(Y.^3EV:s8d7j(>U(5LUdkC%eD$QM8QUU[TQG4tf8[@muY82%,"C=e2:(15k2%G9TqLA*]Ja7g/a)_cq%b89..ICVs?up:ZYBFGdnDB>:qE24Ql/(qT52=q%[u2l,Q3`NYuRm<ba;n6FkVg5sOu;\oXcpZ&@b]lg#C%_E@ep;B*42_H4<EC`<OMQT1"9?@=kN3eq;&'t#-T16,eQ$DH(6#>-gLlINqELrJ3+17#'pc4?KENk6=pV=V-"<5DMa=s<%Gg^Uc?%KN;>)I.=bjm]#LA!CUjhY#=-R31\N_C_U<SjLOVgGLD#Pi\P<uT<M+9DEQTH0lab9[d3HGqoQ7Vr]\QMI2B[PEuEAsk'0n(D6YVW%hMi7'$QZ1$cM5Z?PNjVA,QKQE0b_I`%&-55\[tp-Q9O][L"Yp#&)Yf4/2Z<C.=FfP.7.SujSdaKO@c&bLo5YkcU,SOad*lqXMt&Q%YA:D4Qf;12bJ.HA>g^Wc$\VQE6g("+Ve->hSO;QsW0'BDmCb-A6g("+Ve-;hSO9:gQ"(#hTjO,/U%?R&;mQXocCsjTTQA3j>W@Kk%lBsr9B+$>[6g$KYae1Fo(X(mdH"YKT^V>pO3q!J<)S9*8LX%u6%fQ?[Ep,%ZP!/AdC>1%m-gp3lRdE019H^B;i]a2!Ol!tQKA/IO%N,uk$V-b3'Fe"W>qUMLNGbk)=@+Ft";!5@/=0RIIIKq7E.l0UbgeO=*2o@hB_/Nc?`]JuchrF=nbkiBGfD7$Y,P*_SI'7H8EqOdP%-iHeSDW]uLaHbAA$s>sbjBj1Wq33a*EYQIO,QB6EC?"8%80I!R0SnVjZ"q_=F@r[FJp>goI)BZ41T,-Q-G06=.#?.*#FtfH@Vj$6%ck`R#o9/5^]=C#Q:1/(+Q:9EC+:Ge)7H1XVc]'U1RIph$41f"OjF66&55LIGNKOgM=3DGLj7YBVq[ptrgWu2GXL:7*;kI3Jo)iV*%/7U?f+jt-9PP>M*I\he-0F>,"*a*]gQH?86QsHjt?ton!G95CAZYP+S^?OVp-SAP0c$B+<)j[.^HYT!r&r`#'m<&V^HiJ0)boFqE%O_#X0RstY!pV'52ClMg`jh1K9j%GBoji#AdAN?T!lYP5_;55YK`k@RH(?iu-idV'8Go8CG6#:G-kTURZ]aV_QB=?T`gtdD6HI/WX%%b>u=Er!%QB4AT]Efocm,T"UiF-@AW*IP!8bC&C-\/,q\H1U+bMQ='r3sY)hg&%`CG4r!X(`>]fKq!V^m_\2'okG2sHSmMEPq)N$%%&k!n#&bBo5*%L(@'8=5hOb/cgNe6lZ?P'bnW>-,iTp7L/BE[kX_1/+mZiPJR3'ZojUW.SXroZ7%#(6mI;G<8I`"6*=37%>l^/gX%+a)QrU*^g0ZH&!<3Sr]g^jM1BF0o%oa5J!NV6Qd!_`Jp-@ucZUZX;s`";Zs;^m&*pO^V/C+qY]R.3UK#U;]7Q,g=H9o094.+u2&0%aVt1RbXQ-WO-bmJ:`;E%4?^_.q/"O1O4,D6ch*aPFCK%ULlA+DJ%U.s#!*$:SF0K%%F'Aj`Zn],q1oG+U"M5"IrT]=1XH7HJUkO`%^plmFHme(g)[;Mu(/<+p24!d[%`W67di9ma4B-gM14ONhh/HZ+hjhXDaYG4]/5\B'1>BtTFY$0YLZb2los;#Z%^8%\(JGolO"N#G%5'E]n,5Cg[9?\CIGA($b/t?&\oBMW)]8g9]Ht<Z2%t^Bt?;b@3A/G6Q+4[F:hF3<5F78Gd[J@%+5+LSiR5<h<5?$a9&%Bd]A,c)Y%]P),(q/@ZBH+=>?ch"IA:8fe7&#\+&er7+M<okU=4`:I/=[&A!Bdg+.MXo^3,s/#>X=t`VN&$S/2c"WLRLeS3(XnM\<TV-/qdOHt%3d92VaK.l8\$@fPckW./S8VX.3>6Zon3.NMPP<+)r%_l7H4nXc,-b+m'D)p,LOGfnprObcojX!"OFC5la^mWWi-bfY^-om"3qokf%oaJLJ'@5Dt4#87U[soA0@:MXQm[G^GhCS%['@5Ze\2#sqXrOU0nWm[fCj82:FYqe+)Fo&LnJCAc%'JSJ@+()Xp6jsSP(&^0+*'mG%K'+*.B&e=dYfgleDTAhkY6:GD)]En]H<Xl)2B0QNjKi2Re.*@qm.q%hBY@Mmac+`hqQ#Z&;P+i+NV0/qaM<!hlKp&V;P/D=PECb$%X<Jl(o>R$A8B"n9OcbP"pq$aaFKWqIJ*Y\WdT#+ZN/[K^,&miG]N\*8MnT6Hk>LlI;rMgMk2SkUmo/2Xmt+kG.NIQm4("$Fmo/1o%j]=()$KldAdAg.(4E#.?=Xr4>pm=kWm,#o>4MRQ`^tTA>GpPY&\t2oE^Cf>I*m5qn\4(jjCp5G;hq`qV"3B,_rFWZKgFtFM%/\da%E6LedpUQ"<FZV74E^SqKjh8r8DRN@*an7\78eHW9&+s<I7/1M%b\90S#NU`bKCdE0n##VYfP"'=-"Sn(&dXcf#IS"f3SD]ElA+qY%iLt@#00Bq=R;><l+6R^%<^*-KT&:gr=$o\"KmM<!Wt?^p/s_WBVT*#GYC&LEkFJG%dPWh+=d.Zb>N_pHi3O`I:AilRmB$iQo$6[9%P24h`f0Pg&4m/)=(HV#V2V\Lbo,+hS=%n83\QJ]TI-Kis?`Q?C9t:)%l7Wh)*`6,PHT`1c-7m`%2$GPB\,5QY@4,o.r(,9a[q)s<%Nsn)Mn@)JRh4S(u*H\@9q/!YPg@9WQn)DW@d,N_gfbM/hI=Cq@of^%dM]&St];ic4?RhVEIFd.1l;>7`;H%h?qW^q6e7_!FF]KfX%+\Ld))XE]d4hF&RMB2RREbi-lU]$TDU>"1+25rb1:T3!B-LU>)r@E-Sas3a#hVhGsbqFFFDu#a\N%#Xl-/6&+$V-Oq?]t:t'^i6a%qhV'BH'lJHHc3&LqE1?)F#lGN*JI_e&NSJ9H,'57n$*J>l^Rq*JDV&?+7G0`S^cF>e%YXSgp'(3jQ!bNpB,NUj'-4Uh6M#;J(\p=%I_b;SSBGNnR?m"(I[FJRdlGAMob2OE:gX-1AMoflq92?U2P$&i%BM[]c3Z%4Pa,k0/TjF:mqb&21Q!^+VK:IhES,VD17QRB;a$Jm%H"UZUCc\IRMs5]6'kPiSkDZK'S'K&;="D@hF3:=X^"6Tq=e)e^S<T-JLKRV8S^Wh1Cl[%WdlHO<=^TBU75g\MrWp9?1n2d-LNg/Z%FS"B(?:?d.D]lK52Ot)k<gZVE,Kj[&flTtUa<AT=a_X!cbL;tc]p`auV[cDh-EJVbc=sc+oaLc%Zft.(fPUgtAN$)XqO$<gaAU]5%::YIaqW7J)FABVjMN'9U:$7a6kFBZ%9K&HjK![Uq>`@+R8fYXV3f7Lhp!;#p=#[\)ih\Yc7XXQhM,-?rbjK4OXQmJ[0C*(in(%6=%0)WP"'&?k:F<V,uo#*71F08s1P6B#eK=P.2ek*DIa]fJ'T!\6ZP]^JNJLO_X;d`K24hL&<-*rBk6c+)`an=?K=UF-R&KS0tA"-!,%D^rXb&">Wa_&Qe)RXODf2`YZ>Gd5/3(uH[Ns(Cc^9,RB@=0@_LdL\(T*e^!^baks/a\+j>Ve:!q4`n1*1Ns3p'UO(,DC2+Ao[)D<%\Oqn.gt?c+*$;arFRs0jZ@[G+pqpmuoh)1eo.3X;G$F_1"CGYDi!?R1de4pBoGR/m5b6*O_Ze=hP=2unYMmMi3qj<4k*%991CW(M%EVRgO_[Jp,@ttF3,"(#86@Wm;m.J5]hI7EnhUo:"'B,de[P`Eh%HY%U;m(O%Ph>)<)@D:8c?XBdVkKca\`_"\T8%sCr13'F51iP>%hb#XGQer,n^!'^dDTBK;IMPn.N[MHAQJk)%0<,CA-W>9h6^+<%O2P4c[.KbgHSp.`!m4Pf.j0#D`'_PQ'AY?H5JkXG]3IX)2aFph%H`nJ[6tBr]T>sVf/bJ6*8uA6-+)Vap,W!Dgn+!Ro)3!@[WXnXY/!46f>I/5[s+:!K(Ur:m1EVrA-e)J8:3A29cO+OrT`+ff[;)HQ%HCj$]ENR4*Wa<:a1Al0J2\L7@_].2qL'8gk^O5!X2S[]:`naPg7/Gl"jkm36o>7%/CO?:=go6^&X'e;U([`&e.IVKV6k1m3/^K/-%0AO+ocgN5G`;^3hrn`##h$\FUD`,T%Ve*'/6IX5%H>qQUg8?#o1FEb)@Hc?)>MQ9&b^<[lQ#t5'4>is&s7W$7dZ8=Wl$hcPoWs^.%c;V`T0/g9]pKUg@ZmMGEdJPgJHnK>dI_4'HQY+.ffe=G,c*1V;49lJ$ENRo<h`TAT(/&,jhLCs)CGGQ?-F\r<3O.&K!bk?mYceIX%#IiN?/(7ok>j3VmBm[T:>*30;kJMi]bYM_p*I25aqD&IR;2%(RBhXF%L8N-,9r$LI-H?koVu9XNo=9cJF'P2ETD=H.Hf2Rm_Nqj'%ao\i54nj2>gOOFiXnH8B1rm>uVt0X]??2_Z=""!c41agG)D@65$<-Mdp$@t(W^_LM&QRM04O*N9I(.7I^$ruF6MXmWppRES3PHs_%7^)+SK=@c^^WJF&gNWBkC3/,7lNO;588-Th4'$i6P46a,0?o-`Nn2>*;>hNDS,8X7<+UK5/Y.C(GKGVu\0p6pVJg2".[+^`Gg)1X%mN6k49tlQK]-ZE!f`n;I_<SR\6f*7<o#ASTl_*!&c,>B1'&He;&Ft)0XsUaC_i;.e/`Rj;CMK=5)$qBKp5D;Z>A5Da5C5Qmek!:\%b*5ZpC+b-2!3qW)<d8[Y_gD%n[(Iiu%pH^"GVB=j3G'E\95:;OcqCQd"A`o?#6h7](9^A3XD[%lR/Ta,&9#.dTCc-EcSN"UP[Ec7%RCA`/ejkeKoO(QRe0M-k?EbB>L4n6'LoTN!ga?CTq)gQ,Z8fgZF[)h_H>mmJh$cI8&$;/Gr$+Ss.7mR0f3q;&2hg'8Q!`U<pmI*o%?1QUU`_.DUd\^!O+"qbq_>8s5($7`4@R;)%bT0G[IZC)sb">n)BU)(gR`>_/e*X%3kfL9tj_oPW;/8i/>j*)TO"%&O[l_A"caoTq%8h8i[p#q"jKf9D1bJ</.Q3s@SZa!PN"k,TdYmRPkm$fH=F![LJUH)C_qhW)&'UK;Ikn(IfcT)?m3uc9b]Y+"lcV&9JRqS@5&ds`o%D(_(>B&h`ThJ<'f>UZoEp;RYU!A8^*X`7F4O*n3X?H_\@EALnFMiV!ONAtaZ2G-/RB)P8fdL(E`7VS8rDf]J`\?kb2FZ3a6bH:hI%*`q<i"#MjPc7*F>NN*7K1C"3";BrsMM!g,3B=H^-hf@j<Oc8]RQKMIi^(\VY17<TZA#8t2kJ3IJC]6u=lkMURCQ2PqZselPs!AIW%_r').]_m3XWIXTs]Q(l^e(L=9H%)KJDdjjX)UE\?AqA7??I9(4(@02A<L/9igg$ESk*6E@X:/R04-p=BX=??CF>f=8Ct[cQ+q)c$%F_JFQp7!Tu'3BMB!8;AA==aj,D[rG^lMF!cTF:a2EW@+TW%O/836-epgD='J$d_2h3T^=QT7cg#"mE'lgs.B#RK_mX:FE^3Q=K#0%$d`f%TS&<<5Sg$Um[GX1d*YA/d.tnglF2iFrT6PW`?42_bXc%8UO4+[KbZeo([rk1Q@"kB`0LAB8,:@jM>t:[q2d*i-FKR<q=+$L%hlPa]E,pGmDo)/uJ,(MM9N2$?-$e.gA2a$WKC,l=Bs3o+ibg1==8`oWjRRQIDo'&ZIeg.=j3gtI2jEu@5OYP4q`1LlhXtr`9(c3!%-1?T:ht?RN7a/I`b3urkF7Un`nugl$kGs&49)ee$IblG>!hn/WlfUKrCIP-9*FAE.d4`7^f?\eXY-Elght;'6](<MrC@QNH]GIBW%cJZ.(je!U0KKILac2@`V:8VjCn!ULBn+q<N03[D:Gh:8Gd@'@+V;CmoE97"th_/o@RX*N2qreaM9j%C#5He#4[I6@o2=LCD+QqS$%]7(.#a1'"!I\pGac<MsJcf0fMmMW!^^$FjPKhJ6'$JtGs9i#3e<PO'.o"+;^'ZT`E5>0l!'(>[BmF.k\/A#i/"4s(IhY$J(E:'$T%qMTRrSFX,t>,9Seq02f"gQm<Z*p10%kEGY,I+M.e7s'41mhbH_c$<(0pNq;&Gh:98(DH]D5+BIdY+OOn[;HT&4`/sDpTC.__,bUc%G+!RQ]^PHbn+&%0Y+PHhI_)[enm+KKrFWN;"H1"[kE[GD/8pO2r>sDVo,cf[lpK[j>J[Y5T(af5^V+(L>sD[ln[V2XhnA@='%g5l%og=12`OgRTjCNVeDjd]6]/fV#).nmiML-DIcZf?#boA=AIbArD%Qn+k>PL@q?Y/3A^;oE!*ONmLH5>+YM>-c\aMN(bQF$&VrB;*j%`;3O)Y+O!oNj&;A;-(Pg?Ea36KObhdqKX0)EfDM"po^6egPuhL=jE6.X+('-Q<&h;c$>cD="aERT9B[??M.O=ks7'NDi-7)2S[bR%Ie.VL=7NGcG=(YT7fMM]IW"C[r&f>MImRs80dh`6i&cJUrN>%02U!i3olJ-K[XmHh]@M[#c0tMR4)_ZuGQ#1>K6?qU/Wt3P%hE!h%iV_F*`.oYC9D$EjF>gK6AaZ6tmt:ACZpgW7ZQ,_o0k+5iqa7\S852!bW3?F.M1M?XRH/W`dc#I`4$cgdO%.q"Et-XAnQPSTCm.HI%IEAiWk#8C!SfSjtQuIO,fm4VFr93a^FO5A80!9E8naFPBmO-%S50gGQ5LZ.0p=*dInEVY>&lZE-5\TKUr9$uUq7;'?`IuT1SX/[V%-]-6>==jo!\]_2B_tMW[FSf50S;BHhiQh>_D)NRPriF^):VP8j]t6Sn0\l\RQ%),q9OBhb]0/72hW2Rc.J3UaF;1-lDL_m@%%]Lo%Jm+>lH#R'(\lhZo?SZEPa3RJ%O5J5:V;+Y&.D<3NRBj2B3?#R[iR'W-HSjT(Od]dbq,l)Z!UJ/3AGe@%=-[q$_7S^!A0<]I57R+m%3G$*2L04">G9<ig9"&js7.XT3!YXCSSA)8%SSY0LC]bFR<?O]F!=PK8NCNj.RVf1XQ%"H,gR['<bsVG;ZTh'J[Q*5U]$Y;s[5!m;%=A'-0S&U3")4jnkmAi7(CY;V!*b%#hD()LqX=!hk`]gW6>2G(;Rc:HHV1DaT_1B<O=ZMR1q.\f]e@?e7B]br1QZpk\^:g+0:A0](%a`2[:UhkG/MROK&"i/\R./.WIT!B)FXU4s]r+Op7k;1"loLm2'`qu+HDKTear0Pl]p3TUVB2<D`?_bT0]*eOh"kS&,9\PJ'\,JY*%*tchU8P[-I)W>g*-#lgVChpf<0SpbO7-$Q0.IWA"?ehni58ll)IZ+tk(4.%;TD=/kY`p[R\^M77>@F7[=D1kF=,r<nf_4JYR4*GB%M3pLUPD9&[8j3AElDJC(V14AlgUtTJrBo$2@@7)A5Hq!qjkLAY(S'k0A[%KkFh"DN5Dtr1IgBoi6\;shaAt2T%'"tT[Lt7`pjiT?%2#(N1LR7f!KrK"!q%6':?BCZKYYo78:92eN6m7^pNbuc0=fdk+XJKjDFa/RI]26+V?!NS20p?d!"/-aSgg["D2Ru@`5jQ0+2a`O^%*+jA6P[3)6^<H6_+$8.Zlb-I]3Ej$M85`7'bZc)h-a,>H74P,sdOFT1Xg$Q<lFoI6S2dKbG08,AWK0:mHSsXG(*D6f#$8kaPfu9d%?S_Fp,KV^_q\NQ`[(9X1Sgtf'3mla&#q3@$736U1D,Oko>J)'?T_XQ8[,&$fkptU'bqQq?4T/jAJQA&FAJ"o'Ip)u*\s)>-!7K3V%K5g?=GC#d;oL>3b03*$]-;gBM!;?/.[j`osA5h7D/DN]_>=NJ&o&AJ,PS-XWmUaTf^Xa(?mWr`.hc.<;$klBpMlj0)Ks3^#d7aUs%n>?g@Qt2+N)>l92"krut5h8hil.C642E-Gc8qIm.G_RJ0>\^_FP!GAEP&q"j<#D/u[S4%/4Gt'g#Esc^2TGCHFAC\d*"gALFETg(%WFa[41>5=:/-S62PD/&1!Q-/nWXL+1:C_74!-pg'K@[iY3>Do,pB)TaETp8%1ZDCb-#`K.!!e6e6-+<uXCbkt^'.$OM;jF!BY9k.%fjT:<QC9";-qd9KjfMSK`+0:?ZF*8K9KE05%+T,L>mNORKM]d>1[S#R0H0<hG0F-Y4R'Kp5;gXg0!*k"L06r%jB<t@=WeaC./U-K%R4`MO;\s97Y0?1^*5WukN@HDOFAoJlE*Xa]RI%rA#DAt^ZC;q67Nck=8p8PX;1<S)n#c4#H,S_fB."J[8$E:3]Tkcc1S,W,B<9^l%4!MI&Tas?]Y0Y=i&jV\VQ\7$nP63,4H7d"Zj+qUTbstG!NFSLBm!T2/PbU/YjJ6k[kDQ+5&N-;]?S6>qh4a>S=Ni)^BH:C*Mg7VD%a+\fqj<_4e=U.:%-`^s!!pu^9^=',DgD(KD_g900hD?HkT@<-O0WUY3QVX:DKed%CJ+m*8p\r*VhIKFt&bk^L3)%pN[KUA`E;N%V%\fXSW8@'X:Ao;f2=pKnoXTO?lUu)i<H5GH))uqX`Z^A;DCXH^\c]>&fO(FVsSPD4h!-9!G+bo]Z1W6A*Lr)4<g7u482&fUC%"1S#%\<5nDRsQmA*9J-J*ZKPF2njRUWk:Q&03<26:^Es@;b^'u&[bs0%r9\$ggPdKfQ`\*J,\]R<kMCcI5@*p15FuqD1B^j5FHuCr+@mu%C]<oohDbK1Z%&F<\K]TcQb-mka@*`?KZ1V-4:ecsT<PhlT\KAPp^)k*$2Q%Xp^)k*$2!lJ@Xc2R?@qTJ/Dqm,mNnen<X\^0MgGb]%?haqcHO6pBL&D.h?37,h;3-c(B>>;)/]:+\CO"Q7WW0W;6]n^gJ$l&W*7,1-(W6nH%-`:,]Ic$trI\P`WMC.R,_11o7]gZF(m>D-%Xq6)A&sh!,.o*%!n/V`-maP7%:UJSl^kU,R*9%Q__8;+\[R[33P^u7TK[I_/0^Wg=X[;h+9pQB'M_F<XXXlha+1HAFJ)JXN6C0aZ%YgVZ8Y.*7@&YU6OC"E,@X&jV@'LQ;5hVTJ?#]`k.fJ&&"rkA[==dGJKS5P#JnoEIMN6XrLO)@0!$g\(\fcufrm^EFt;5[@]r+f1I%[&2`OrZmj@-F6eLUSF&Ukd1Q]:6<?b9fCft5Y"m7l-/ZkbO-CIbegtiri0d>mPbLAbl**,Di`Q:&\bQc(/JgT#!s/;gfk//fTW_q%kFX:&ZU?An)VK3@W4`4(V4ET4B9\l$USlXH)d<mV>jO>+5N$%/(%@qJ@QIIJN.*tQhTiV]q':"uK0NR[U*\;sQ=m-hh-R'1D@8s<%-]?`)/kp=;GAFIQQf;38o_*/S*,hpZiREL`h6hKnYJL(E?Ig=VhSEC.J+9l]D']m$Gf\rFP?mt/,a0G$,ier@6%UeIc,So?'4D?C%Y'X#eEaK-l`AQe+)WRG]NVt?]qQDU32rp_SK8XF*;N*ZIPcaM5"SH]@L.T;["fGmudqE"m)oQT'%-%HKN^1\D%hh<H+'&oZ%ouF[%A/Y0J`Wu,)j`H0cY/\P]Zcec8_+\Id/=5A9#P&ijPZ<pIE%7J9."e6N8rtT2F4`G@G@RAG*<9e]Po.'^$e9^n.'EB!;iPL+eHDj>%/pVt30,`hs(B/%.T6IYHi#M5DW2A9B7+AI%r=QjkN07gtFbnkG-cd]`0#a`34"l`jr23LTch10T.200&e=s-A40tOseb1np^WWG#%?Qc_5*j6HV8*P=aS^1V\mCq[Hjca,]T'bDJ9=h-B\]:6W9#$M>>usrlFl#r(B)FQf#,sFYVn..FNAWiN';</ZlSihSMsQq5RYApJ%n.j_D\Hc$d40kcbHEhnPQ0m++n/U+FEqU&63<s@b:"PL$.r2E2@GQM%2skEW.<,;N9^Sb;;`7<Z><<`.?4GFWNM!^mU'b>H5h1#7%2@1V%7?0#*<$G:_K"FPPN9]r)D/MGAp'c*f;7+./0lia)!EQLQ2b?i8U`2rsaYjjJ\Q_1>3f$I]'U1lTJ+1?5N$8@Z*QVV]R=kV&%S:gd=WJk$*#Pg@0S@OF@6]Li$P'S)UbQI[<P(3AO[V\nBM=6\WQje)"@OW;5J5+EfQf!$7-0L]fR[c6i@`6/T-tkj@`s;i'STQZ$%M'e&ooU[\BE7?9s)ictl13IR.'MFfV:ZBeC>ef\@osi\_6elLq*&i6&NbrblVRUhVZj#<&]7<gQ(R;+[Gn3c^g=GmD7U0G9**sD8%Q<#;h^Ckiq;D/-*`NFZg+#TcI=!jG^YYi0m=NkS,-N%^K@`Y+6MoK33DlE*,QNp9g78n-?oSS(aQki(6&Gl($Q?e\KKfgPd>.+t#%jS9r(e1V-'$d47$l5!uR[rm.W#5Gb6&Ms.2eD/`&P<i2:?r5h8"VKgl60F=H@c%D7n.h99_OK8k)Tr9GaItQ=3FFDj433;'KeF1;%/N:]q5AHTtI(E\fk$WmFmE&]@[eAuQYa-?(?>$@i]71sr<'/cZ75!.2XL\&gO)[\UqG?']hIe=9pFUI2q^7r?mS,*<9$`bqbn`R^%G]FWir?8_?j<cJPD`#Qn0DaRAP2hsKMp(s81!+PGp>9VJdlV__s(7H77ffC_he\G\67_BL_^#IZ7\fn=Cm%^)2E&T$8,_GY_<YTX%(T$5V)naSogUh2_BUK<9+5=CQ%^XppYE/'VmEG=_Ih)V=A7D(m[FfDe@mklE#YM6\P:=r&OnbC2I!#89`]p"kJ.48"2MhCmJ,,b=%i;[km#_.b7=D\8ZUhW_^"KVJdkV\bK9a]_-Uc[d!7fNV?=EJaj]fmnKdm713($b2k__;tj'l(Xa#f`]I@=kZ`-CBMeh>J@mk3-np%Ehl\tmPm?VB`&6ZA%@gb5F0\D=;m,Z+/?ZZhtAotF*6)KZJ%-T^,sdD&#3]U7Kk2#%kp<GIp_^2;ZH&.TZn7@rW@Wi_iI#YoQO+;%Sd$:/R:$t\]aXCN.\Xp'(Q<F@S4GAd*;h]0nn]elo6dcW0&r`1UTg_*cVc/=3(6euI#:Lk"HaCp&qY]]>_3QP'UC-RL?H*T/&8'9%KHNPmcQlU^&tkPTOEjm"7D-jL_>=59aO#I&9nh,J^^(61V/We<Q?aW%YY9Y47=e2dV=7CPYCOF*P_>9WKcEbrO=%2(JqHYT_RP7A%83@UF&f;SiqFtrL&$s/?M1N4X3CQJpS:^Fl/&OY9/sT&)6rjX%%/aLXKO'I2LnZ/';he!p.9<,B'mWr6V85PFR5MhUh?i]%5grsH%&;A(P.R$,U@\4:*i'gck#Q\=jcoi)#$!-!bL/9-%/1H_pXFsD8HjBeG_D7Jh,7"DqJr!(>,))0#Hr;p3Q8]Pq(^cbj;N0=3L*c<r%T27q<V'R\1it.*88APYsYS%1C67B&F/V4j5YW>1AaRN@X.L?-[J\[E]$;W!"6;%WH,qsin7Nb,b)D'+f<$[8+8PqIq<%m=O"L"VO%$5aB+Ki$c;g*2HG+k9s@TLG52clL>;A/,]76s(Bn)G*fg85E@+"7?^?/CY=m;]u=T_C4P5/E164oET3K6]8]-^(a#/KsH5JS&O\V%TUPs?k$agd+<a:,@O5Q>DbHc(OPul@!"gk-B5oIR'["KZPm#8\k/&U%%BCV'=eGjC`<DAA(naMA*se9I=l^,8#U(MP49[VdV1>B#%,>V>B3.bi`%)YX<n.9t6mXW8t&o/[+A-GQ%pkFND$Km.K,k*#O-3I2N5emH:N?q7$7'H*1D`S7t,)h53!8\Gu2@;2en0G<,!_#qB%8RVqL:uW>1V#Y>6Ugu%;OVh2\#QdF/?tqgr+X/t/3Y_r=Or*%$O<G3#)@Kpr&.VLW!(`$h)Sd'uoAF1r+Jqg75Z<1AcQG/VTthf`%Lcdqj=6l[_,)@*;=&5^q<%%`gYt.GXUn4(V*8pC56(nnq$3Bpl"B-'r?nLG`/4rJ@76UeVKLI$-O>:c)!$.J+`@-6ua@ecVX@V7p%-:A0OjWtZF5`,hX?jg*]l^'SmT`WdIABI/%=<b%A+L!gt^%VQ&OFr6Y=KcISb5n7==d4O#,*6q&?'nKFgkTBq3%'_?$VUmN5sQe)%873D>,R@5m'B2g07/R,bJS7=\Ru;NB5\Ysko"\-bf;L#n5752I&kGZk2BfoX4R+gi3XB6P>R1b5!-PPGQiP$ukbpO"YGs-(J:L4r%P!E`86&PXgF=\oI9X2Tn..]\\Z&Bf'KEKOCD6"k;LH\*0A1J4s!5'VPj?b^reWQRs7\8X?jX$SP,YAa$Wut$..0;dZ<6Go:"C_q@%LB%r@$1`s`:t.aITGdqTk[7d)>TXYOJgR<^PeEq,&CtlZ#ROEQQ]N(M2\s5#,"5ZB8<&SDK*!F;">L3I5dVd^;<2GJ!-CZ@!ug)c%[2R(A3%QOOU3ZgKOoc&9%sVPk#.h07&HOEaFqdcs\24r+:aj,dJ:f8$1G"n$,(PPZ=DEIZ0Fo!;PSPr62&fN9M^#s--0>3k,uFft%F"%iR/2/Ti(W]TVWJ!?%?u6KE,K$J^!2h6>A4E]&QU!n\Cg\+5<(d2kV0'PI^b:g?8]n#t,aP);TVLcs]d638<ZtC3Ba$^-J-;n>%YY8X04sIdq'4k1VUgt#ZY\[.@`%[se8ce3G#'GZr/ej6j-t63(5`1BQKSb6M!!tt!6#1Lk.T#%W(**He,7"8tJj).$IR"UiFEJ%U%-rHLj$?-S8<R!cED*J3+%Zs1$AlTL:Ob%80nGp%-b#TpaG\/sN\tpZ]PQI`_L%.QiJ_^QIKdC,!b1(Nu"U"jlYq2/j5a`VU5'%='%0f!^M+JBnl'\1c.!?hGi8Kcuf<([=FJuVR8)h^)$$B,kdK@/a;_\/itq$%N_L^u2)YT?pW_&64)q8tJSDPIK+b,F?FF#@I$)PIEZ%9S)^K>!sbP,mgf=U8YGO$56C#7Uj^^MgaBMjVJUDUXqf-h,%gCN0@]gOigf<pH4=1&ZmFT)$%qj8,,U7$S:9O'HU'g<\-hL9G@L5%+t1tU6c:GgV)Vq4JpmpsVPs/51hNch$,i"$0V#+=6MRF626.2`<ri"/-EO-ZKJA^a,be?&G\R81n3E*;fDrg[MCkD,(Q](K%=*fa%N!+4ST0u6ibT_SP,%3VW%Q9TH-7B7^!9m9Y.2ptM0P`oc9.7mc[7!>"`pS($e"KT(6QN%ZaIs4WjgUDIdt>J]U<gmt+9A]QMO;U1%j$5Jq[>eal6rj>E,%=(%F[M'Wb5ik1-n\a_dE"StB^`@%.<7H!^HcrdaCkkt2+7_',&dTkXiRc+PbLSt[C%8\eR(^IUd1kO^q)'s%O*YF]V`:E0:udH@i<)p#PadKoJ^qq0/<WCXAiLj.UkgjA'VZpaGo>/7d27QFc[ZLk5ZE=1`Db_JUBM/n601UZ!9+SB0O+geiX"k%%77pA\P?2n%<eq=6=:<]r1+4n''PaAb>9\Aki77n63Ru&@M1fV0i%h#R^-TMbE_t,3:c+@J73umR-pl:aMSYR.21Vr4NQ_M#![P!\%1*TTo8?-)b6ie.`5nX'uPb;b:(+"nfUPVLB3J8bN-u:B.W"rC\`M;fGVN;MUW#SeK3&O^/"#RjM6MFOaVZLh>)BU(95Z9t26:_O+%(9g/b$DW]MI40TGUenoTKVbIY)&MWS:*TcW!D@u1X`r%f&4%'5rUU5QiPIQ$AKoD8&Ldc"22'$fj9-(^@,tT[ll`*&6m^"hnSs*n%5cdnT%!%V5=R,>T<j=*W&d/H61F6K:+Bg,K]#MY?;KF,2=pJ7CZoLr08*goa-3@m*5YqprS4"51/-qQ/+sQ,`oQ/Aiq29>BaHTO%%_'6-QAu$t=Lm!E!dTef")[F4r'WW^aYn4nk6/VdY9@VT`:J!ql#i^D,8[M%J'K#_6#sESiD.6RU;ZNaI.r*NIdKe\OC^Yh^i!tI+%85$a6MYQIe6j]A@W!74=#Qsut</TpO4PCJn'NWaNb1d&J.FOMA4+tV05QeI4&-YSa3!s47$2$JTXY#jm'Y"@8+f5692TlZ0'N^d`%M9Ug1)H$Zh$&gK:/IUbE@M,Xs4';9b.EFbWdtV6MMZe4'CT6hE/ko4q>[kLB@$Y>"'o]#VH-k]`$6XO>`G$LrLK._f.>B^&-Sm1G%9a.X!ps3?UEgB<A2=q>J:aV;>XbbVNYQFH:AL`L4g#1'g+<6u1$'%'63%ls46o>O2RL>Pc)hNR7L<a1L+CUBg=cjnd;['("`hE3\%qQCg!6*YFZG]P@a>H<INnC3T:dLOEu]VqM.4:<Q+F$W8?$S<[ije<$D!UDSdKgc%S<"Kg;,9ipS6+R0VEG2[/WamJhRERD8\hsL&%jgq+(<k*c%;'b"W%'W<3G)RcQd8U+L&=16)VBT\'@Xp5QRd3Q/$rEQlTiR)1_)&ZM@aPQ#qiYO_G>k5-hTK)iK\0ZVkQtD33!F/U%!f`S&ZA]E`9:=u^44>Os@imBO_O"9A5J[W4PRR-GW614L66hd/ne[r"M`@M"7<P4^1+!o`*2=um#1j!Z6B+r$%;<]#-q&UdN._N=%Ro6.Y2aqZgOVi8AkQfUiq+V<,PX9sIo+[?u$!7=b1J:apdf:AC-9"446;?GR)H@ml6NilH%!!&D!Xg6o+MLa:Ae@YV"r&,X'UPPJ%$<XJtJl.Q<Z"Qf4l3QNt)U<sZn5]k/#q.=GI%_+:+;-=6ISuXK6X!$n!hh.r65b^2-EHYX1(gm<A;h-6a,RU]&trSfVA[ZY"AP$6%3E@ld"%&^4!6T@ZGY#G3=:/'0WaXI&*6?;I<QZkIoLT@/>1&@`%_86hTf(:SDru(.&I)L?-?7sCB&F`R5dZGa%#@:8SOt2-D*q;2%#Y[[Plsp\N:I0/6gg-T6JEf]oM5FJS<-8M+9OoIgX.0A,N(sANWOA(p1*m*s8V93q4+KX2D(Fn@TYQjY:8^pZZK;e(8Z9+r(K"2R%Ef+>/-_W5+e.EDApd#/8NU\H`CqH@_@;o_/Pq^bq/,lsk$=k2X'&j!c&nr3iR8mr,&fi>J"B1^V5tki=+?C.:17&$jJk:M>BNdY%%=??SJ,2khZn/VlT"3_OKKEm&d3#&7JY0ck5a=7H#(,1A\IiaSE)1eWL[)cj33hTL]4a715:ssbaOj$6J;da\g6[hKJ/;_CaFHpYT%JRtM$`JZk+-+Heqn/=\o.%/4WE+61\+oq\11;0fK["4?bb9.4J-oft'oYM<rV6"J`KLoS,$Y0,Z;$sgF&d%/\A>A'=8eB(B`fS0!%C+u$n;hQ=M!V)P8=<`\)=@S^0Iu2*h"=p0:BRg@;bBclo#$bd)Yo7itn-\RuU^5OKWIk!B%cB5QL^)O3=LAjK<#o?i&.]*8iX-ET%`:1hP)8c`eO:_ZA=pPb4"8.Y-/;Ci__)`.s5)mWC(BQjPL.S!W=uM=Q5qIBcm?LQm_MWHM`)N\=?3$ka)8ZL$Kgp,;FP%9Tf`jc]%T!;'_0>oPXMU=[:E=?OkEXef<ej9I3J.>^j7+XaG`sQ_HM4BhJPSBri1Y!=R"u<D?q"pQbD.Z\m&aVb)82_<+8td,>+WK57^s)og%i_5%W%:<TgpbEgmJRj-sPgi#hOp$u=Z4uRsqL>'LgWgm4G3/H$HjAL6O8tUekJPN/<#Q\WB\5!iN;?.[;f,[AWb&Oo2<_MnY2@rq%R30Pj%"(q.A2*VIVhcAjYh%O3Z_(l[?0?Z.n$2$X5I^XP_>A%[acpQ:E1(M2qSi-dI\*grNB_'j*qApWSsT!G]As_$Ak2'mJ%Weh%]Bh#ojff*1N*f+j??+Zl:Cc"NRk.P)oAcKaqVE36]%eYB.QF'f_f]9qcYK#-^W-8:KD4%5;<9gOhrRh/AK<"n[$_-A=at3Hc/@)j%gU2Dko(lk5$[D]K*:]=Y^7s63F-kdt?=*K]%,^ZfWu1Hq]RC;r$U*\&(qb<^;!Z#l18Jc3-KLD4%,-cnTX#3^fO[`dO8I=lMH.Nh%BMb*t`Vgk_AbDIFf6an_d[28@XBbG>^2nSW*;IFfCY,1.#_+i4j5@HXV;D0q*@]h.4ONKOIl&QPC'1Hp`$1?6@B`-<kk3?rhQdU\%25BI+$bdebl4\YVnG2:okPar/4_;(eR.[4Qeh20Pk&5(`1\P#Lce5M0s-d-;gAcW9Bc9Hd;oLHG=5="EJ6uVm8k`JK&k+US2],LR%dT(a6lpL68ebAs>YE[THA9a,Mb/=)*8Dq1:P&dN9cCVj<kbD)F?TWJe'kaIEn-jaD_1V!O<Hmg;(\9S'F/O]=hi%/7S;Ab71JWO=%Vtepq*;hLrr?8n(H4<W7j-A(ng0T@#20:hcSZH-,qf"-le-M;'&L<X^+F`Vk_*i0DX0-R[hl[of'gHOa4r>fuMg=&1Y>-KZk_]i8%b>k3eBeMs_e`tmhJm`mWOZHE1F3TqV1TB7dm6.7$YC!<ncL)SE*kY`-e_@f7le-&R%pndAVK1tgNJ9ttktZDimiao_ZO>*!HCNme%<i,Ern&4<!Kc:_?IqAcT<SpU':0fP\0k:scj9fdahI&RhQiHk;PBJmG7=<KeNpK1=,'A/^/gVTlaO#:rSZsiOZ"FAaE^"rS=)_5U%B7G;upX$6$4>ZcQK?qYN7tp?J74p6qeSf?fN88[?Fm`b4hM^Q!Z6(VG/Bm""lInJc./kQ[>o"n][>4'Co'>_/U<d[F@$h(K;fO%G%T=]kX;n1E/3h`7.dhZ86]\5bSr>?550\M]'"s!bfm@TuI1C>T5oV<C@['m'/ZKj$,fO:r5ZR@P5)rgSV?@n;]jXu=DKPa@.MC7"_%\UY<(f1r"E?/9*LHb-qG89"=FWR'K6.T*+pQhOYWjlttu>0cq$Uf1>gX8B,d+r0j>9E:C8%97lJP7"IY:&m+N`)7oDG*Z[*PGe!Z%#i2*i*5Y[oa\I"D(6h@8L;SE+pSp>]IUAT925J8`XsC]@dp:YlSS74Eo\)0/K>k&HQ,"0>2grXh]00+V:%>?,)LUgc)Q".=d%^(t%bh`,BdH_UiWlb&0:!u@H]sE0@Oh!XrYIN("k4j6Cmt#8jaDoS6Hj7&%=C63sp"nE[M]poGbZ(aFjU]C;YH"0VbT'J/:F3u`iON2(%H9HXK"D93kBc:;"CTOkgpkHPrfC'6)cB?af=335RiBVXq<-QAQVtMuk>H*a^_#eO*V5eC+#l6;TYJJsg^!;)ne8q&49YH0u/+pL@%*tR3dDQE'Z56ccZF<TRR24q.?Fa_PaRGlaJHOTWBmnp8iQ1J/0gD0PG4fHT<UZnIu`>mp-6#Bo>qaSaDRklJNApJ`$)I-,Tq!m;.%;lH-g5<dL<>>dWhTC9U/)NYn5j%g.KV[MAR0uarY"1R:-rB,_93u;-*jOH2AbPofQD$[f.ju4s".;g2VEq#JQ5PRKk2q;TnXrkF5%C[dpc]g`>Ia0LdB*3*tbn3O@^ln`f_TjOb=c84RLHs\:5)L/3)H#861S&+9ibDoE\rY'q1ksL<b@nY+$ZtlKr^U^+d&@`@VBW<<u%S!@5kAbK&Qp0M[s2>4[h^&IQHidD=qiOCoH1>$<3OSui5WRTceH*lfDh3D))nsoY8aaielA+Uo-rjRGUG.X<!'"@iYHg^J%.I`50%V@rhL'%+I!@p-&#HfVd1AUF@`gLZW$OD5/#_g2Nj%7Y$L8^MesWaPgJ_:A+&%B5js?G=+6';h\t,0l64,;*:cIiiomj"nG+hr"&&%kPH0+Qtk68Z^=T7qrP_'\4fis?^uT\,La&sWM"ZK[E,E7iKrA2@4cU5fnL01Zc0X"r=%p>/n;-/GTR0>h/8L,,WDaB-(X,FcJWGL%<Qs[:;eWZ+S#No0>ak)Qr;CsjU15"u@drq)Q>@U"lJ\+*ocUN+K^p34Crd)>FE_N\O_e#.<T_KF+5Ofc?R&]u`:=i:m%EqJ*;-u2%("h[kI$CgXj]0M/DYi5Jk7uLsoo2+[&)L?7$4ufGZpQ_KS#u6!]2MD'VAbNj*a?Ys+N;C$dU3pNV:njWE+FSirktImJN`+UVgf[K%(V2CrmlMF?l[HA8+,jq2RB:LH_17PmnJX5XOZdE<&U3I`XB+!='Tf1=THho-&)Kb[r'?e3:C\GX24KaCjeHlQPnp"jK6-W&H[W0^%m+8.`9p]K*Hp<CVPbFIi/Z&^@rA)rj>>g'g&qdbug#Xkp*h5aun_cG+bE%,D:CR50T59OeWtoI-TOUk(3r-rHW!c(LUhY9:'l#q#%87,(n:BCJ#I\*4o"n9!h76l)Nk;?N\o<X17@Fls.;ahgDj2Qe^n!c+uD)[2=rnB:XJ4N[X5$,Z#iD5i0EXc;4WcP0kZ2eA93_s1l%1j#D>g!FT,3jpImfAi^q;_Kp7f1S&XX05GB([DZ`H+i*tEq,f""Gj[]1j]edR"cBl)f8?:;%TUAAVKt<7p8D1f'kTi%/=G2?(QKK%2kC,6/oY*X>csb-5Z.$^<GDLtRk?<A>tKKgja+*&<KpO9E2Fd.(tYb#*s@N0EnV@fEa/\T^@j,n]>Z4Ol!t]B+kkBfG]`FHQSEEK%$B5V$3e#%ZC_)k"BNWOfZB&]V!YZ9h2J*V?_hBqs.$I`R:OZ,#-I#>/)=f;XrG]5IHmh?Z6q1hpi-sOc;LW6sJaUl81.Ws37:(Jl%HS!+Z'k"eSme%"j\GgmMPB*VR^-(TN:r"l?ON;G,[FZ:>Z\JX(rL2cs.h]DZhUGQ;JQrWN9K#e4_83*Gc,+B!KY2eOBueh%01tVs%*NrVD$8)ik.j\871]_7`1FPUE50dH;Ds_OrIQ60&X4(:fQ@1sY#n>$;&E+lW@b4SU_?gId\7(L4&n"KEehIXI=a:T&MZS\>Q:(!6%Fj[2T(%2X.-+H-eC8%5@.W@5s#I?&=aCTNbC7[D4<h7qhK>D@:'XY[71)r%e[OK#Ap$/l]@84Np1jCDc`<KU8hLBEfV6O)!=>RJ-%B==31es5q-6.PZI6Yr"hHlgA:*:IEJP76O^P)W3O,-e?0raK8H<gt7LB?572/;)'iEO%el@)t+n7@DtD-C\h,D50A*#+]boq@%3_%[Z#*J5oUW>"N-shW\?H?Ooh"&#,1<p>&a`Hl+"q&g^N/i0iYSuU[m;`GG!%<CFIc^om4a7E%7Q\4p!$*SZ6N:5bh!\7UPehQ4>cA%YQN^N;gK@nAmUK:%cF*W'`q"R\lT8,KfoU7lj5'1P:0XA_3"/<n7%U:G6q3U)f*2W;,.@Y"SO<%8b`3Ep+<$kT:m=m$CuK'cee6X%]t+=ghjP'9r*?Fn1"g/[:fFd1^aXU[ohkirhRGY0a%bW*&!8lfOZu4bbc`aPO)8`/7D`?b/!bGog$K"K!kSIrY9!s]=W)GB)C-CU%$>FB]3S,M\a*S7q1Y?[`9I+<%S0C,:oVQa?.]W.On*5>?+Ld%2bM<`ZCG?.&q%^YUPL._8Fn>Gne`!#oe]cDWgMM84QIp\BGtAG8%6M:.Q*-ZZH,C;;mb5NnQ46m5h*BZ%'9/L'2\J:^<G(2e&2,nI"_MF9/*jWX>Vgq9.k!`SM/*;PW^<[h`eMG04'sPSPO"%3O"kM$;%H[l%2Vr<Ok$?1ReAKLl',N5^Vk\&+rE\cKYX+?>5`,9m&]cEt&rYmBb)UrpSpV7Y"Z*r]tC'4l&2ck@niC3+KG`UlRXQ)R'1EqIJ%Tp-)2QlT8+c6*V\Xa;hF-X!$]-1'T3<IOPF>$Q3$PGePnE97K4^+p5[#[Q:VU:bj`Op@-pB!$^eg)rk*"MuEm8VjAgDPfP0fHIE6%1P6Fn?QWB;:pA2#e89RM@E/,e1T89eFZ>8b1&';KLfm-]Pg>aX.cb!hnRI>(Ub,usG$ag60tX_9<4cjKbKQ2a]7E%'?36b^T)>]g%QoW\0^iCYccq=q.^tHj7kF+cL6D^IZZh.i9?HufW6'IMC'CN@&^sLt7TR,b%LUGK`2`)+3cNJo0VP2q<?i*eSG+QI:oKR+CTL5E4%7%RCo8H8`"RZb*ZU<M6K=u6)LZDS"T3[cpX070*mnb%=-@T2ZT$5C1p;ksDN,!nBTW?.5`'d_&T_f]b'MAhBNk42*ch!!8Wk-@ZW%kB#n^L2D&@8,eB!@J/9I.pK'J@dBk=,W9`ZW!d%/W.h=^XjfW2qliRs,9'7L0Bo0n\BbE`"Ws$bf"X9[Lnc)KO\RsF*r,u(\TM-u%LXQfq=ADtmTm:Ns!"RKqKJX\2CA15$+tX4O/c/Gt".Fq?cXfcqSrNO+EdGXU$Zd^L6EY<1,$=>@[&RZhA%B%j?EXUcQ\MQe&?$3N%+g/UM8Vp`N$5J=dW&1#8-+ZK,.3DJ0U#q/,]nXrq<>Ys:Nb,p0Qa!BgL_OK"kX*#q7@LY\fAh(YWmnmih'&]4jMMWVp9<;=ZJc$L%[0rhI7?\TXdVNoD=dPb-ChAd6l!$IhpQrGY2?n/T1_cag^&07+e&dqhq)J!@b]jTf-d<3(/p0[$l_ApD5dbM&4P,$U0La'<jGrHl%]E-@YCEX;q7@81BEEQ0=onL(9?UVTN&@42!#+\%:;0[@U`LD2+GU^8H_pD3q<5PiSpc^F7<?BM`\pmE(hC^l?g5sDj.W93oBH[J?%/1C,D0pR\I.SOJrKSF4=qSOLeV,L;s]Y(3HC(1c:-?uLl"=?U)7FFJ+7D!L*HJ(Wi]se[betr^J.MKcF4M#['!@?fGcLhT]p,d`\%1C!H<hO\_@(qRp`+YIudks!8hs2^"c9X69!5FL9G&6^)p3F'MNA)4%pZQ<GV8^YXH=lt0-:&)aC!^YH4RGl*Q*cGc;lFhsP0/o4c%VUk3C(Z)>ccp^Thde$.hKrSr@(o`[2_U1*S7%fDQ0uo63WS[)ENoPD.BcK]26;CI3=iR7Op.U_!JhsKb0leG_nb2nYepXmflflWT%L>Y7u#d*Zffn(nO1'^"gSS@Zc"ahY^[;3"=chC[1!X(<#)qf$E+bU3eJ))_s+bOWpH5_Po"Q!lS0@W8!kbp>$?dWF%9WT!D5[\IM%[he&tKopG*-Wm"!Ea"=/CRhmMC<tT)c!V-,_Ml)NS)oW3?J?k_HUB1>1-Kb=SdY3"%dV"C+$;(,XB\q&_!AsVRjDI*H?_O:)Cg2-%4V4t=9#FNZo*g4rVr:3'3jV-7Uh6gFb74pkokdb;N^*GBnN_uuq%Q,;Pd$p7_.r3K<V^Soo("il.L)]!8Q9_$Zc1EGd]g:*WMq*(%T:B[Bb>]ak(dochBM+NuZVP:*jY!f9OaF@N'A%p-:Ad98R`%8\r!$J+%<AYb]Y$PXYlo(T7bs<U!g=q[J9#ImWs8V1#;N[1CN)9W%;j5acR%bi'#BkKSls4Kh21$PlmoZVVH8-V9BpqJHWoCa5SN?$u<HhE=;b,%aGrMOh2&$B0,1S,qGn%l6ni(uVSIDd'>u7@T"Ab-p%!+n[qal?O-FX3>BCCgT;-d?fC::b?mBC6d^-lI<e0?PO+Mq;:gfi1#c./)FHjCN@sks_b<;Y*'sg^E`O)J&YYl[ep,PA^?QAis%c%an%@F#o!E/]gXS`^<`7q%OcUTCpGOi>:0G]'9Ujd!Wu*'MS)8-##hjpWYV$61IP(W\mjb@pNqiU8j\6p6N7/"]rpVG:q)+DO9L9*%A-&5__eq9O.j;2`6mZPBcZ/uRi1"%03n=,%pj3Vbe%,rh7a"J^7I;_J'M8VL8IJCf9I^a5p^4W82D39`PD?g,l_q=#L"9"WZ))T(%?#*hh<3oG"E0=d5`FHg'=>..Y(d$rt_H[gSd!M)@e=%pId`)3_@ErEJX^&?424iGoAdQdtpnHf)FU40jk)T,s%7st.)\P)4i\95E%IU\="?dmH>7a(/()jGB]%24^4RIWN]V$&sO%,&\6Q;@O">]]\!s!bVn*9WmPa-^(SiU,pjimnAT/:OBNDuesR#$6"E6g;@7;H2hJ%$sod/fIU/^XE5Er+dlaPZh/$,,H;0&05uE[jO8t2ro%HqpTK]okng%E(Z($3re]%Oj/)&CT61qcX3rVAL&IWni%pQ,l6e*4#_P<n%dQoco5N-u!kC[:%m4B*>P,hp$68FVC*N2qg5H$/S-rYWo_/C<STt*j\!7L*#l]Gi@O]ke=UqnR+/8V;jNU'bM+4[,<^Hu)D-'N>L%QuT_n8ZLi05F#Q=l464g<*h4h,%">,^k/35A*]C&T/Sm8D_lN1?Ai-3''YoHc#ZD<Y?!YFWYEK^3t/6E+Y%8Y$J'ATX$f"9%$HR;%P"VCF.XJG`YCDEh7B)dm7D%pi%tjD8PX_ESFKY+R3;$lO9D87bhASk4]U3Zs'ELmq`n+(>Ib+#E_m?%KhX/m*-Ua3R8s)RN+[ea9%X68MaRAi<i->o`Em)2F<A(pYrSq5>(N)E$(i)jL$eEV:pZU)3XG*s`BV]dlBIEe-b!kFWCrYW<9)6\\HUe_[.\'3l:3[(O5/S8aY%!_i^BU-u'O*Q>;(A_E:-0kqbc4pl)EA)=K,]G>.D_kjH2rQ$d*?b#j*OQYXn$7%)c`[_to;qjZboQqKn_GL=l,U'(p*%E\sVPuWe%*7WqGkI+$6/-)LEkGh-a9tug]pAFjB_=`tkGF`ms#73Jt^;U>s/.-0Ndk=O`-!UR_hSj+[Q]rAhQg;pD);7#9.XQ[$pSlk*D8oY5%5PjX+$#@_n2ALa$?$)X+K8-OJG/f8J"V2&c/;X!:$[^1Zc"fCtM^gRSr@25VApi#iPb*>I,#&W3"SYCX]HU<B=<!]H;E0(6M'^&l%5"U>,r4_&;1;5.N?3PB?q[h\I_5UR99AtuM-YZGbFAe/8FO;<*mE1KZ?6.'gaB-G=/43W:+?k&V;;3&%H9"S1<[8Um"Zp)./d>bE%9+6`L/q`(%QSPt!$#$55FA.fb6Z&E5l3(EZP?!'a5%Q-g$)XBNj4*Pd(^e0]3Fs:.V2$gCZ863-cjuBV;^2OF^$NF0n7ukY\rP;Z%\?7FUA[lt(EFp-bA$C;<8Sp?&TsM$:3>kofbuRH"q(@b=l2"Ab$IqXS@MnU/>bVAV+<V@DG-hBP!OpBp:;(Nl+)sZV".iP<NTDTd%XK!dj\*C2BJ:ZY_jNpX.'kAm_"Y@X!U]oVJgl#ERl8Z2A\hS@5e"Y>BHIJ<jYSUY6RS--G^B[c`P!f9I>":&b;lR75Nh^3!E6=l&%YiTsQn.;oS1$<M!FMm:da`$c0'Ca`<9+r's.KMA!e`lMSmA5),@[BgB!JiS&r,&eoqW:\sO0M[q-%tnCa6k$Fc$)@QC\;C7c*u];%mM?i7rJZgg#/SQ(KXRV7MD;>,)aE_"m4pSoB/K7NFQG#J*M7JSSLf2=a&1i/>dq$:)0:u#3WcusYYcuA$f#cKV_'kQ3ceFBjnUq#%71Qe+1XakeH",);++hhB;^KAGj+Aoa<hX\]5LWSuJhuK"Bobu&CQJjj\9c,6l*;Y.To)t><f&(&@_#j/g8'iVEMcYLVt]51M/i=%%"R<[IqWW'ZTl<j3/mnRi9GX@Wp-&kc?2"-$E2jW?\8#n,!]&F;>KQbsZSc^g4DMA(_,nT*,_;FWA@AP?h.7>L32V,5QtC%R4/5l8%T.,n?YP*[G&2Oi6E82Maj5bS7=Y1tqZJTnlWJ!Me>?>s3T<b0M%$JJ&q2"hrk0d"dpF4"pcHQ1T@O_+d\n@:5R_tq9@0E.TgW>C_%`3\_KbDD*jmo%cmh79h9+hHEIP]t3`k\f_.o]k_YMJB)l;ddE6/V"K4TJ<6@qgIaXgb9kgAI*i?oYrI/m%T4:"fZ/SRZ^RAOsI\T%rD#e>Pbl+oW%;cT!?_Sn1Wi#pB7-oq5o)Nri7HI'#-,gnA-/"\bq?FZSa#JX-15d/K#"TkNRU!$_EX5KCumNrSN1V"rTC\:Os+jT%Q1klo0=9&P-$>t=Rhbh2gM<'\1I?n*7m"h=,LDjL6TNJl1TSupm(3$Nh3puPTPX>0^45X,IL_8qXG8hbA7?+8*XbJ.d/mEeX*Hbk%>MRrX4lVZ8Re0_M+Y]pC,3[la95J?`+3WR[Lpe-=1!c*kl9srY\ZQ[AMmhFd5iFWBMV:B(bQb9]I/C-jSP".LJFuiEd;dkNAEG$.%nmh">ahsuEogVmi`N-;?e6OqPrKeB>\&5`(0u:r$iIJ36eNG)#n3>%nl]SEjU,MK5JUrKNb[@\=$X$#PY%tU8BfRC<b.meB<3e0%%Zb>mDlU$/)oDkL4dD7k-5,PW;e,9lQ\A2Xp_1T.;c&+VY+U?++6:BCc[2B91YLbSaR;%aeZn03iB"qNVb%W7Q#>H*5YsRERT]o<8%=3IqhCUh"[0=i5'0ad9slsD[kJLIP*bc+YP6U2b?B1t+*O(Q(7V/$MVQ9al9DFUB)(@4RHZocA_]s9h,QjaYRMffdm`T!#gqJo.\%SLgcFYIKVk+P[VRo<1\=;Oi/YY8qB>O]WoEdapVSRH>+nre2S\AWm,e5+bg?=mLqMQ7IuY[S#9=Kh:OhI:i#ppuFPck,CXi414N!%]8,raH<XSE,l)O,`Ns;r&dlk&ZX]0^nrr82crnl!IQ3?e7jK3sEe![P-b"t5QH$V$(a"O1nt3[G3)9>_ho0?lP]549gZ?SPL_5-r%CH%lhUVpt^c:A;iEWs^VV0r75gR_D5E"!K#n/@02-QAM5mHS"T]3:K"M1;-qT[:f*J`:0$YH=U3Y4KQEC-C-sN4ESdi!U/*eN6tA%j/(28aqaA(Z)r-F'h<H@"'LAg@!5e4Jl^IPA8(b:kCsioi>1s7+K^"DlKK%/C3#]2lgNoRXs-j6;$nT-Wu2eX7lBg2Fq;X[H/Ufj%#EFk'.L#Kc1R/\UPu=dUc7;f:X\dD#f,,1)P,+?'n=OPJjHurnL7O&b7`IRb*l^:;T's(b;O*Guj>a=&?@MEZVl]`8Dp_:OG*_H7%d5NVo24sW,f3+t%k'ac.'KA.*cqmg1<1nkK)TRP].^HRirQ%]8Lf2\/ND-9ROlKY(AYr/TVQ-(8T4O@>,X$E;oIM8\l4%+5GPRUP%T.l#JY_GJK<rnE+>T+UMQZL1I.aHar:uJ=t=5VUnRt<Ai.<Hf;_=V,`ja@BQ>oTk'L$-k*VKg!X7`^Ufip#1.G@Vp,Ud0H'I+K9r%aLJ"9Amo_j*c`]?goM"0aOm-"pO@-0Q-u;mb1*OPq?qpfoF([%-<a3M$#OA?FPWh^fCW`KS;,moKk*s$2963SE<3;0r2.c\q\H"C%rck1TMaZMDldTueh1a'&#2_k9'r$@c7N5W)SN7:KW^cS&6B#a=BScX!-esO1;h1/$05`NP`'$W[&</%_*&Ac?0U)oaJ*0MegXd'!%`RJ?)@ba*XVMLS*URl?\gMNmm=G?9?[bmg>EtV8M"fr+9_AtD_%B'tD.Je'Z'+>8VSeg6cih_eZrUo-nKnCEBq1,=/<<`2?l@V>>%W>Ju0\JmJ34`MLmflbc!JEEL@QW"DcA^3']Hb8m5]29ErXUjC7ZARj2r\\ejo[?2KIDJnnV'0gA)4>*Sn<iN8#hW@?>hbs,^72nj%7HG*8!;!(,^nmuHN1sjP7o5_M6]pA-!IH7@)?$Jb'BfF1Q$;*^obrA]\F]nZ;HaE_YE7RO6sY/^37X1t5s;"a!-mTSc()u!anu/<%-"?tHb`<:*ZP2]dSsFA_`@CQ=E".D\7[Y^1(c"=+eBA1F"UfmI$nX#E_Muo9JlT.ORNrZ2mpoPh8B/N+?XR_"Cb'+H#?B`u-Y.GW%R0D4E^uQHp#X>&1.+X][m(5W!l*hR)X:1OE'rR'0?jZ,:)KGioASe7t'r_<GFP;iGA*^osN4aBE2;<_mBFIWDP7U=@;UJfTFAQJ(%B59t,_.+Ri6*&[-]sIjRD<Qf2-ZW8iN+7]l]0VbrLB,ul33&@C*s?mO^mo7*hm>l/6A&5u>k$b[H9/5gSXCa@At5mFY2uh`iMbQI%,q4gGM2A;IT0R+@200JW@^QN^%Hb!N^6L``6&3fXTP*r=XW&fm%h`FlD?0!di';mlYc$Gt;FIp9XXj$$T-YsliZtRP&D2"1A7(S0%D;`%PL_?hiD!(IhZAYC%o_TNMOEq6Pj!,p/\]Bs%=0&Ps<=TnU\-iI\.O8[U)+$K<b\?*Lgn>d\6#BF!fL=V#cIkC<B.:gnF6Z>%%W$8"-SmFQ6EUEOQ*p';b=K!a5WD8XlO>96__M7*V8LmWm1J;n%f.Y%&]K[D?#i#g2O41Wj3sX[XQA1!1V5nc8Q>'1.7U3a.;J$VD%i]U7H54Y+SYdbh9Mdk9@$kO<o7Bp`^b]Ga(g`aDCJGKG)UE!I#`9[V<5S^Ce*"X]3boMgt)tR'54R&Se7KLDc+aLs%QATS]pTWOf%J1Q\).[u^7&`bVQOM#Z9g=ibc"#@3lR7lniHnL))be"Tu=P,7>O4!>ugb]ohE#XjK[C6POWJ#uiIVn2Rp3[,o)?dOj)hCD0,SuP-%Fglu06o'UlW_ug=G8N_?RkH#HnNO,/GW5lObZ1Z(:/uOE0p=cM-&ITU12"K"IVfjX^QF`8emDr_X7De^OKo>;TB5#BMum;H&aAgo%XVNLg^36=D$`79SB/L41i*.qCEOSH^*Q,43!>g0WXUj:V30/MWTODlCaURl^L7B_WY?MjfE4)(2IROTf]G[I9P47oM'TOl_#Wq=[%X"]U[rPjr*fjXiOj7Y441Kml=V>4)Eb[K_ac$%X>5\3iEX.6f>)ZA&#?fV0N@VWD=m2W%K>r7=D5J?uS&Ih`GlG;2QR&cr:oq3!t%"G0$d+SMg(f'EE2%C#mf0&sG#8O^-Oqco37Q@=E@hphFR<&O'E!uUN#DtCtt.`pUt)X[;.au%.>)X\2&4L;t7fpP)Jd5eD>*%D#s%'cTF\1P]%M0TY_Dftr^"1S@2&hBZ\bXl@?Qe+=Idot(A6qqSi2qM:'L(/1/)j"?8.bLHZ$5ncA^1Dtsng^i6s&EtmAaiIa1Y%F`a%@,r4c(N0q`=Gg%0R<RjX!e(BBYa]ZR+;\p?WF$F6L%[rQO&<c`!T7;%q)U@VFb&EX$Po<Lq3qu'0VUP\o6NQd@#5_ff\@RE/BaiA%d\$4ULWQgt<m_oliiqD*qTes@%pMj<9b?J=nM;>O^P;#0)kOm-^0r2h>?dMMk,VZm9O;ZdLMG3#:8m6f6p&/,7=Cuo2.TZ2"=g=e%$C)5Gf-0,Rfs.s,+^%'N3$%G5M.-)TFudM?;2>Ol@1uA8Z:&LaDaToR.$ukEJjX2u<:_W*$o;*FT1(CrBN$/kGF[o5W"D8Fp^5c(%QadDZ^\(f`\!Eo_7%R!>U-KeV7sUBmd+F`\apm@hV-kEqKrB%':!2V>n!:DJK;<V%`L-f/VBLOGj#j'(R?3ab9+_*`'sXE3-H<mi%&0@E&lpsVKJB,hKLb6uC+l6#QB@r:1Hm`MW!NT4B>=1LT@/tBK:nIG7:3EhAL)_[iECETh"?o(E>V,+M+I?UlV?[].M;&<g<$H65%\Z(Cic:1Rd.+5X@2&3q0jn*-\HYm]]Fj(J$>%$"A?W)UGmZf''W6C]NZpk;U@6rsfh#s7$R;usrWh&XHf!E8jSSoR6[$9@Lm#rZO%qo+2/L2V\]H'X/$DVR&XH-[+ZXXD0sE`o8&-Ms+m[>KO@R)m0elYOD"XGCkcpmZ(BY#@bKW&C(phKi$r,J6cp[nQ8&(5uQ@gLitt%=kLM^NbZXOlP?)#DN/*B6dlHPh2+e#g'6<Bhc0qIHAV)j>JN]b+mOTUQt<W@9,cHaZ7G??kS[5h['p$Ai6t&Vs-`UCWD#(^[.jRX%48d7aR78e"_<J;&ca-ABj:PZ3ZVi'4cjI:\$7Z1D1YfSJ`\VR'P"EQr4[Nh*aGRSD;F?gAD$UQ;-Q,1b.WoF;mWlD!<`"TuF#02I%pcEW(/"n\gHlTgT$8o>a6R'XtS`!)RVM&(-[Oqq(K_I-/Rqu$SlY9ZiJ5K;_Z^`!oCDEM];D))a:M)i[O_js3S,A7PE!^'e):8g[%7gAqPggBP[ZFW9r"e:Q/.mLY:>>06q<:eRU`U;bSR)[B7NP)R,d;;>;D^:\.1rn1<>:#`<I)7#f4%cNjMI'nbG67)(,W$a.W^WMU%H]ZEJD@dd3\%>_1PT.iSeVc0g%tZpk8],F7<9L5+D2'&0;Ws!WL$>1dl`:`OC*icg\N!`/RaO/eam9/;j<AURd1\p.oV>u^ckUPR%/7(Fs;Fq/+]6]a/7huSeXg%@5TpO1Oo#5>`DR3`XqC_1/B!R'3/AtXNl6G@SEsZN,r-nAf/Q#!f'tBG9!%f&180_Yfq/p2jdd?Sh%b^B:H_q8&8[q2P=&jkA<R"FZuq3ETnHu.,&.o#"X0ptl*3Q*P`1#;=6C]rjf3j)h?X!>[eahTU.WT'-;<'DW2nZr?p3hdFY^2l;*%c_q99'h<c!'SL9CA[+EsZHc81pU9Zll%F5`j+Iq@3D-BVf#(E@eQC^ON8W:!8>.YDY(PZF.%sN&@MqaKY[1X,d99g!T'+O]2LuE&%3t$nV!CL7@I-TuAW.^(e#+F;J`6"N5(H(.tH/G[#UppInR?.CIe@<n4kK_X>4:j*,BY:c?/X"@:3186_<1QY,h:/->]?#=@Ni*Y0%L5kqH2iIFa>_7&s[]='#l+=>BCeiZ=&l![ZpJI/ZS^.E5K19kH'\bG*!5QKEO_$0VC:(X\h>N)NBbM!`VQsm2PEQ*-AV2.7aOPpo%*g/dWid:hVnZ7'$muUZPJ9DB4+coa7XO[Hrl@a"l?tt,q/AIW`=uhXGU,)M8HkHTW4.)@@Ud^0c`Nso)++O;k.-^#c7m%LY3$i0Y%CLuqoY:G$r+W&!m1UGi<gHDiZ+dA*h0sIFS=.k4PcL&Q49)ls"Hjtg#+Or"-LcMtjDHr!!pq9,4d"$W#LUsEIi%d.#<Gt`4@&*"O%,RrZAVp4H,*JKY,QA.fADWXb=X@O^c.?if<UYBECau@`?r1d#hd6U`uf4<"7\oS=[]@+hf(5LAJG2T&Q&6akBhMY]*PhUEC#rDd:%e:Br,,usM^L*WJ!Y^'$1'82dM[u_3MF7`;q]7%X8?dH&Abo7C=l(s@A:Ut:TB'(r!PJn-Y`q3tlTt_n\9"?Fq0_a:$@LaZ69`)MF%U%io%oK_&jU2->ICPVE\\NoiYd.q((kfi&[JVK,891guSBCnZTMUKidEs:VL_fEp-+R<0qI_D1-U&LE!D-n7\p$e91XEQ-LSW5KW%6IrZt'Ks2&:$q2$=[ruo(0ocu;@D=Z$BS3-b4Ld8P<mqfR(gdZEJlD-!/*qlGVXtdZ74TcJY/l=DUblj;(J0C!);aW^aZ4OI(JtO%jKI`CM_gc!>=J/U1%EauMlcp"V$>ln-A_Tj<a)F9d+pLY8n9QW@f&D68h)R*2i9c+AcU!:OAJ4!,5:J2fO3<_.AT7Mh@,!NbVVT/%6/,h*-pDc0EY14<K2<:(H3qA,1)RT0(a6`6P+OC0lPRI2!EQ*s"f=8dX0%d8WdZnrUj*j"iWSBbF=i$jG!^g$TJQb4]J^6nSKD'Z%Bi?^qLhh*A2@pr]TAQf[`!4Y-*gdZ$=@[RF.A:YR_?,65ga8_k;D$g!<t<.jU3u<N_Go7&.&T-K;atbccFa5D!89`or-nJSD:]mb%\q@n3M_ls3G>hBDCjJQUQakQ$gm"q*0Ua>cJ^pRj7:Z>IIRi+cH(CAO_m9N'A9?9UqP^<=(b#$["JKtcH;LS477a.LUER;p!LopM%[co^pSpd<-M*;'e/J-5s!)ZZZ'_EF'9A[e(`TW*A4@QT2qG/U'EBF#G_7e'tmH]Yc8CbVen<j<>',j.Y?UL`.0!.*TZeLGiT-VOF%U..R3N29@+[<"1F"96h:0JW>!S$m-q7#.D[m%Vm1oUK*%^eQ.+#I61]`l/*b[D%Q.hX%f,XNZd^$<TM]P$?8hf)`T7OA">p*6&rH%]fh5=P[0a?5ujfs(/?aSbi2Gc[/3h!i_>t?mSMJ&`s!hF"Z])f('K$T&I`CeYH!2!'`V:7>RaCFM4[`[J\_(&>.2sFFTU)nohKLX%m9T5^3ptT>mJ4-'P<P%0"ah(qf7_?Qe,C78Iq]XYpD=#WNX@8D!XaX"^VTP%`@-!2[:/dTn"FR>fj?r`(Co<fpQQ(%?:.)rO&5FW%1Gs8hC$a.1cKUDD6R8cRiDL,q0;Q;jktce.e;!5:4FdKjO%Nc(eVu7D3\']a_Vc,<HI/MI0Ofn3So.Pa'MZ@S>%Rn59b[$Hp)&pf%N'IL"N]+BbOR4/He3IJk"km8*\H%MGf!X\jEj1=pI+T^\UcJ1I4Hm=6KY-%Rs0@7,:IU;(9alUCqmFCTQT][q<,Ss71Ib@VTY0D.%2,?/UR-D%/mbfR&A0tTE6CL?^=1aTU"dI)\_h0uYAB#I)[f5a>ZZ8HQpQf[dY]Z&ODC?37KeSca5!k@NB*f"mZUR*8V%r@UF(W8;%)Fh%N&#1<=$-Yks#c%r<6mn!^]hKeDWmX);6'<$2+pe%['n9-oe@_W+/T\$[6dd7CN%ZaO($s#n62_r"$f\iUN!Q7Q3_g>il*u^0%U*tNR9Bfro,OFa+7oup.Q#\+CZTge.\Vpf6&6O-hHC0HTR!3C%:%/:mIREp\R9utn(Hl*3K=U1H4=Ttp!;$g?fnkjIn%L'+N&)%>%ROt[l%Vi8[o84:Q)H'Ee./L-`)>[uWSYf@oE4Pjo\%!lA*t!TumX@paIDE5PN.1sG%fT9!cF],^qQdj#Fr/6se<6oel3;^;[f9ap%SlQWB!:AhPP5Q2V"ZI&/6UJM'R'uT5$,8^8c[Z0Pa?OE(&#nl+.ES[UmVf;e92V2@J>6=W*+RZsB3-<eLlaCJin';W&X"0>DA;@F%R1^R^ohQ`#,qU/tHpbp(r(b_?chnsS6;XpWg&n_mU^MMYIo3jp+e7r,[R16"/tKm[-F!tYIig6DKmo2Q11+5(*Bl0U>._nu6="mF%TISm*lm0$be$`QC!,#G:o9M`T=jN4R\)TS[m;"*e.bXrU"e(Y&4Fl"%M[7?t+'V$6;lS2,>^o$*=U$,VCJBi(N7TELeHpO[-[LfH%k$77FVrce.%%7rqD@*Et70&a(=Z6+c!n0gi`Q820kT#9\H(u6s`'Y4[SCu6>.s>[G%+s#@"AKp\UQs8[((;SN2=`G;?\?a+F\f("%R>.n)7=<1AJr5<'_N]+"&'Ck0\!1c2CR==6$s=`=%j"$%@ce:S]W+SsAoHMA<hEC@E$)5DW'b`XoLPCuEqm'u3!lg1po0oP1t9/e%Zr#6Jq6dB\C-aJ_jD=$]Lg%,gX>BIH5g.!7G-t8*'#-P6DoCnY"l'?VP+]A*_2A_hllma5bJSt-Yir\Z#S0k+H!mP&!hh>SMW%G0%_Z,o&;0jX!B&_[7[+=67h!!gulL;+aa$7D#]$:`PFk[KR9D74g7fk$LAg5TG0ROBW/%<tB5]fT[PgWQ<G$4uf[rP>\B[V"8a=KYm%Nlc_:_UV4'J%a^_T6K_C@O71REJjFdJO(\aAst>`3=)H)Vid,<h/O[+H/">aSZl,X9s1HbnV!SIl,g=#=L#*Tq,AQL*bD!kLqZ/]%g,@:"@%2FZo_'Cb4U:9_SOP=;kin'oe"YrUZeCOl!\p$I$Dh/1RTc`j-DEJbWHPOR[]Q"BA6>8"=-(K:P?^aN^=j\d79D\3O\1**%9a:]W@8B"(8S'Of\#R>K5!gRV.%up$aeq$.MVqL(CA:YP;Sr?Efa>[`MQ.\Wmb`f&+t(G';2'KE3CODoNgmF8V_9-4TJ\QBW&/dF%;ZY6%;Eha>83>Bd.DT[eO;cV@V$cbkEUW^bABjk++99!W;sDst9iW\?MOBnRZn+j?CHasK-eKLg9)3331t5l,$]D]Sj/>:-H!TF[%k'/l7V)!BOWBZ1)J3/a*86%&U$[DQ-Cl?3QdU[,V.AP=WmC_QJlChUd/7?:#YpR'2%>i<6h\"!J8CfQ\ofhGNrfQ(KYuu,<Z>E;S%15$k-\=?p2D8jY4\N#]uHc24Z%ikl&2:O56VHdb,24cu%@bQ)qI?sshH\!TX%<&[,I.,DeZ#uP*'r*Uqr-XI)OY-.q"jVRbEI$N^%;^@VQ^aa8hfO(,M2rug-NG-D-ON<39I.hX-ne)@ZIFHaj1=F-2">=R6;c'1[EXFL]Z\[,bCt4o>KpN8_KGn>1:_q0,ja^>gb@l5b%SQMau=l!2jgGPa8\_Q4*oP[ut!q],fGaUdk59QLW-'ba7#ZCK-H9N]Ga"]lVjdlK,@p`0S3O<qb=[>&=g"lt!eiVQZ83ffkb_6[2%:ntBYI$>[4q4d0!@/?Z+@VglNpN0Y1FXS]pq>3$arV0g.)9ikJE$)K2=014SpS[:6]Sq`S8M4#9#fPQDW<EP\"OB#*VY4VT,SeWD%SL4!SHfh>s(p4K)-`<?[pn/m.Xh64BUREL0$pl!I,[]GXA%&^8]rKio*;eeS@=N.Gd8Z+D+3H&%-F>eLd,o$LGJ7Q?/V]k:WSJHN%YIBN9MN5;RHA6aAdKq;75,*%c0,cpU&0RJ@:7]_8KR$&`:"H']"(<c9b-!R5e:_3:kt0W]m&HBY"]EScb]Z\'Z6e@<?"=,M=.QDu%^8%"AoG1[&Lu/8VF&3rR>nsgq"-U$^V&D80\rF(9fs;RI^>!$rk8g.jo$%:*?[2Z`RT(gm$!5B"7Y"GPNj"hMF9[(6f?M(ipUt:g%VSp\qR[p`JVMdgsD6]oDg46htP:p+"7`1Rs[RUcq6[T%&<<M/o;39aR<%Kl:TjkL$N%fiu8f+m$p.:5K7K?q'(0/eJL8m;bqPW\u%-3gito+;s6lNQ5sCK"g)jIEP-FKcm)goHWt5XKp?Et^.!hOLO_#mn;i9Z*D=cBZctI@QO56OhPelI^m0<Di&KZu4=E<:fKnAO632%8.95YCA/?rY!rC?:,I_J0=(-Fb<`H1DW&aQL1iO`l1#V>mq,I@_VmLkMV_J2BI/AFK/Y/h7%J<]$4d-h/B]h9#"0oljHA%YXff_!%20K6[#`:I3q,YRZ']fCI2;-A@U)Qj.)jCg*?#?7VO?7+dWid[9"SP0_'a'b*4'=Jhe:_s@SKc!q"Jd9;YPO)%$q?KV>bZh-qp:-V%G:gW4/ruaW$C%uRi/cVFKH^\b,@2?[(o'+*q[HRKobK#TQYRJ3/,Op2kZ8PI*j*,:K2$,9X:nNGC56h8EAf>iD!@m]Q.\(AHK6AJ%oVAH,b#5^+(sC0bYDIm:"&='%\Qq%1+lhPg[g`77?8mP6P[n$=B!M8=\%4JoOE0te&#)Nd?o^0mXD+=6d8l2;N+qZkUK/Wu)O^h#%^s,si<*[m&9(XBIlP3cmi*WmJWP/;0UUQnV>*;W1:DsS"%[A&hAQWV/A7=$IR$SpGPl(['M63Q>G\`P,CrWe96%+O#V(f0^G)e)5%A&<L);nf09WJ>tsP*83_^]r!.4tP$9Rq%:Y"A92Z6Nt(DH+S+7<%M#oKJQ^D28(O/Tn"b+YPWC2S=o;,PV'V&(D<Hbq<0Q<?Q1]h%*4HAPIgM^sAGc]@,an=*F0IFESFoO4QthT?=DBL+Z,2RN<:6*0*bRG.L*@h^=cGj3Z<``*OmKV#m30<XLaihg6\]VM&d;k-cm`ff%ign`dB4)F<#,6<#":&XGmqHEiS7PnbEfK5*TFW4'n/;="!6tT#Pp[Z1ec[-Pm7%RNJXj0)s)o,SRCiGmAA-Y_4a^LCp#hs4%GNG4%'oBQ9Xk!6rh5]C7B>,k-XX#RHZ[q("6fJ;meng;qp:W+07Oea",++-brXAhY>M>%;*0[YO^_9s*H&qFF^nIEWK[#d7@3gg8:MY)0%%s<l*lc4>H2i*QW`MM)fG`ZW-6+mkQf"`&(V<%fXX&ajN*]^DA=NVT`%TZB&f-+A:h#<U#<Rm`0n'igX"@WO-n9Opfq6DG+6!1"E%jhn3^hS3gk>%*D>NPH#2:nWI;iX=(UZ<q;fGQPr1d`Jo9#IL@,$J+<C3*fmlk7iP!'!KOdi-"`[<MM+T];A:Vq973/'[KeDm3hER%d]BHMhq'0g](7oHS1?R3=P[=$X6s/ibm.5P&E4gtP[5&5mQK').^_8")=2k;L9&o6MhYT%9q]>AF&4P@X>4b+bUrEC]_BVm)plR/%pX:aqL[psLhTf[<j.BNI'Nl-%),b%]D(:'HX)=M7mub8kql@j?;Mg+!+(c5[k[BCIkH7_*<Z2J6-7^mn/G+6U8C[hJJHeNWa58^8%A6<RF/+($%6d^[c7EB-C9+eBL5cS'rlcYd/8o16o>BG&;^/*K=*9e@AI)"Q2B2jqNB]'5uU^#)4h1qlEdmVa()m=Hu/5[OaI9Jd_%$GYcLS2V`(<UJo5S<me-:X_nh:[ujZhuL)VGeE!B/&;j/5;`>9=HGdJ=i"NsY0!r3?uOaBe>s6iqilF(+dj!&=oC(B;(C1m'g\uC%$FgA7'M)48)i*A+&'93kL7kmWLHiI(\#(O\1]eu^*O5_pRYSb9;4RTlX%WO0d"hiDZo&`)M&YD,UR[W1gObI-_'C75[U(n`Uqi;f%L[QS[kS9qh]c]"sKW8#BNZP"=5f3rPDXQn;)D0P$=d7jU%sh.9du"<P%`4PM<M1K$e.;^ZAF%OKoPs&PWgC\bPsm(/66H%:9@@3<%":hN`dZ\#W^^[UqFq?1I9u(SBS6AF+7>Jct:^$IeSUuO`[Nbj=\A5(df\:\sF6YN(#uqlsq0%Al"R\,RC].hk09pH5=Vc(S]2_>G%Z7e%k75$%EcUhmtlfp#olnIWmL$?ZtoU&Z-gmG;sSc3fUGp9h/gOlSfPT4_#cUT][1Qmgd0,bC/TnhD_7Nnuoi/FS^@a6*]YOl.C%I$>[G@!m/)<*@0EpDLOFcW=`Bel9N/N[%O8WYh`9m1;6dc'^E>nlm'2`P9AaX!>,cmY+CNY/F/s-&Kun[l\_R*VBn!p#/*75=u<?%%R6%!7M+@\X_q<$RB9ZeLrEiWVIE54a+?(9%Bc:fbAG*!9cB^cU,bg%d=g?,UJnXbJcJ8_>M3s=,nFcP_@ZB2J%/J[ne!_Y-0941%GKfm2K*d1kO6!L0NqMhgU,*)+FnQZpd=tDMP@ko_BO)@*kgoT_U$7;43qXBWdHF=SagehOEYU?3ek,5E<=[A#H6`kt30'GLp1HU\%-d1?$?)Z5D<kP5Yccb&Sr`(VX=^.]4/N5]1GoFdo#9h%uA??H8(m^l(l5PC.EEA&schfS1;<qcipDg(6en7W](rt+OQD*#1F;?KQ%O!Q2Y/_UKNq`^5-p!S^(`&`%sJiYnkY2nBX1sP0`;5.bRL4[;=l=YKO<I;$`Ol*pN)GPHLnic$_)MN69#U@YoDe4hB<EL7Vl7K28%$3[fWChUON5:oUUXO3-'8"*X6=P4EkrLnm"=6k+A9B>UN[%/1(4Z75h1Xp_YJ'p3^DYK@bDT)ed'Wm,sCuu"ip*_as)_EP6G!:tP%V)W0HX5bd\V)_j13;&B$+YPh#G"&G63I%5hTS4:^B\L%4X=\d0#X>\+a.s+8]pB1Eq=EJtqic:QnnhshIplq2&#1)%74,bBUNe$e%SVBH3W^d7`Q7Bg8j>[DSoIFBf1YgRodR*6&AIXBE6;j&SR$"n[_nAbZ)2>a`NKu3h69Cd=C$/+5>?m3^_>]J*S6!*^HGX]ml(:,m%eFRI\$U1-IoBF'_3_gE2X(puG<Hh8dpQ0O^<m7lH\8@S'Tr&_W%SLVLgQGsQ-8B/t,Z&<![Td@egW%CnIH"]][.S@/\;tAp)@80L%U*/1&VYDV<?[Ki]jMgFr]9a=>cPqqW3"RBa^-g.HWAl5@GH$H$[FJ%KfhnSrk8r&aL7ECWA&e&8ha9n%"-[[<P)biY9ZMrX7tdc1%^30:*_85IGI@'+oor=TSC9kLp0aK0;LiZ0cZ][^MN[c%8IlK:h[/o0AQEN^`'`6V76s$r;\0JC$)ati5ZaTXof9=VgU$)06I_Pr@%NW2c4YqUS-jbDKaDG/=L$];:1'^2tZXHHg0DA_#!kW@07Ta$k^-B$ag'f98)k!s4tM!\cZoJK,'9mi5ON2b4ojgX4)QKYKiZH3FP%>\Y+h_qpXBN2[q@ekD,2GsXNp!W\Z-mZ-3R@IGUUPh:>lXV'LTH(59qnK+,(:A>kMkL@-@07+-e]^F%XSL>@JrN>)ppf&i%Gt[&Y%mdpq8\klU@&8PkSH3dEfR:19@N!Ej[b/aj>)44/OK7kM@o(k,te=E<Qr3@9:cOb+/asd-5Bbo&NO:L]W/G*bh</([DZ<_)qg:aMW%*I$mE%!DEe_mp%!^M8AA;gT,6SWq,q-pI&\L?9n3@BHE=)`4RaUt4@k?"PL,/_/r(h?`,*gp$X8qs!&tp8Ha<:o;&q"`5NopWog0%@E'beQfc8RZ[]!(g$["V;nm:cI;1g@B(t[XgVFTGks3;IV(f3,8sE`T>4GCjTXgj0GZH1*$78SQRPP__**+#Q$t,hV5+QX%We?BJ%ng]I>\3+LLA9Uca*j$LV8$nf*o[JkSbeJ[efeqHK&'&Js1S;nnEqAG*GTnYHRVjhjcu3S3'7oa8Xr^SOLsZcdRcW4PE\C+m3g=X-%LYWA=>(FF#3M0>UbI#!kVXjA]H1D.h:jaOrH%XRCcC%M*<T8iV[.>VLb-8=<UGW!F+m)?u;o.&]/pG#c\in1Gct30R]<gU//_h%=%\`n+/Ga7'C.Z;FRdChG(:R1/RHmiaKH:?!T4RE3F=K[led&ajCpDOC_SeUi5RcEZ`<Y+NHoB?06#d[]rb'_IOXp9#:U%TO2TkDel%*>s\/:gli#Y+l(NF8,+k#C4eJDS=h_2^8\&Ll\bMB%suua4dFfU@8Diq_U_hn%mkCd(uDe8i#o]Uhs*p#\'cVg$)PI&r:4e#It7B%E)KC]eLk(Og/rQeIEi]3!T*iUAp5UT:q)[]B@q^PLB?$taibcA=Wg=(+iA_X.^<,M6<)RVjB_u`/r#%i3BunQp<pfmlk>93W=W`$%KXcP=M9D7NKW0tD/.^/WjZnS5masOk254o^(1p5P,a@5dQ4hm\(1:hJ8N82#.9:\76k?QR151V1/-C6'\(gC%YBA-\B;5HJZ@0KB%U$+IOea%[4+1^4gE=uK2"HVHAU!S3a*e`oPgCBk[h:a"Rh3gc!L<r&IfB%fo767]2@G'[*?UK!YNmU&2_;OXQ-#DIoi\qg=^gWqj%,]15D#+<V;ou?$+#hN0R=CaLi$K+;hMGi$bRf77MGdrU5L7CV`L3j\I[;6Mi,K<m5MuF@L]JclNg:A\G>p6Oo=Ro!ONO-P8qc)GY%]4srBUG3uNZ*iV7KJGF0,eQ@XF%R4M9V$E&DgWqUq--6n^W,F5eT1XS4aEAdW7#.OL;(N*,!EPfHC1-tZkKVjY84Ka9-T26dS%Z?%TJhJuBacT*\6hJ61fr.d3@M`ADA@b6O[9V3q`JU(B8&HXO(e\((V&EejQW^-,;!TtA`Ps`$i,STWn$k9g`>t_+a#](n/q5g,JMbH%f(T]g"_%.`q[pbPUuoYd'tmbNfd59dL%dn1-WBFf^?hOTL17'BO@]:u%J:1\GO=uoiY"sk)Ag[qIZ)@&]868mA^bRjjE^P-Gan:0%iVM0*dSI*']!sF"n4M*9eMtii?JHa*i![V@4m3;?$',\6DlCuPE0f:a(0Ss$`1R*sdM])fJYRM&"+BD4in@:p8Q'u3goi;"#H;^M%Yk=#3D79.80rC2;TFM7CN$$gMYl*)Cp(Xl)%Cp6f1LX)a\Pr/]ZlYa#LuWMH`kI3pVlrq6/Ko=?WdC1,RD\QqM@hU6PYeH8NOHuQ%ni/\<QZ?\$K-6j">U'1J(NY=c#^VOB0<nD1Mu(^YdecWlqSAsBHSh<j85t0cdU%OVLTIC=lH\UEfd1Q@DDeKU<pC$?j4#l,3,i__%33F>nTn];(@rTlc67''%`u2aqf'OWQ&YD_`#o%Oa<PRRn(!2ejOtZC(d9A3oA<cBihOX3`Y*.A6`)FHsG$fgOa5!ihicUjjMdg`l%l"-P5mG.FCPu+CV</sR@9@TS5l!oW![p*CWUa)1F+/Z>0M6N#!5?0Z*dM:7lHRoLu7!2?c!W;;sKeg'7JO24%<Do&^>j6<ZE1.N'%.8I?/[91ESWi(Kfk;+,U>rCm;7DjDGib3$Vc'TEWb*_igD`_-D:"*9)+YNr"4Q_n?kjk$Zp2''(;$JXC75[&s*]e$l(QQE@9.\/:%"h"';+j/OIh5q\qa`%eq.#LTYg.'ogAo_>!eh_nd</[37M%)Ch33#0rqZ,QZpl=Xnd`St0fnalW/SD.j/"Nh,gudiVPh#6iS2q1p%K,#h^5nc.5#k#t^1gTZYqJ%o4Bp&8N."U329EhLf4'CL/m+Zqo;an5/ZEa`;im@%5]CtC:i%EW+-tLcce?U8LQ]!5'3aHY$6M<#b%)EJ*,>Zd@k:PRg0Ymq/8Eo>^oYn"X_0oCWFMet`Lb(58Y@j*hZ0EMI(:l+Ab<%OrRLrbMT-p;A0*^Y"km1CQ-;Z")KQ<S:0d<_gE%G9[ot!D8ElEO<<L:eu+<KO&e`=A`bt4uN'!=+3LB=PkeYXC4`9EF8B\Qd%<q-B%Ct<gM<<o4[4<M\9!kQ1EX)IcJ_%0pl['5c;HP%6HtC$nlOu)nA_o,o7tB$Eo^4?GCU'rSFqapKT1$K%&/bGQR$JWL+sc]F\.JZ#VtOfKH>861&h*H`LZe6J6fmWcAD.!\a$*Uf9W0\%N4tq=(#?@mj8q/kF`BekIafA<]oHn'E3IS8!_>oGbUCrX*T<_Q:kC`lqBRdhFgMnpj`!(tQoV`W.cu]fhg$ik,RYs]J4Ma4lUjt`%fG4dW*8f6Ar(g'hA^>>.T9,Z0AMo?g>*,tA1]/;/[t)D4:]Y9R<jUO](,sbhaKI&DpZZ'15,H_X_ce8frm2:b3.U#hYOCeYTbT6%%OqLr5<ao(+[`8j^aPiE0eNOnBdJ=:8\@,98/0q(d=l5ekcWALk_0,&?-1QsI+Z^K&19ePM5kMBcePJ8F.dD1"/3]7bk_[SRbQDF:%HAnAiUrDE4+,O]Y)jHZ4pCJ:Th3I;i([iN2UeE\nR[4%S7@2Nq=@$QoE9]Wc*#1bjB$c%I\`_>EA4<nE><L88KS$a\0.ArP!$%J8%&?H\$'J(/ZimIJBef:N^a]G2#V`^Li?Z.3+_K>2TRiC19A56mIH?q<g9[R\D-^1Y>m&N2Nc:g&kN0Y:hP3#3/,+mn7g>&Eta$lbj%VnjlKMu0n:?2Z/P9*Z4mV0,tclDSZJB]q/;MVbHR<%"k>38ZGO]qqHL&7)R5>`['#',l0pfO\pAgD[X>2hk_Y'U1`"NqqThk6a5J%)gR"+MC2,BjR:Sc^]XfkN.utO-QDp0emb/l%/\7WrVi.$[E'7A!&M,C0&XOP;k&BdUS\,`mOLmfo[9Ru%r#7q/6\:WSK@^CA9J=:%!0uo-.rNhiqLoJ;[-6$E8rtBFUrJ.gctb%/G<#.%ft@iKrTC\9>&n.QZ5Q)Yh&;BQFdg`m25Ck)q@I=+j@)"_8?\QFfW=%f"kp."%KWK]L3/=FUY)#DKZjHWl8O!t+ff\%Z<G4`#YCBubn%6(,oucqAL5K.,iNg=Mr1og=m`JK\pLioi*BaP:VuHOLb`KAuLR:B-X;p@\%]//[abAV))O@LOJA<ON9mOGe7O4"Y'C<;NN-kbu+6@,3VNjap,o"of:bjWA#mQ5^8g-MB'2s)2"Hn_-'eO4pRl(ja?QH]FRF6me,%WpU\`<US/d3SLegThkD:(kkn"%=2=W,nZJJ0P8YPYm?CUR@a,Ifa:*iq-k?ZPXWuH1Ndp\?sD5Kmn8`LG:lU`*L)91\*@fK->[Rp%C*i.kO0OCq5&dWqDAaO8gGG_Q^VSg(&[.Z?<-k9*l6W8\=!4BGhi2u+A>GX(O4hjY#"X9H'80F\KB?4&RapJ.<.8hrb7rojRr>g)%4Y'GAR\D@+21fV>U$/;RFh->9j)4%uMIVJm<&6[Bq)l%sjk&]W;F&Hi`D@K#6=#J4BofK6FBmCQ_G8gGH4&eL]S=^r`\s*c*1@:`%(\:fe5t#f`C<)UIpH/ea-@f*=`n&3P-$8^8F<$]=_p&",`3ALflGgVs_%OeraMB%@ZqK2XR:W>b@8oBW7M(R`?Dc:d(7@ENP-dN/%PWUk"=_m;s.bmWYl#lgHk8U,pV]D0`.3hI#J?>0uHe%ZGc#"p"9OGXG@9&uFE??VMZ*Y6)COmls-b3!c8V/\?'52TdoP'FXLdBD6%/.cSXBlsM63pN0q6mCbs_HKsb"j3hV)/-"KG&FnVFFM8^e[A:2FX4k,XV!jFDMC/,P$@u>2G:@O1`_d^,l^U[JG"01o%44;-)oAH%O"6_YW^3,"));q$cb6n?,7K3?@=RG5h=S/)bG"KoFEl2]Tt+fgip:Xc/?;__:t\[>6(sW;-)OF>"/7\J1j]sfFG/DD*X8DJ7>J$I%IEDhM'H2\tqS7Yse&9=.3)hrW[d!EtJKu<NI^QL]F=A@>eaUVr\'e-8=:Gn8TU_CWel+mB'_7N(<8@c&7<p-*kV=C]/)I>bhMLj"%fbt"ZB[O-&.F<)mb$No?;[UX]g5K7&_o;kFCn]BT42b_VoN<C.d+XPX@Gn/@qmI3oB]ic[jS:i1Y;H>_1U]'??BOmZn?bZ?<@_Ou%#=f/Aqb$uZ'3(*k/7'ULC`#I&r7M($'(^E+[[@cP78U>1B1\A^XH7\#>->IHEBAI@6>Fs-gDVj?6%u;N*eL!.p'H.#CC^\@QARU*%l?F;f(Y>Y,NRf4-btK6a#d)WG=/Hj8,&&E!o;/sM8\<6QMsNn[,duVBcl(ZA_s9Lk%,\Ak1D#CMN%E5e3nUdXJ1$1I2`ZB:ApfR#%SqSck>iPRq#;_6)91;N[gAI'(L'jQ=Vr+jFqB<cB.+;pQbu2-.\g<&`:l-Y%SV469Q/2qe%AUR8?nPNi3!q-:<F]_*j(CIEO%Q)n%(/$aH)<BXrYGI?BY3"$X7,G!!VY//>On*<&@bT.M/&!Vp4)r$/1jUPZTIN8EZPe\$W*(O#Cp]<ZKY,8>A$I7F0:tMJ9GdV\]1g=Z%'')1pO&!rT'aL@r##[J0Z<2WXh&a]-6>^q?DdI$:ZMV18Y4Zp;%9;gtd$bu86;PnKc\(GW(*ptZV3*>?PMD?Bd\q-o.!V!RmB.M9%/6e^-mOgK-MDuO#=q;QWA>MOOcVl9E)$7aA5'Ta+H'/e?d0tTaD#MMI:AZIf_f8'*1O)5RW't%,\-H4$dI'B=`4`N@I1@4D`=7E]%Hj3Qu6'fE_Yb3+EehS<kdAorf6k/F>]Kbsf\j5JUX'W9K0o883:JB`b3300ipbc#Q?FF1V6]Zt)ch"1E.BBAUM+/h`2"a:$<smQg%B=g't:1k%W;(U\>BN.b]s%%1f5RP_QRHFb6B$c$5a8k)#KdYuZQ0q+]QBe:3)t'`IVqKMEF<ocG@XKt>mn\akH).'.!&@>;@Z&25%h,r"%CT<SHR@]&)kc%O9\a!j`@km0\\YE:](.hM=GmQ;FAqS\@Ga.M^V4.I=,A3S2.+UbGJMsW4'fB>G1876%UC2#K&=$Q,<AgR%%kVbu$frQ#bpo\`2R6pC?K+UDlBi;A?S\]Ru"4C\d/8H$-M:_9_Ar_l;SlQdE)LC-O#I3"$P"%@GRcfi^!F57RF*u84`m4u:_G_ka%6!_>+R6pr@H2h,KHn\\Z@G,6#;a[hKFh>SVETR\DK<)NQOaB=`@L>W%Ppd_0jDpJ,\&+G"lt0?i4?,?eTs5o;0cE.qXrWgo;XD^V%,D=cj1rM](KSu/[ADDcrLn,"DYoet]40jCB!.,.D]nk\3/C&4g!iUb4M&j,4^.;.(QT5ie<A]l^eef#`^`E_d^lD#I/_XT-A?-a,%T-YTL5T/7hqSuO,\^82I4D%&9f*q%gG8J^u+B_89N;11ENBYR!f("+<T.0A8*RE)8C,n?!YX\"*PK#mR<[C2f#DjGqZRa5^cT0:;%;auhn>M]uA\WPupGJiRgD*X+hO3tt0Uk*+P2%9O7K`JG+_&%PMU[4`Y0>IO@*o\VW3gKWDQ*CoP>BeB)2MZcj*B\N^03ku>-'ml"%\u.TlNaVN/bDCH_<:'%n*u6qKK):8*l*`W[@?)QuchhRkRpfW#O-'0Z0@a]+:3Th,f3g>AVna]IU/r`[&NN]c?/?2HT-eZ>HaM14%T28_oUb"+"P-Xt8BZQ#s<1*Q%Mst<7'h2qqZW^,)4/QR,&A[c4Rt+>a*aQB6E'a]cPG=N*=Jr^!&FlCSIre/&I>'b#bu<;R&JV,K%ZfO*=R,.140^iKSL![7@a"\BD4q\GB=5;nWa*t'U@dktGUN1A]T\^7tF\%(*)ae6?PHd>qX;uDSG1W:L<YNddGU4k5\];a$JS0mt%hbS]$WG?%7OOq<S#0s-)rK44<&Z.ObJgilMM!u;s5KuDG.TO]>kYJ9EGOF:%%C(sl]E[Ce1nSK`lr'43KYb[m,;ef&=;3::FE17?%$Z];TBat$&43^@@F.]/OZCu[HmP`ZqXdne[A?73g.nIc6n.6#!`fPf<<m,Fu#IH0#@!kK$ht$bsZ$rFtA[Flrn^Mm=iVA,rDHO8k%KI?ZEf[Q(un[cV1m'P/BH!?HgkXP&UZu(K1<PmcWU/*!;;O"!W*_(ZXf78N,Vk**kBecSk.--=`>l<jKhZ?c]lB0U-(NhPNrqWt_%Juu8PE6mua#`o$3(&0``MA_7%VduifTWdY+;rC=0g?:Ms&lIN5`hHhP5!Y#B=6]gk!cPnW$U+at!G)ahRNdn;k_4bYT,c?mh':GT%o,0)*TG<]VIkiF[]Xn?#7XpCATDQG"HY$rC9-PUJ7hf;EbCs8M]:o.H&1%UB;:@#P=%c-qEsTT-+T(cu=#$J3&6?.U]7=&oAe_'O%*H_P=eba>AUM7.u@B?H+de'%6=5jAHagJmZ&`,mS(7$7$NgZ3"U!/bf7k-CU46Gr\-^g&<TS7-?\V*POkp)P%gnR,gfgRal(Y*$P%brU482X.VLqUj%2Hp.1u;;NP?bUVB@1T276!8%EQFFS7IRssdB^FHG^r;@adXKnXZj'KnVgA0^9eTZf))f38ng\M@.;Qb9>Zalp/%VNi#j'_/gA/39O,'QHh#Ej6EBe'!UY8[`k9MprJ$I\(V6#.<hbZ1d?WnCW`5c])UHKE;&s7_l]i[._++5hK5M:cdlCerLasB0);m%%c)qZHH%A(s$s:W,aA']CEUc#1e\FSES%2)Jmb<NS5GN.3p"l&Z/37d=g,6,_ok$3+dsD["e\QYHjmA!R"NOs$fN5]d?t(U0's_2%#"6UGPkJAZS18lY04*IBJUY&YC0Nh$D/`&,@Mh[!j#,3s@-u=We^.(W#!HIUORPks<LX@f:KV$9g$jef%&+&i[Zlnp4D@h?!#Qi7%4M=bQo@i;cPVhB8*o3(^A"HtB8m-cR)#ie-Y/tTG\O&/`:A`9bEd):2&Cm)t'BGNs2/9JX5Rh@B-j7LG]'f5/EH0PHjQEIg7(qD)%R&.^S"X2cnZW0%1DBhRn0_JojQ(gMr7#4IF[oeL:&'XTY:4Zdpa&PHSm5<$/nnUXIJ<YZ/$Of2=VkK:oq$o0q\H`cZj<_$8'I$c>%ib&t';6RplldHN)hht?DhgAs29%fD$mq/d,,D:.4'4-OHXMig@IZsL,*n2_^,9*%uF.pO1^K\tu>#F'(1'co=:#>*g7cMP`AdIgj%XDHqR:YM^CgS6*ON[=Ibd>r`Hr#Y6hHNj1]F\_Y5)Lu`"V8@(!cH?Jli#A!L/C@Foq8]???;qqHO/Y`_f([?n13"p2]Gb(;9=V3F%!-s6(@u."KL?tA&9fk!c=jh_cp8'e40('"pgrB8*ln!AQiuoOnb5!C%a:Ko'O$iOh0`h7^WY@OB>ff&9)F]Ecb*]X&TfjW"1B]O;%9N/;eWnomt.!hWWe%GepqeV%HDUbR9YtC,#R90Dl278@ZIimW,O6TWO@%u+n3en?1g<Yk2e.AQkC8YLNZSc3N;`D-$fH/"?Q%6Gq%/Hh[s:/p(?q,q32,L\]$gn6ASlnR&Frb+S3LrhWh6g6)"D"+Fg,A;W3eJ>*@5[#4$+LL?f)pbA1P^;d!4QcG[7&ml9_W0-]g<J:r%dk'2<UuD)=;F4DsdME"U8sM0?j<1/oC?;n2+p`0tU!5!h^4oD[dsL:/l5<Cqio<;M1Y"uLL]MV!n4UB7H7FW1OdFJ>\k@kW]T5L9%W<<!@=Yl\-\5E9$FCG3o1`3LFb4Md;nkZe8q1`tQ1BYVt%s#^LF6Y8EoN,_[lg8/-/,>)#5n1TD]<+[+NSfbKXI2X/3qBoI%VQ$%%ZfgFB]Mo;?gk[j@Erhl+r=iCAKA,pc'iA3Ye4*,q@pLt?Hr+Uud:!p4/V$UUm_m=kJonR.K>N6%OeqR"I)D[^oRiGphGeD,r"Di2%$h`cb5Sb+)Y`N;88*`%E/V%%L=P$fGJ)s+4-,,nUTXO%:OSXtG"jH;an#Lc37&!_1aEfM_-M^?YiZW+^iH3pHM8O"d7:jgDLkP(B%<o?dl1Y5/tK&>!QO31>`_",413_:qNI/W]]E9\MZF5_?g33T]"9ce%n^?-+WFK54hAJbU3;^.D7q*UX/n<dcT?I]qr)U!"0.NV"J%3f>I]8HC#u%#u]`ad+US-*=k4`kB*NY;r=.Qdn9(*ss)Ln0M\gLns(7#IRoCMX'sR2\JA+[/"V'9+If.IBKQ$^?C]*PSS1NK_Ebe%L:X_IVRt'd,CsDXP;J=KDoT[DGY-<S"q$[\92LjYJh)TuekY1%4WPmHmPC)&]B@e=2K(A!8E0BB[TWV[V$$Of"/6_8ll]5'`Rt#M%[p,qrXY@mtXHhJU/T&m<9&QpE<<>]4T3jtWW$uO+(nK$u`p<qO&';H<b3CpE/g:l/eQ#%W1r.d@L/3NkM0"QO#S`F(%gH@"HEU41%otsU6oeUgd4q8CL&Y1+[V]#h*BC`dsLaFAC7YZ0E!Ha0H!Hp8eD.4:^KgS.02ciVI5MS_$iiLubnZV'9hk@a_e<`U&<XQWZ7W,VQ%9hN8J%Y=H%UT7'Z]q)0$*?XlEY>o/>!8BQQ6ehZB:i_QUSW^u)U_>ac8_qZ?7+e`=P:Vj@W_j8<^?LU2V9Zp8Ftt845Ze:GFnPhC%]U_3!8(CIh7bH2@;o4D0[#@p>gJo"uaSZr1E]L#<F&WjL?ISX+1u&fj,0^tkDV(V?YOdW>DMl-ZYjS-)>g$U0/''uY%/=`/+-X!N%%Cl&3Sdf9[Hh'3Xo8:5BdN_CNI8D![3$E]lD5*HV]fpIUZeXig.MC8oC@<p&KBZVt?7ssuJN[p7r8-!KD.GK7Y";,"SQWiUOV'uG%6(o'2.![:rdNf<XA&B>s)u6r61rT#:;P1Sfb0f_$GobuXpmbJ^ma7TnFuf*'3fk/"*_UV4U[4KpNmAk87S0$9/Tg7;]BB9HZ0rBs%4O5B6h%2Ghk/bUK!rh-B+7lqlELIYX%j0,FVRZEgY2L2/.]!''3-k(FX=!gm@?2km=Od.G>r:V5fsTgZ\D[q(m0l_(hGE:a*jG:%%Kgp.p'&]VZLeq7[nD6F7r,-SMm=,;UnSI4<XlI:V8!14uj6R_ai=@e+FIA/MUo\W!N)eUU&"14&]'hmI;hm;NRPC@=2jf?Ii^R-;%)@n(.qI7lV\VZ%E2R(^G,kYG=$Rcp%C3idI"YU!07]SD^:$q*2BqO*(OI5H5+FjLG=F!/`@(E246(JD3MpphAXi9Rr2K-m]#IJ8L%^`cpTVF;R,B<[A0!#.n`1Sr+I!Q,bQaobbP#P;YQ"/0+%de6@K!)-%*LTp'ho!IS&F\JgY(.:u0ghU<W]>3I<gY.W*mEp)qS;p.I%k;,LKTB6t[Qg4H]YI&+PTjd\7g,sKN>I=:uh;25+m=S'2.B[&AFb*?d17i:0qn0k?H!-e3gbWM2;G@F<US;(m8ur'$1O#*/X*2*<%&h3,%2#]oaQ`r/JbW,hnd2c?)")>eDHadU]-n-2>$!S[eljDH]h7!Gsg.d<$,:+ud5LaI@@TS=`^-aT>ILk*UeYWdS+skS1"=MXn%%D3?:T,)&P&eY';\J0>$2=(WYHF.Ja)QK5%2-'KrF/[Qe',-6*lDHQQNpCCX)0(jelDOl"C[3:SWoLn0RO@P>T^=Dg2+qYE@2Bi-%FNEXfcF?YX0g>fJ\O2oD'Ub'%P'i;5kJMh`85>287O$@l3kqD8(_)e0Dj!L;VpQ5/l3^N+1X+=cFH%F"WrhZ-50)KASs/dA*U36F%(AKE.)r]?'Gm0IYOX@WnbL%iIjNo/hU$GNoN0VJdf'n!HS:j:]nU&!.V3Eh!VTD0$K>aLkls@I(+QT-6VYXCjS!Hf=@\1`T9H#$d%W=To#5@BbKmh//.V:6tE^,N(3`e7l-5ZC77I?`+3NFnoMWco/SK%[8,iXCbtSPu*V<mNMpX0<LiUcJt>&S.YKl\c#%5dNHgKU0W'%KV%#\nk#">D*Q.eSg6%`Fdp])$dT_s+g6p96Qk=aLTRsS]/uWg@R;^a!+2'(L.p,hHj<G['rOqjP3ZLmBI558%+WC!j2GkhB'qtJ%VA4"Cj)%"=FJZR;9,uNf(0HT#dVB,?r&P@7#/reX2O.*Rl!mT@TFrD`Dd]o?FQJEMe!F3('5jF9-_3m#[!K.mibZX&]A_$Yr*4'l%PcQqNj=]sqYK@6()PAmm.N4\0TMib5aEAEjac<Y(WS@bj4mt:3I$[kOI=)Ud(AP.u(_L0^%O_n1<dSWrnZ<KiajG0':,WEd"MX(R%nrmE2mZOVrBi]7^pg%$)cR#Ac!!Ln8bfZ6PoYcffJ:bLEGi<V.\.P1Lie89%9P><Em;tRG*L0!c`R7AqT]-c?DbL*%_Z>lM$aBoT%[i[#SQ_Rah,[7V`jZ:&51du_OMq39qP'XjHlMUur\jFp'JguK[HaVtIGF@lp,aSc"^u71/7>Ys9Q$@t1i]Qu,>Od=0P`&F5NtJT<%Q9k%rcL+?sp![\XODClX/C'#*_2@ZNjfJb-.;$Xm6HX#_oIa6)cKCrElcph0/55(I:`%&8g[mu#<rpAnj.-W;@4Yrrm5?@*.db<s%Fq_gtEKHkoB%!PX9mnG2TL$agm;]ub>\*To&tc3X(IB[@D*HR[&o]ZKP"2oBp$"ug*)TDZZ?ofcQG_1X"S4SUJMZp5KqU<Kn)L"5%l$fiZ_<1"BEduSY(gt9Fg%ru(*9"%$LfYHB6k^eXluJ5`6k'3s@GWu$fcflQ51U,o76Q*!`?jqYXgUeFF?U0=>c2.]+a70ZpT!<'%'-sqc'\A=8nIH#?+R4X?OGk=F-sg!9m]De=6591Ilug]%qD[88[/a8lg28lh-H)Mt3\XUj>6r`94O>GtI"n0'O61<*ESL>rbb\IA%"?]%\_2QjHjV]lk<*eQ].tQ3Vd7.IjTaGnAh%^#NC/U_.X]P-J$Z##cj?p[Pb$;sPh.*JUot^C6;jX@^M4`LG5GOe)3C)Z_2Srd,%nRuoL)L%Ma>K(!k+K/e[[NQk`$%+>'*Pu6!a<KC*T,GH'rG)IK75\52^Z">^OTc4L'O^:CWKlB<W-f6se9TbHp%C?!i<R`Z?Dsdr%d'+2D;pQTYfAVHGjn/MCm_Aq-'o/`#HN5aqIEggeLS!"I=k)/Y'dD9eGIfk*p*JNk!-4C!fHipMq.^8[1_b?C.sQ]VVE_$uLF\Bt%?3N(,^[t2C1r$q4(0;_NN$!&`.=u5]Xf/KmV*s0eNd9C)r")N"3-*a#<-6*Z($!E=)eqh?oGNP3IL9cBntL.Bq/ttGM34QZ5j"QT%<e%F#QQ.GK;hp@/):cP"abPYiOC)j>FalAgS=Y6W2")R93JMn7Vt,Do)dGH9"KlnZbENm<3hl_%N]PZ5OK0nA]u#oF!5PU:_liEi%NJrLU&cVHV1&"==_\\[3d,YPDIC.t0Q$5A^rEpJABC%2;;ue8$?q]qVLQPN=HH(iS"p)a2SfTc+7\6s#LO@3A57E/?mr%l'XStY8%HT*?S-$FQL&s1%+fFX($[UI_fLtP6']]]2P!<nF&M"Mb>DgL;d:5Qs"iV/bc3`SG**H+L7=>bP,mdBg?`.[_b6<)GorS:6AbBopn%K`h6Hp3/7P-=;"p_^G`.I.ip=Ml^O9^i,p46rKN"VfrX.?E<)&*ahT.oFr(0EC,CW?j>6b`=951b7J%>moZFN:?*/+YZ1*l;QAmQ%RDF/YE_S$&VT@75)-j_K_17?)(?DpN,,c8Do;N7RSkM&E!*a^V'PIc-J>ZT*Pub_!SH)=1lPM*\*W[/aJd!%>?D`fS-*DQciW&tM%LGscX/t*o2VJ?O3j,R&Jh@TWah$'s)C=\]bHOUECT@0^bTGBYRiIFbGdM<%g1P,a>Si<jq)iNKbR[$"E-7;t9iVc2R-tbpEp%r'U%FIA7=UE.`Epk$5tHhu,-ga$I-.dLg09[uTO-gWhd%#uQ)[XC<naB,lK^rFIaN^9i]d9Be&D`=kB2U'A?$J-NV9>^4Q!&6$%8(+jq%V>\b*mNJ'Rkd^U3=2I0PVgY^l?04X=VD#$OG%R5JD4DpJa6P8QXI)<u7b>8uhq;\dH-DcSpfqc-j,n]PX/Rb-IIG'][ZqB4.Thi9%+6cj1Gr?QBD\#TZR.<[`/W9BMV[?ha:HmV5^^GGX'ee?M2cA-kZ>MA.Srrksce"P-3,#p)3Y7;S+OY&(*?`dGX9T;.fX$$>n7V?R%%BEX%be-`rVU_9F5)_ir$X0o*s37InZcea]X/5W/PCBgs^Y5'@85P(9>bO%?/Y'qq6Q5[DS_H9G*B-$`Qpp8QjeVoJXMesTVo$3c%Yr;+1^9oC8n[XX]MSm=pKb-'MS!+M%pjtQ'RIRlj0DhPTWTgu#E9,Ta_T/Jg_]W5iBcu`3V"2tLW>)$M>3+8-b^;j(!RYlk.Fk3_%&_VUj+@OUb=iU<uWAi@5q`7L2N]&$h3C83)AQMR?IX2NrS/rE[aHWTrcq';&=j\Ulm#-UB,Q8]#-E;SI[V)NY53FF^8B\RbSiZgK%'lufWoUJO,bQXeUD-O)\/K.Y#0.lh!mGJ8u/hqKJa.7)7gK9-4a=@uQioEi_TL#^92kh;bp"nOMrA7r4%t`%!EIlB_'[imF&)Km`%)%C/RrGg_O0Z58T/lnJTP8+h0BgjiP<$'kY9Du*G:p4+bY+4uM=Bi1^YG>$hBg!nT>$cGWK:YjX@?T_M+PH<j3Ap`q4&(]2Ze;T2%Sg/]..<$gonR"X2&G5pm6,>mSNsg">H$a[gVV/WFKijPX>%(UBg:IoB[fo[p;cJn29+hE_f_5/,NK1Le4V$8p6g7FL5t%q?=6DD0%`\/c]@^Jk$*C6"qd0#.o/YU:5cj:?nR,`XZX/UJ"-U3/,VC3l=R,S+*H=XOL\Pi&LkU2dZEWY@7?!iB#<mCGB4u;)gCT,0N.%[p"%9Hm=Gh_1SZ/+Q4+mb^]IQJ>:a$kpZT4R:m,Ua4:-F'_cI$JoQ;\rk'LAL]R:/Cq"*8npLeY1F;eT3mLVe58@H]d;J#3#t!)lYWfk%`,p^28^^=4O50M`TlVHu]CU>ZS&!CF5*_Nqf:>!^0u:5"j31!g%-c8e<+)<Xk0\3PTg(lA![COn%9;qeVBiFn+$e,rBQW&`4ea7c%VF_eDH>BX3q2mepQ^<0VhuE/;FCcg`"icjQoIh7I0Nd%OX$r#[MMa^0EP5f<"5[^"hL>IrK0dt;?*q.<QC@%Q:qn[B+hm-MPFk)<%@.;@;k@?%+_SgdR;>'$pM#[9O4B+Q%h`^bre+7PQanHaaYOML;qY:Bbm`SHU<44`R`%?a@qLl.7@ts\]SSApI>unq$U?&?e86E'r%Hp@>ddrXZK*h5GZ5;-kT1Ec.UO<S3OL[:Lm0/WTp<^@`qV.]'fW2Bup9igt5CGTFT&$PO4IPK4%/PPVs7m>a$isNbaa7\6>[j,6^%USa^>O&P9Tf\R-En$[chk0/%%?Tu.u54A?Y`;MunqhWSl^9ngSo'(ED0H]B(c=;cle_:#,4;bXLS.Eg'%"A$E]^YgZkGt+'HoIaJ%rdKmHb5T"Kqt$H[`TP#9c_%rLoqt%OX2"'%n=P10O'dA5a5?jSVk<n]^]*%RrU]Iq\L)+gXT)2r^Uj>6^ZMgC8Zh!Us8DM<IerZN%rpA>;kF_bCYQ*_Ys7dD&^\n)[TDc\-pfDt?pV6OeYQ+UJs8)WMro&p1s+?(*rdXb7GCTKKTDugl%u:2*c[YpqJ"+nO>UNeVqA5e(%L[3=eGl;iST>-NqqQKqt\!d8#\+r8gQ[f"Thu2;Zf.ER]s8Up3TD`]CrMSQO++O(Q5QAoLF8tlN^]!hLT7?b8huE#Ws7Y?"p]"S"%o(epWn@O2IpOE.Zmlpd+s8B/$<?p*EkO:_5ZiB[4r_K0c5J;#E<r~>%AI9_PrivateDataEnd